==References==
{{Reflist}}

[[Category:Telecommunications equipment]]
[[Category:Fiber optics]]</text>
      <sha1>mhcaegfc270murlr61oaqevwn12knaq</sha1>
    </revision>
  </page>
  <page>
    <title>Mode volume</title>
    <ns>0</ns>
    <id>41376</id>
    <revision>
      <id>900362457</id>
      <parentid>549397021</parentid>
      <timestamp>2019-06-05T04:58:14Z</timestamp>
      <contributor>
        <username>Wiki-uk</username>
        <id>123983</id>
      </contributor>
      <comment>Importing Wikidata [[Wikipedia:Short description|short description]]: &quot;Number of bound modes that an optical fiber is capable of supporting&quot; ([[User:Galobtter/Shortdesc helper|Shortdesc helper]])</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="818" xml:space="preserve">{{short description|Number of bound modes that an optical fiber is capable of supporting}}
In [[fiber optics]], '''mode volume''' is the number of bound [[Transverse mode|modes]] that an [[optical fiber]] is capable of supporting.  

The mode volume ''M'' is approximately given by &lt;math&gt;4V^2 \over \pi^2&lt;/math&gt; and &lt;math&gt;{V^2 \over 2} \left({g \over g+2}\right)&lt;/math&gt;, respectively for [[step-index profile|step-index]] and [[power-law index profile]] fibers, where ''g'' is the profile parameter, and ''V'' is the [[normalized frequency (fiber optics)|normalized frequency]], ''which must be greater than 5 for this approximation to be valid''.

==See also==
*[[Equilibrium mode distribution]]
*[[Mode scrambler]]
*[[Mandrel wrapping]]

==References==
*{{FS1037C MS188}}

[[Category:Fiber optics]]


{{optics-stub}}</text>
      <sha1>451c1bp1glemtmk9rfu1m4wf8aichnq</sha1>
    </revision>
  </page>
  <page>
    <title>Modification of Final Judgment</title>
    <ns>0</ns>
    <id>41377</id>
    <revision>
      <id>959276390</id>
      <parentid>937087476</parentid>
      <timestamp>2020-05-28T00:00:41Z</timestamp>
      <contributor>
        <username>FrescoBot</username>
        <id>9021902</id>
      </contributor>
      <minor />
      <comment>Bot: [[User:FrescoBot/Links|link syntax]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3265" xml:space="preserve">In United States [[telecommunication]] law, the '''Modification of Final Judgment''' ('''MFJ''') is the August 1982 [[consent decree]] concerning the [[American Telephone &amp; Telegraph Company]] (AT&amp;T) and its subsidiaries.  The terms required the [[Bell System divestiture]] &amp;mdash; removing local telephone service from AT&amp;T control and putting business restrictions on the divested local telephone companies &amp;mdash; in exchange for removing other longstanding restrictions on what businesses AT&amp;T could control.&lt;ref&gt;{{cite book | url = https://books.google.com/books?id=PJguAgAAQBAJ&amp;lpg=PT139&amp;ots=QC4vyGhYBY&amp;pg=PT139&amp;f=false | title = Highway of Dreams: A Critical View Along the Information Superhighway | first = A. Michael | last = Noll | edition = digital printing | publisher = Routledge | location = New York City | year = 2010 | lccn = 96041620 }}&lt;/ref&gt;{{rp|125}}

The decree replaced the entirety of the previous final judgment of January 24, 1956 in the case [[United States v. Western Electric|''United States of America v. Western Electric Company, Incorporated, and American Telephone and Telegraph Company'']],&lt;ref name=&quot;mfj-scan&quot;&gt;[https://web.archive.org/web/20060830041121/http://members.cox.net/hwilkerson/documents/AT%26T_Consent_Decree.pdf Modification of Final Judgement] (archived scan) in ''United States of America v. Western Electric Company, Incorporated, and American Telephone and Telegraph Company''.  United States District Court for the District of Columbia, Civil Action No. 82-0192, filed August 24, 1982.  Retrieved 2019-01-29.&lt;/ref&gt; also known as ''United States v. Western Electric Co.''&lt;ref&gt;{{cite journal | url = https://scholarship.law.berkeley.edu/cgi/viewcontent.cgi?referer=https://www.google.com/&amp;httpsredir=1&amp;article=1084&amp;context=btlj | title = The AT&amp;T Antitrust Consent Decree: Should Congress Change the Rules | first1 = Lawrence A. | last1 = Sullivan | first2 = Ellen | last2 = Hertz | work = Berkeley Technology Law Journal | date = September 1990 | volume = 5 | issue = 2 | page = 236 | doi = 10.15779/Z38JH3G | issn = 1086-3818 | publisher = [[University of California, Berkeley, School of Law]] }}&lt;/ref&gt; which had been transferred to the [[United States District Court for the District of Columbia]] and is referred to in the MFJ as the ''Western Electric'' case,&lt;ref name=&quot;justia-19830228&quot;&gt;{{cite web | url = https://law.justia.com/cases/federal/district-courts/FSupp/552/131/1525975/ | title = United States v. American Tel. and Tel. Co., 552 F. Supp. 131 (D.D.C. 1983) | work = Justia | accessdate = 2019-01-29 }}  Copy of full opinion accompanying the Modification of Final Judgment.&lt;/ref&gt;{{rp|143 (also footnote 4)}} and consolidated with the existing ''[[United States v. AT&amp;T]]'' filed on November 20, 1974, which is referred to in the MFJ as the ''AT&amp;T'' action&lt;ref name=&quot;justia-19830228&quot;/&gt;{{rp|139}} or ''AT&amp;T'' case.

The decree was made with [[Harold H. Greene]] as presiding judge.&lt;ref name=&quot;justia-19830228&quot;/&gt;

== References ==
{{reflist}}

{{FS1037C}}
{{Bell System}}
{{Telecommunications}}

[[Category:1982 in technology]]
[[Category:1982 in United States case law]]
[[Category:Bell System]]
[[Category:United States antitrust case law]]
[[Category:United States communications regulation case law]]</text>
      <sha1>648pmphb72eso5hjg539rl5c6xiebi4</sha1>
    </revision>
  </page>
  <page>
    <title>Modified AMI code</title>
    <ns>0</ns>
    <id>41378</id>
    <revision>
      <id>966795362</id>
      <parentid>935254534</parentid>
      <timestamp>2020-07-09T07:33:09Z</timestamp>
      <contributor>
        <username>Slimey.limey</username>
        <id>263905</id>
      </contributor>
      <comment>remove mysterious and spurious &quot;road construction&quot; annotation</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8096" xml:space="preserve">'''Modified AMI codes''' are a digital telecommunications technique to maintain [[system]] [[synchronization]]. [[Alternate mark inversion]] (AMI) [[line code]]s are modified by deliberate insertion of [[bipolar violation]]s. There are several types of modified AMI codes, used in various [[T-carrier]] and [[E-carrier]] systems.

==Overview==
The [[clock rate]] of an incoming T-carrier is extracted from its bipolar line code. Each signal transition provides an opportunity for the receiver to see the transmitter's clock. The AMI code guarantees that transitions are always present before and after each mark (1 bit), but are missing between adjacent spaces (0 bits). To prevent loss of [[synchronization]] when a long [[string (computer science)|string]] of zeros is present in the [[payload (computing)|payload]], deliberate bipolar violations are inserted into the line code, to create a sufficient number of transitions to maintain synchronization; this is a form of [[run length limited]] coding. The receive [[terminal equipment]] recognizes the bipolar violations and removes from the user data the marks attributable to the bipolar violations.

T-carrier was originally developed for voice applications. When voice signals are digitized for [[transmission (telecommunications)|transmission]] via T-carrier, the [[data stream]] always includes ample 1 bits to maintain synchronization. (To help this, the [[Î¼-law algorithm]] for digitizing voice signals encodes silence as a continuous stream of 1 bits.) However, when used for the transmission of [[digital data]], the conventional AMI line code may fail to have sufficient marks to permit recovery of the incoming clock, and synchronization is lost. This happens when there are too many consecutive zeros in the [[User (telecommunications)|user]] [[data]] being transported. 

The exact pattern of bipolar violations that is transmitted in any given case depends on the line rate (''i.e.'', the level of the line code in the [[T-carrier]] hierarchy) and the polarity of the last valid [[mark frequency|mark]] in the user data prior to the unacceptably long string of zeros. It would not be useful to have a violation immediately following a mark, as that would not produce a transition. For this reason, all modified AMI codes include a space (0 bit) before each violation mark.

In the descriptions below, &quot;{{mono|B}}&quot; denotes a balancing mark with the opposite polarity to that of the preceding mark, while &quot;{{mono|V}}&quot; denotes a bipolar violation mark, which has the same polarity as the preceding mark. In order to preserve AMI coding's desirable absence of [[DC bias]], the number of positive marks must equal the number of negative marks. This happens automatically for balancing ({{mono|B}}) marks, but the line code must ensure that positive and negative violation marks balance each other.

==Zero length code suppression==
The first technique used to ensure a minimum density of marks was '''zero code suppression''' a form of [[bit stuffing]], which set the least significant bit of each 8-bit byte transmitted to a 1. (This bit was already unavailable due to [[robbed-bit signaling]].) This avoided the need to modify the AMI code in any way, but limited available data rates to 56,000 bits per second per [[Digital Signal 0|DS0]] voice channel. Also, the low minimum density of ones (12.5%) sometimes led to increased clock [[slip (telecommunication)|slip]]page on the span.

Increased demand for bandwidth, and compatibility with the [[G.703]] and [[ISDN]] [[Primary Rate Interface|PRI]] standards which called for 64,000 bits per second, led to this system being superseded by B8ZS.

==B8ZS (North American T1)==
Commonly used in the North American T1 ([[Digital Signal 1]]) 1.544 Mbit/s line code, '''bipolar with eight-zero substitution (B8ZS)''' replaces each string of 8 consecutive zeros with the special pattern &quot;{{mono|000VB0VB}}&quot;. Depending on the polarity of the preceding mark, that could be {{mono|000+â0â+}} or {{mono|000â+0+â}}.

==B6ZS (North American T2)==
At the North American T2 rate (6.312 Mbit/s), bipolar violations are inserted if 6 or more consecutive zeros occur. This line code is called '''bipolar with six-zero substitution (B6ZS)''', and replaces 6 consecutive zeros with the pattern &quot;{{mono|0VB0VB}}&quot;. Depending on the polarity of the preceding mark, that could be {{mono|0+â0â+}} or {{mono|0â+0+â}}.

==HDB3 (European E-carrier)==
Used in all levels of the European [[E-carrier]] system, the '''high density bipolar of order 3 (HDB3)''' code replaces any instance of 4 consecutive 0 bits with one of the patterns &quot;{{mono|000V}}&quot; or &quot;{{mono|B00V}}&quot;. The choice is made to ensure that consecutive violations are of differing polarity; i.e., separated by an odd number of normal {{mono|+ or â}} marks.
{|class=wikitable style=&quot;text-align:center;&quot;
|+ HDB 3 coding of 0000{{sub|2}}
! Parity of +/â bits&lt;br/&gt;since previous V !! Pattern !! Previous pulse !! Coded
|-
|rowspan=2| Even || rowspan=&quot;2&quot; | B00V
| + || â00â
|-
| â || +00+
|-
|rowspan=2| Odd || rowspan=&quot;2&quot; | 000V
| + || 000+
|-
| â || 000-
|}

These rules are applied on the code as it is being built from the original string. Every time there are 4 consecutive zeros in the code they will be replaced by either 000â, 000+, +00+ or â00â. To determine which pattern to use, one must count the number of pluses (+) and the number of minuses (â) since the last violation bit V, then subtract one from the other. If the result is an odd number then 000â or 000+ is used. If the result is an even number then +00+ or â00â is used. To determine which polarity to use, one must look at the pulse preceding the four zeros. If 000V form must be used then V simply copies the polarity of last pulse, if B00V form must be used then B and V chosen will have the opposite polarity of the last pulse.

===Examples===
Here are some examples of bit streams codes with AMI and HDB3. All assume the same starting conditions: the previous 1 bit was â, and the previous violation was an even number of 1 bits ago. (E.g. the preceding bits could have been ++â.)
{|
| '''Input''' || {{mono|10000110}}{{sub|2}}
|-
| '''AMI'''   || {{mono|+0000â+0}}
|-
| '''HDB3'''  || {{mono|+B00Vâ+0}}
|-
|             || {{mono|+â00â+â0}}
|}
{|
| '''Input''' || {{mono|101000001100001100000001}}{{sub|2}}
|-
| '''AMI'''   || {{mono|+0â00000+â0000+â0000000+}}
|-
| '''HDB3'''  || {{mono|+0â000V0+âB00Vâ+B00V000+}}
|-
|             || {{mono|+0â000â0+â+00+â+â00â000+}}
|}
{|
| '''Input''' || {{mono|1010000100001100001110000111100001010000}}{{sub|2}}
|-
| '''AMI'''   || {{mono|+0â0000+0000â+0000â+â0000+â+â0000+0â0000}}
|-
| '''HDB3'''  || {{mono|+0-000V+000V-+B00V-+-000V+-+-B00V+0-B00V}}
|-
|             || {{mono|+0-000-+000+-+-00-+-+000+-+-+-00-+0-+00+}}
|}
{|
| '''Input''' || {{mono| 10000000000}}{{sub|2}}
|-
| '''AMI'''   || {{mono|+000000000}}
|-
| '''HDB3'''  || {{mono|+B00VB00V00}}
|-
|             || {{mono|+-00-+00+00}}
|}

==B3ZS (North American T3)==
At the [[DS-3|North American T3]] rate (44.736 Mbit/s), bipolar violations are inserted if 3 or more consecutive zeros occur. This line code is called '''bipolar with three-zero substitution (B3ZS)''', and is very similar to HDB3. Each run of 3 consecutive zeros is replaced by &quot;{{mono|00V}}&quot; or &quot;{{mono|B0V}}&quot;. The choice is made to ensure that consecutive violations are of differing polarity, i.e. separated by an odd number of normal {{mono|B}} marks.
{|class=wikitable style=&quot;text-align:center;&quot;
|+ B3ZS coding of &quot;000&quot;
! Number of B bits&lt;br/&gt;since last V !! Pattern !! Polarity&lt;br/&gt;of last B !! Coded
|-
|rowspan=2| Odd ||rowspan=2 | 00V
| + || 00+
|-
| â || 00â
|-
|rowspan=2| Even ||rowspan=2 | B0V
| + || â0â
|-
| â || +0+
|}

==See also==
Other line codes that have 3 states:
* [[Bipolar encoding]] or alternate mark inversion
* [[Hybrid ternary code]]
* [[MLT-3 encoding]]
* [[4B3T]]

{{Bit-encoding}}

{{FS1037C}}

[[Category:Encodings]]
[[Category:Line codes]]
[[Category:Multiplexing]]</text>
      <sha1>codtrryd0q0dwipalda1cw6kswk6znh</sha1>
    </revision>
  </page>
  <page>
    <title>Modulation factor</title>
    <ns>0</ns>
    <id>41379</id>
    <redirect title="Modulation index" />
    <revision>
      <id>41339507</id>
      <parentid>40176580</parentid>
      <timestamp>2006-02-26T18:24:32Z</timestamp>
      <contributor>
        <username>Splash</username>
        <id>285145</id>
      </contributor>
      <comment>#REDIRECT [[Modulation index]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="30" xml:space="preserve">#REDIRECT [[Modulation index]]</text>
      <sha1>n0vzlz9dn119xbf8hggyd4h487kb1oq</sha1>
    </revision>
  </page>
  <page>
    <title>Modulation rate</title>
    <ns>0</ns>
    <id>41380</id>
    <redirect title="Symbol rate" />
    <revision>
      <id>231974013</id>
      <parentid>231922027</parentid>
      <timestamp>2008-08-14T20:55:55Z</timestamp>
      <contributor>
        <username>Mange01</username>
        <id>2378565</id>
      </contributor>
      <minor />
      <comment>[[WP:AES|â]] Redirected page to [[Symbol rate]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" xml:space="preserve">#REDIRECT [[Symbol rate]]</text>
      <sha1>spv2mp1j8xbjctplkus9d2legxvksc3</sha1>
    </revision>
  </page>
  <page>
    <title>Î-law algorithm</title>
    <ns>0</ns>
    <id>41382</id>
    <revision>
      <id>987294327</id>
      <parentid>973283966</parentid>
      <timestamp>2020-11-06T03:01:37Z</timestamp>
      <contributor>
        <ip>202.20.18.10</ip>
      </contributor>
      <comment>correct ambiguous sentence</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8158" xml:space="preserve">{{more footnotes|date=May 2018}}
{{lowercase}}

[[File:Ulaw alaw db.svg|thumb|350px|Companding of Î¼-law and A-law algorithms]]

The '''Î¼-law algorithm''' (sometimes written &quot;[[Mu (letter)|mu]]-law&quot;, often [[typographic approximation|approximated]] as &quot;u-law&quot;) is a [[companding]] algorithm, primarily used in 8-bit [[PCM]] [[Digital data|digital]] [[telecommunication]] systems in [[North America]] and [[Japan]]. It is one of two versions of the [[G.711]] standard from [[ITU-T]], the other version being the similar [[A-law algorithm|A-law]]. A-law is used in regions where digital telecommunication signals are carried on E-1 circuits, e.g. Europe.

Companding algorithms reduce the [[dynamic range]] of an audio [[Signal (electrical engineering)|signal]]. In analog systems, this can increase the [[signal-to-noise ratio]] (SNR) achieved during transmission; in the digital domain, it can reduce the quantization error (hence increasing signal to quantization noise ratio). These SNR increases can be traded instead for reduced [[Bandwidth (signal processing)|bandwidth]] for equivalent SNR.

==Algorithm types==
The Î¼-law algorithm may be described in an analog form and in a quantized digital form.

===Continuous===
For a given input {{mvar|x}}, the equation for Î¼-law encoding is&lt;ref&gt;{{cite web |url=http://www.cisco.com/en/US/tech/tk1077/technologies_tech_note09186a00801149b3.shtml |title=Cisco - Waveform Coding Techniques |accessdate=2008-07-29 }}&lt;/ref&gt;

: &lt;math&gt;
F(x) = \sgn(x) \frac{\ln(1+ \mu |x|)}{\ln(1+\mu)}~~~~-1 \leq x \leq 1
&lt;/math&gt;

where {{math|1=''Î¼'' = 255}} in the North American and Japanese standards and {{math|1=sgn(''x'')}} is the [[sign function]]. It is important to note that the [[Range of a function|range]] of this function is â1 to 1.

Î¼-law expansion is then given by the inverse equation:&lt;ref&gt;[http://www.cisco.com/en/US/tech/tk1077/technologies_tech_note09186a00801149b3.shtml Cisco's Waveform Coding Techniques]&lt;/ref&gt;

: &lt;math&gt;
F^{-1}(y) = \sgn(y) (1 / \mu ) ((1 + \mu)^{|y|}- 1)~~~~-1 \leq y \leq 1
&lt;/math&gt;

===Discrete===
The discrete form is defined in ITU-T Recommendation [[G.711]].&lt;ref&gt;{{cite web |url=http://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-G.711-198811-I!!PDF-E&amp;type=items |title=ITU-T Recommendation G.711}}&lt;/ref&gt;

G.711 is unclear about how to code the values at the limit of a range (e.g. whether +31 codes to 0xEF or 0xF0).{{citation needed|date=October 2016}}
However, G.191 provides example code in the [[C programming language|C language]] for a Î¼-law encoder. The difference between the positive and negative ranges, e.g. the negative range corresponding to +30 to +1 is â31 to â2. This is accounted for by the use of [[1's complement]] (simple bit inversion) rather than [[2's complement]] to convert a negative value to a positive value during encoding.

{| class=&quot;wikitable&quot;
|+ Quantized Î¼-law algorithm
! 14 bit Binary Linear input code !! 8 bit Compressed code
|-
| +8158 to +4063 in 16 intervals of 256 || 0x80 + interval number
|-
| +4062 to +2015 in 16 intervals of 128 || 0x90 + interval number
|-
| +2014 to +991 in 16 intervals of 64 || 0xA0 + interval number
|-
| +990 to +479 in 16 intervals of 32 || 0xB0 + interval number
|-
| +478 to +223 in 16 intervals of 16 || 0xC0 + interval number
|-
| +222 to +95 in 16 intervals of 8 || 0xD0 + interval number
|-
| +94 to +31 in 16 intervals of 4 || 0xE0 + interval number
|-
| +30 to +1 in 15 intervals of 2 || 0xF0 + interval number
|-
| 0 || 0xFF
|-
| â1 || 0x7F
|-
| â31 to â2 in 15 intervals of 2 || 0x70 + interval number
|-
| â95 to â32 in 16 intervals of 4 || 0x60 + interval number
|-
| â223 to â96 in 16 intervals of 8 || 0x50 + interval number
|-
| â479 to â224 in 16 intervals of 16 || 0x40 + interval number
|-
| â991 to â480 in 16 intervals of 32 || 0x30 + interval number
|-
| â2015 to â992 in 16 intervals of 64 || 0x20 + interval number
|-
| â4063 to â2016 in 16 intervals of 128 || 0x10 + interval number
|-
| â8159 to â4064 in 16 intervals of 256 || 0x00 + interval number
|}

==Implementation==
The Î¼-law algorithm may be implemented in several ways:
;Analog: Use an amplifier with non-linear gain to achieve companding entirely in the analog domain.
;Non-linear ADC: Use an [[analog-to-digital converter]] with quantization levels which are unequally spaced to match the Î¼-law algorithm.
;Digital: Use the quantized digital version of the Î¼-law algorithm to convert data once it is in the digital domain.

;Software/DSP
:Use the continuous version of the Î¼-law algorithm to calculate the companded values.

== Usage justification ==
Î¼-law encoding is used because [[Speech communication|speech]] has a wide [[dynamic range]]. In analog signal transmission, in the presence of relatively constant background noise, the finer detail is lost. Given that the precision of the detail is compromised anyway, and assuming that the signal is to be perceived as audio by a human, one can take advantage of the fact that the perceived [[acoustic intensity level]] or [[loudness]] is logarithmic by compressing the signal using a logarithmic-response operational amplifier ([[Weber-Fechner law]]). In telecommunications circuits, most of the noise is injected on the lines, thus after the compressor, the intended signal is perceived as significantly louder than the static, compared to an un-compressed source. This became a common solution, and thus, prior to common digital usage, the Î¼-law specification was developed to define an interoperable standard.

In digital systems this pre-existing algorithm had the effect of significantly reducing the number of bits needed to encode recognizable human voice. Using Î¼-law, a sample could be effectively encoded in as few as 8 bits, a sample size that conveniently matched the symbol size of most standard computers.

Î¼-law encoding effectively reduced the dynamic range of the signal, thereby increasing the [[Channel coding|coding]] efficiency while biasing the signal in a way that results in a signal-to-[[distortion]] ratio that is greater than that obtained by linear encoding for a given number of bits.

[[File:Ulaw.JPG|thumb|400px|right|Î¼-law decoding as generated with the Sun Microsystems C-language routine g711.c commonly available on the Internet.]]
The Î¼-law algorithm is also used in the [[Au file format|.au format]], which dates back at least to the [[SPARCstation 1]] by Sun Microsystems as the native method used by the /dev/audio interface, widely used as a de facto standard for sound on Unix systems. The au format is also used in various common audio [[Application programming interface|API]]s such as the classes in the sun.audio [[Java package]] in [[Java platform|Java]] 1.1 and in some [[C Sharp (programming language)|C#]] methods.

This plot illustrates how Î¼-law concentrates sampling in the smaller (softer) values. The abscissa represents the byte values 0-255 and the vertical axis is the 16-bit linear decoded value of Î¼-law encoding.

==Comparison with A-law==
The Î¼-law algorithm provides a slightly larger dynamic range than the A-law at the cost of worse proportional distortions for small signals. By convention, A-law is used for an international connection if at least one country uses it.

==See also==
* [[Audio level compression]]
* [[Signal compression (disambiguation)]]
* [[G.711]]
* [[Tapered floating point]]

==References==
{{FS1037C}}
&lt;references/&gt;
