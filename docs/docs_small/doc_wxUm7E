==== Input sparsity time algorithms ====
In 2015, Lee and Sidford showed that, it can be solved in &lt;math&gt;O((nnz(A) + n^2)\sqrt{n}L)&lt;/math&gt; time,&lt;ref&gt;{{cite conference|title= Efficient inverse maintenance and faster algorithms for linear programming | conference = FOCS '15 Foundations of Computer Science |last1=Lee|first1=Yin-Tat|last2=Sidford|first2=Aaron |year=2015| arxiv = 1503.01752 }}&lt;/ref&gt; where &lt;math&gt;nnz(A)&lt;/math&gt; represents the number of non-zero elements, and it remains taking &lt;math&gt;O(n^{2.5}L)&lt;/math&gt; in the worst case.

==== Current matrix multiplication time algorithm ====
In 2019, Cohen, Lee and Song improved the running time to &lt;math&gt;\tilde O( ( n^{\omega} + n^{2.5-\alpha/2} + n^{2+1/6} ) L)&lt;/math&gt; time, &lt;math&gt; \omega &lt;/math&gt; is the exponent of [[matrix multiplication]] and &lt;math&gt; \alpha &lt;/math&gt; is the dual exponent of [[matrix multiplication]].&lt;ref&gt;{{cite conference|title= Solving Linear Programs in the Current Matrix Multiplication Time | conference = 51st Annual ACM Symposium on the Theory of Computing  |last1=Cohen|first1=Michael B.|last2=Lee|first2=Yin-Tat|last3=Song|first3=Zhao |year=2018| arxiv =  1810.07896 | series = STOC'19 }}&lt;/ref&gt;  &lt;math&gt; \alpha &lt;/math&gt; is (roughly) defined to be the largest number such that one can multiply an &lt;math&gt; n \times n &lt;/math&gt; matrix by a &lt;math&gt; n \times n^\alpha &lt;/math&gt; matrix in &lt;math&gt; O(n^2) &lt;/math&gt; time. In a followup work by Lee, Song and Zhang, they reproduce the same result via a different method.&lt;ref&gt;{{cite conference|title= Solving Empirical Risk Minimization in the Current Matrix Multiplication Time | conference = Conference on Learning Theory |last1=Lee|first1=Yin-Tat|last2=Song|first2=Zhao |last3=Zhang|first3=Qiuyi|year=2019| arxiv = 1905.04447 | series = COLT'19 }}&lt;/ref&gt; These two algorithms remain &lt;math&gt;\tilde O( n^{2+1/6} L ) &lt;/math&gt; when &lt;math&gt; \omega = 2 &lt;/math&gt; and &lt;math&gt; \alpha = 1 &lt;/math&gt;. The result due to Jiang, Song, Weinstein and Zhang improved &lt;math&gt; \tilde O ( n^{2+1/6} L) &lt;/math&gt; to &lt;math&gt; \tilde O ( n^{2+1/18} L) &lt;/math&gt;.&lt;ref&gt;{{cite conference|title= Faster Dynamic Matrix Inverse for Faster LPs |last1=Jiang|first1=Shunhua|last2=Song|first2=Zhao |last3=Weinstein|first3=Omri|last4=Zhang|first4=Hengjie|year=2020| arxiv = 2004.07470 }}&lt;/ref&gt;

=== Comparison of interior-point methods and simplex algorithms ===

The current opinion is that the efficiencies of good implementations of simplex-based methods and interior point methods are similar for routine applications of linear programming. However, for specific types of LP problems, it may be that one type of solver is better than another (sometimes much better), and that the structure of the solutions generated by interior point methods versus simplex-based methods are significantly different with the support set of active variables being typically smaller for the latter one.&lt;ref&gt;{{cite journal|doi=10.1016/S0377-2217(02)00061-9|title=Pivot versus interior point methods: Pros and cons|journal=European Journal of Operational Research|volume=140|issue=2|pages=170|year=2002|last1=Illés|first1=Tibor|last2=Terlaky|first2=Tamás|url=https://strathprints.strath.ac.uk/9200/|citeseerx=10.1.1.646.3539}}&lt;/ref&gt;

== Open problems and recent work ==
{{unsolved|computer science|Does linear programming admit a strongly polynomial-time algorithm?}}
There are several open problems in the theory of linear programming, the solution of which would represent fundamental breakthroughs in mathematics and potentially major advances in our ability to solve large-scale linear programs.
* Does LP admit a [[Time complexity#Strongly and weakly polynomial time|strongly polynomial]]-time algorithm?
* Does LP admit a strongly polynomial-time algorithm to find a strictly complementary solution?
* Does LP admit a polynomial-time algorithm in the real number (unit cost) model of computation?

This closely related set of problems has been cited by [[Stephen Smale]] as among the [[Smale's problems|18 greatest unsolved problems]] of the 21st century.  In Smale's words, the third version of the problem &quot;is the main unsolved problem of linear programming theory.&quot;  While algorithms exist to solve linear programming in weakly polynomial time, such as the [[ellipsoid method]]s and [[interior point method|interior-point techniques]], no algorithms have yet been found that allow strongly polynomial-time performance in the number of constraints and the number of variables.  The development of such algorithms would be of great theoretical interest, and perhaps allow practical gains in solving large LPs as well.

Although the [[Hirsch conjecture]] was recently disproved for higher dimensions, it still leaves the following questions open.
* Are there pivot rules which lead to polynomial-time simplex variants?
* Do all polytopal graphs have polynomially bounded diameter?

These questions relate to the performance analysis and development of simplex-like methods.  The immense efficiency of the simplex algorithm in practice despite its exponential-time theoretical performance hints that there may be variations of simplex that run in polynomial or even strongly polynomial time.  It would be of great practical and theoretical significance to know whether any such variants exist, particularly as an approach to deciding if LP can be solved in strongly polynomial time.

The simplex algorithm and its variants fall in the family of edge-following algorithms, so named because they solve linear programming problems by moving from vertex to vertex along edges of a polytope.  This means that their theoretical performance is limited by the maximum number of edges between any two vertices on the LP polytope.  As a result, we are interested in knowing the maximum [[Graph diameter|graph-theoretical diameter]] of polytopal [[Graph (discrete mathematics)|graphs]].  It has been proved that all polytopes have subexponential diameter. The recent disproof of the Hirsch conjecture is the first step to prove whether any polytope has superpolynomial diameter. If any such polytopes exist, then no edge-following variant can run in polynomial time. Questions about polytope diameter are of independent mathematical interest.

Simplex pivot methods preserve primal (or dual) feasibility.  On the other hand, criss-cross pivot methods do not preserve (primal or dual) feasibility{{snd}}they may visit primal feasible, dual feasible or primal-and-dual infeasible bases in any order.  Pivot methods of this type have been studied since the 1970s.{{citation needed|date=February 2019}}  Essentially, these methods attempt to find the shortest pivot path on the [[arrangement polytope]] under the linear programming problem.  In contrast to polytopal graphs, graphs of arrangement polytopes are known to have small diameter, allowing the possibility of strongly polynomial-time criss-cross pivot algorithm without resolving questions about the diameter of general polytopes.&lt;ref name=&quot;FukudaTerlaky&quot; /&gt;

== Integer unknowns ==
If all of the unknown variables are required to be integers, then the problem is called an [[integer programming]] (IP) or '''integer linear programming''' (ILP) problem.  In contrast to linear programming, which can be solved efficiently in the worst case, integer programming problems are in many practical situations (those with bounded variables) [[NP-hard]]. '''0–1 integer programming''' or '''binary integer programming''' (BIP) is the special case of integer programming where variables are required to be 0 or 1 (rather than arbitrary integers). This problem is also classified as NP-hard, and in fact the decision version was one of [[Karp's 21 NP-complete problems]].

If only some of the unknown variables are required to be integers, then the problem is called a '''mixed integer programming''' (MIP) problem.  These are generally also NP-hard because they are even more general than ILP programs.

There are however some important subclasses of IP and MIP problems that are efficiently solvable, most notably problems where the constraint matrix is [[totally unimodular]] and the right-hand sides of the constraints are integers or – more general – where the system has the [[total dual integrality]] (TDI) property.

Advanced algorithms for solving integer linear programs include:
* [[cutting-plane method]]
* [[Branch and bound]]
* [[Branch and cut]]
* [[Branch and price]]
* if the problem has some extra structure, it may be possible to apply [[delayed column generation]].
Such integer-programming algorithms are discussed by [[Manfred W. Padberg|Padberg]] and in Beasley.

== Integral linear programs ==
{{main|Integral polytope}}
A linear program in real variables is said to be '''integral''' if it has at least one optimal solution which is integral. Likewise, a polyhedron &lt;math&gt;P = \{x \mid Ax \ge 0\}&lt;/math&gt; is said to be '''integral''' if for all bounded feasible objective functions ''c'', the linear program &lt;math&gt;\{\max cx \mid x \in P\}&lt;/math&gt; has an optimum &lt;math&gt;x^*&lt;/math&gt; with integer coordinates. As observed by Edmonds and Giles in 1977, one can equivalently say that the polyhedron &lt;math&gt;P&lt;/math&gt; is integral if for every bounded feasible integral objective function ''c'', the optimal ''value'' of the linear program &lt;math&gt;\{\max cx \mid x \in P\}&lt;/math&gt; is an integer.

Integral linear programs are of central importance in the polyhedral aspect of [[combinatorial optimization]] since they provide an alternate characterization of a problem. Specifically, for any problem, the convex hull of the solutions is an integral polyhedron; if this polyhedron has a nice/compact description, then we can efficiently find the optimal feasible solution under any linear objective. Conversely, if we can prove that a [[linear programming relaxation]] is integral, then it is the desired description of the convex hull of feasible (integral) solutions.

Terminology is not consistent throughout the literature, so one should be careful to distinguish the following two concepts,
* in an ''integer linear program,'' described in the previous section, variables are forcibly constrained to be integers, and this problem is NP-hard in general,
* in an ''integral linear program,'' described in this section, variables are not constrained to be integers but rather one has proven somehow that the continuous problem always has an integral optimal value (assuming ''c'' is integral), and this optimal value may be found efficiently since all polynomial-size linear programs can be solved in polynomial time.

One common way of proving that a polyhedron is integral is to show that it is [[Totally unimodular matrix|totally unimodular]]. There are other general methods including the [[integer decomposition property]] and [[total dual integrality]]. Other specific well-known integral LPs include the matching polytope, lattice polyhedra, [[submodular]] flow polyhedra, and the intersection of two generalized polymatroids/''g''-polymatroids – e.g. see Schrijver 2003.

== Solvers and scripting (programming) languages ==

'''[[Permissive free software licence|Permissive]] licenses:'''
{| class=&quot;wikitable&quot;
|-
!Name
!License
!Brief info
|-
| [[Pyomo]]||[[BSD licenses|BSD]]||An open-source modeling language for large-scale linear, mixed integer and nonlinear optimization
|-
| [https://www.highs.dev/ HiGHS]||[[MIT license|MIT]]||Open source serial and parallel solver for large-scale sparse linear programming (LP) models
|}

'''[[Copyleft|Copyleft (reciprocal)]] licenses:'''
{| class=&quot;wikitable&quot;
|-
!Name
!License
!Brief info
|-
|[[Cassowary constraint solver]]||LGPL||an incremental constraint solving toolkit that efficiently solves systems of linear equalities and inequalities
|-
|[[COIN-OR CLP|CLP]]||CPL|| an LP solver from COIN-OR
|-
|[[GNU Linear Programming Kit|glpk]]||GPL|| GNU Linear Programming Kit, an LP/MILP solver with a native C [[API]] and numerous (15) third-party wrappers for other languages.  Specialist support for [[flow network]]s.  Bundles the [[AMPL]]-like [[GNU MathProg]] modelling language and translator.
|-
|[[Qoca]]||GPL||a library for incrementally solving systems of linear equations with various goal functions
|-
|[[R-Project]]||GPL||a programming language and software environment for statistical computing and graphics
|}

[[MINTO]] (Mixed Integer Optimizer, an [[integer programming]] solver which uses branch and bound algorithm) has publicly available source code&lt;ref&gt;{{cite web|url=http://coral.ie.lehigh.edu/~minto/download.html|title=COR@L – Computational Optimization Research At Lehigh|work=lehigh.edu}}&lt;/ref&gt; but is not open source.

'''[[Proprietary software|Proprietary]] licenses:'''
{| class=&quot;wikitable&quot;
|-
!Name
!Brief info
|-
|[[AIMMS]]|| A modeling language that allows to model linear, mixed integer, and nonlinear optimization models. It also offers a tool for constraint programming. Algorithm, in the forms of heuristics or exact methods, such as Branch-and-Cut or Column Generation, can also be implemented. The tool calls an appropriate solver such as CPLEX, Gurobi or similar, to solve the optimization problem at hand. Academic licenses are free of charge.
|-
|[[AMPL]]|| A popular modeling language for large-scale linear, mixed integer and nonlinear optimisation with a free student limited version available (500 variables and 500 constraints).
|-
|[[APMonitor]]|| API to MATLAB and Python. Solve example [http://apmonitor.com/me575/index.php/Main/LinearProgramming Linear Programming (LP) problems] through MATLAB, Python, or a web-interface.
|-
|[[CPLEX]]|| Popular solver with an API for several programming languages, and also has a modelling language and works with AIMMS, AMPL, [[General Algebraic Modeling System|GAMS]], MPL, OpenOpt, OPL Development Studio, and [[TOMLAB]]. Free for academic use.
|-
|[[Microsoft Excel|Excel]] Solver Function|| A nonlinear solver adjusted to spreadsheets in which function evaluations are based on the recalculating cells. Basic version available as a standard add-on for Excel.
|-
|[[FortMP]]||
|-
|[[General Algebraic Modeling System|GAMS]]||
|-
|[[Gurobi]]|| Solver with parallel algorithms for large-scale linear programs, quadratic programs and mixed-integer programs. Free for academic use.
|-
|[[IMSL Numerical Libraries]]|| Collections of math and statistical algorithms available in C/C++, Fortran, Java and C#/.NET. Optimization routines in the IMSL Libraries include unconstrained, linearly and nonlinearly constrained minimizations, and linear programming algorithms.
|-
|[[LINDO]]|| Solver with an API for large scale optimization of linear, integer, quadratic, conic and general nonlinear programs with stochastic programming extensions. It offers a global optimization procedure for finding guaranteed globally optimal solution to general nonlinear programs with continuous and discrete variables. It also has a statistical sampling API to integrate Monte-Carlo simulations into an optimization framework. It has an algebraic modeling language ([[Lingo (programming language)|LINGO]]) and allows modeling within a spreadsheet ([[What'sBest]]).
|-
|[[Maple (software)|Maple]]|| A general-purpose programming-language for symbolic and numerical computing.
|-
|[[MATLAB]]|| A general-purpose and matrix-oriented programming-language for numerical computing.  Linear programming in MATLAB requires the [[Optimization Toolbox]] in addition to the base MATLAB product; available routines include INTLINPROG and LINPROG
|-
|[[Mathcad]]|| A WYSIWYG math editor. It has functions for solving both linear and nonlinear optimization problems.
|-
|[[Mathematica]]|| A general-purpose programming-language for mathematics, including symbolic and numerical capabilities.
|-
|[[MOSEK]]|| A solver for large scale optimization with API for several languages (C++,java,.net, Matlab and python).
|-
|[[NAG Numerical Library]]|| A collection of mathematical and statistical routines developed by the [[Numerical Algorithms Group]] for multiple programming languages (C, C++, Fortran, Visual Basic, Java and C#) and packages (MATLAB, Excel, R, LabVIEW). The Optimization chapter of the NAG Library includes routines for linear programming problems with both sparse and non-sparse linear constraint matrices, together with routines for the optimization of quadratic, nonlinear, sums of squares of linear or nonlinear functions with nonlinear, bounded or no constraints.  The NAG Library has routines for both local and global optimization, and for continuous or integer problems.
|-
|[[NMath Stats]]|| A general-purpose [[.NET Framework|.NET]] statistical library containing a simplex solver.&lt;ref&gt;{{cite web|url=http://www.centerspace.net/landing.php?id=lp|title=C# Linear Programming|work=centerspace.net}}{{dead link|date=December 2017 |bot=InternetArchiveBot |fix-attempted=yes }}&lt;/ref&gt;
|-
|[[OptimJ]]|| A Java-based modeling language for optimization with a free version available.&lt;ref&gt;http://www.in-ter-trans.eu/resources/Zesch_Hellingrath_2010_Integrated+Production-Distribution+Planning.pdf OptimJ used in an optimization model for mixed-model assembly lines, University of Münster&lt;/ref&gt;&lt;ref&gt;http://www.aaai.org/ocs/index.php/AAAI/AAAI10/paper/viewFile/1769/2076 OptimJ used in an Approximate Subgame-Perfect Equilibrium Computation Technique for Repeated Games&lt;/ref&gt;
|-
|[[SAS System|SAS]]/OR|| A suite of solvers for Linear, Integer, Nonlinear, Derivative-Free, Network, Combinatorial and Constraint Optimization; the [[Algebraic modeling language]] [http://support.sas.com/documentation/cdl/en/ormpug/63975/HTML/default/ormpug_optmodel_sect005.htm OPTMODEL]; and a variety of vertical solutions aimed at specific problems/markets, all of which are fully integrated with the [[SAS System]].
|-
|[[SCIP (optimization software)|SCIP]]||A general-purpose constraint integer programming solver with an emphasis on MIP. Compatible with [http://zimpl.zib.de/ Zimpl] modelling language. Free for academic use and available in source code.
|-
|[[FICO Xpress|XPRESS]]||Solver for large-scale linear programs, quadratic programs, general nonlinear and mixed-integer programs. Has API for several programming languages, also has a modelling language Mosel and works with AMPL, [[General Algebraic Modeling System|GAMS]]. Free for academic use.
|-
|[[VisSim]]|| A visual [[block diagram]] language for simulation of [[dynamical system]]s.
|}

== See also ==
{{colbegin|colwidth=22em}}
* [[Convex programming]]
* [[Dynamic programming]]
* {{slink|Expected shortfall|Optimization of expected shortfall}}
* [[Input–output model]]
* [[Job shop scheduling]]
* [[Linear production game]]
* [[Linear-fractional programming (LFP)]]
* [[LP-type problem]]
* [[Mathematical programming]]
* [[Nonlinear programming]]
* [[Oriented matroid]]
* [[Quadratic programming]], a superset of linear programming
* [[Semidefinite programming]]
* [[Shadow price]]
* [[Simplex algorithm]], used to solve LP problems
{{colend}}

== Notes ==
{{Reflist|30em}}

== References ==
{{div col|colwidth=20em}}
* {{cite journal |first=L. V. |last=Kantorovich |title=Об одном эффективном методе решения некоторых классов экстремальных проблем |trans-title=A new method of solving some classes of extremal problems |journal=[[Proceedings of the USSR Academy of Sciences|Doklady Akad Sci SSSR]] |volume=28 |year=1940 |pages=211–214 }}
* F. L. Hitchcock: ''[https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1941201224 The distribution of a product from several sources to numerous localities]'', Journal of Mathematics and Physics, 20, 1941, 224–230.
* G.B Dantzig: ''[https://books.google.com/books?hl=en&amp;lr=&amp;id=ZpYca36h464C&amp;oi=fnd&amp;pg=PA24&amp;dq=%22Maximization+of+a+linear+function+of+variables+subject+to+linear+inequalities%22&amp;ots=0viWRKQVGk&amp;sig=25NCv3tDYjTLYxCxn9deMWBn8VE Maximization of a linear function of variables subject to linear inequalities]'', 1947. Published pp.&amp;nbsp;339–347 in T.C. Koopmans (ed.):''Activity Analysis of Production and Allocation'', New York-London 1951 (Wiley &amp; Chapman-Hall)
* J. E. Beasley, editor. ''Advances in Linear and Integer Programming''. Oxford Science, 1996. (Collection of surveys)
* {{cite journal|pages= 103–107|jstor=3689647|doi=10.1287/moor.2.2.103|title=New Finite Pivoting Rules for the Simplex Method|journal=Mathematics of Operations Research|volume=2|issue=2|year=1977|last1=Bland|first1=Robert G.}}
* Karl-Heinz Borgwardt, ''The Simplex Algorithm: A Probabilistic Analysis'', Algorithms and Combinatorics, Volume 1, Springer-Verlag, 1987. (Average behavior on random problems)
* Richard W. Cottle, ed. ''The Basic George B. Dantzig''. Stanford Business Books, Stanford University Press, Stanford, California, 2003. (Selected papers by [[George B. Dantzig]])
* George B. Dantzig and Mukund N. Thapa. 1997. ''Linear programming 1: Introduction''. Springer-Verlag.
* George B. Dantzig and Mukund N. Thapa. 2003. ''Linear Programming 2: Theory and Extensions''. Springer-Verlag. (Comprehensive, covering e.g. [[simplex algorithm|pivoting]] and interior-point algorithms, large-scale problems, [[Dantzig–Wolfe decomposition|decomposition following Dantzig–Wolfe]] and [[Benders' decomposition|Benders]], and introducing [[stochastic programming]].)
* {{cite book |doi=10.1016/S0167-5060(08)70734-9|pages=185–204|chapter=A Min-Max Relation for Submodular Functions on Graphs|title=Studies in Integer Programming|volume=1|series=Annals of Discrete Mathematics|year=1977|last1=Edmonds|first1=Jack|last2=Giles|first2=Rick|isbn=978-0-7204-0765-5}}
* {{cite journal|first1=Komei|last1=Fukuda|first2=Tamás|last2=Terlaky|title=Criss-cross methods: A fresh view on pivot algorithms |journal=Mathematical Programming, Series B|volume=79|number=1–3|pages=369–395 |editor=Thomas M. Liebling |editor2=Dominique de Werra|year=1997|doi=10.1007/BF02614325|mr=1464775|citeseerx=10.1.1.36.9373|s2cid=2794181}}
* {{cite book|last1=Gondzio|first1=Jacek|last2=Terlaky|first2=Tamás|chapter=3 A computational view of interior point methods|mr=1438311|title=Advances in linear and integer programming|pages=103–144|editor=J. E. Beasley|location=New York|publisher=Oxford University Press|year=1996|series=Oxford Lecture Series in Mathematics and its Applications|volume=4|chapter-url=http://www.maths.ed.ac.uk/~gondzio/CV/oxford.ps|id=[http://www.maths.ed.ac.uk/~gondzio/CV/oxford.ps Postscript file at website of Gondzio] and [http://www.cas.mcmaster.ca/~terlaky/files/dut-twi-94-73.ps.gz at McMaster University website of Terlaky]}}
* {{cite book|last=Murty|first=Katta G.|author-link=Katta G. Murty|title=Linear programming|publisher=John Wiley &amp; Sons, Inc.|location=New York|year=1983|pages=xix+482|isbn=978-0-471-09725-9|mr=720547|id=(comprehensive reference to classical approaches)}}
* Evar D. Nering and [[Albert W. Tucker]], 1993, ''Linear Programs and Related Problems'', Academic Press. (elementary&lt;!-- but profound --&gt;)
* M. Padberg, ''Linear Optimization and Extensions'', Second Edition, Springer-Verlag, 1999. (carefully written account of primal and dual simplex algorithms and projective algorithms, with an introduction to integer linear programming – featuring the [[traveling salesman problem]] for [[Odysseus]].)
* [[Christos H. Papadimitriou]] and Kenneth Steiglitz, ''Combinatorial Optimization: Algorithms and Complexity'', Corrected republication with a new preface, Dover. (computer science)
* {{cite journal|author=Michael J. Todd |date=February 2002 | title = The many facets of linear programming | journal = Mathematical Programming | volume = 91 | issue = 3 | doi = 10.1007/s101070100261 | pages=417–436|s2cid=6464735 }} (Invited survey, from the International Symposium on Mathematical Programming.)
* {{cite book |first=Robert J. |last=Vanderbei |title=Linear Programming: Foundations and Extensions |year=2001 |publisher=Springer Verlag }}
* {{cite book | last=Vazirani | first=Vijay V. | author-link=Vijay Vazirani | title=Approximation Algorithms | year=2001 | publisher=Springer-Verlag | isbn=978-3-540-65367-7 }} (Computer science)
{{div col end}}

== Further reading ==
{{Library resources box |others=no}}
{{div col|colwidth=20em}}
* Dmitris Alevras and Manfred W. Padberg, ''[https://books.google.com/books?id=RAUyB8NDHJwC&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false Linear Optimization and Extensions: Problems and Solutions]'', Universitext, Springer-Verlag, 2001. (Problems from Padberg with solutions.)
&lt;!-- * A. Bachem and W. Kern. ''Linear Programming Duality: An Introduction to Oriented Matroids''. Universitext. Springer-Verlag, 1992. ([[Oriented matroid|Combinatorial]]) --&gt;
* {{cite book | author = Mark de Berg, Marc van Kreveld, [[Mark Overmars]], and Otfried Schwarzkopf | year = 2000 | title = Computational Geometry | publisher = [[Springer-Verlag]] | edition = 2nd revised | isbn = 978-3-540-65620-3 | url-access = registration | url = https://archive.org/details/computationalgeo00berg }} Chapter 4: Linear Programming: pp.&amp;nbsp;63–94. Describes a randomized half-plane intersection algorithm for linear programming.
* {{cite book|author = [[Michael R. Garey]] and [[David S. Johnson]] | year = 1979 | title = Computers and Intractability: A Guide to the Theory of NP-Completeness | publisher = W.H. Freeman | isbn = 978-0-7167-1045-5| title-link = Computers and Intractability: A Guide to the Theory of NP-Completeness }} A6: MP1: INTEGER PROGRAMMING, pg.245. (computer science, complexity theory)
* {{Cite Gartner Matousek 2006}} (elementary introduction for mathematicians and computer scientists)
* Cornelis Roos, Tamás Terlaky, Jean-Philippe Vial, ''Interior Point Methods for Linear Optimization'', Second Edition, Springer-Verlag, 2006. (Graduate level)
* {{cite book|author = Alexander Schrijver | year = 2003 | title = Combinatorial optimization: polyhedra and efficiency | publisher = Springer}}
* Alexander Schrijver, ''Theory of Linear and Integer Programming''. John Wiley &amp; sons, 1998, {{isbn|0-471-98232-6}} (mathematical)
* {{cite book|author1=Gerard Sierksma|author2=Yori Zwols|title=Linear and Integer Optimization: Theory and Practice|year=2015|publisher=CRC Press|isbn=978-1-498-71016-9}}
* {{cite book|author1=Gerard Sierksma|author2=Diptesh Ghosh|title=Networks in Action; Text and Computer Exercises in Network Optimization|year=2010|publisher=Springer|isbn=978-1-4419-5512-8}} (linear optimization modeling)
* H. P. Williams, ''[https://books.google.com/books?id=YJRh0tOes7UC&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false Model Building in Mathematical Programming]'', Fifth Edition, 2013. (Modeling)
* Stephen J. Wright, 1997, ''[https://books.google.com/books?id=oQdBzXhZeUkC&amp;printsec=frontcover#v=onepage&amp;q&amp;f=false Primal-Dual Interior-Point Methods]'', SIAM. (Graduate level)
* [[Yinyu Ye]], 1997, ''Interior Point Algorithms: Theory and Analysis'', Wiley. (Advanced graduate-level)
* [[Günter M. Ziegler|Ziegler, Günter M.]], Chapters 1–3 and 6–7 in ''Lectures on Polytopes'', Springer-Verlag, New York, 1994. (Geometry)
{{div col end}}

==External links==
{{Commonscat}}
*[http://people.brunel.ac.uk/~mastjjb/jeb/or/lp.html Guidance On Formulating LP Problems]
*[http://glossary.computing.society.informs.org/ Mathematical Programming Glossary]
*[http://lpsolve.sourceforge.net/4.0/LinearProgrammingFAQ.htm The Linear Programming FAQ]
*[http://plato.asu.edu/bench.html Benchmarks For Optimisation Software]

{{optimization algorithms}}
{{Mathematical programming}}
{{Authority control}}

[[Category:Linear programming| ]]
[[Category:Convex optimization]]
[[Category:Geometric algorithms]]
[[Category:P-complete problems]]</text>
      <sha1>3wcyp3q62uegjvd2b985gx51yt6chp9</sha1>
    </revision>
  </page>
  <page>
    <title>295</title>
    <ns>0</ns>
    <id>43731</id>
    <revision>
      <id>944505278</id>
      <parentid>900216299</parentid>
      <timestamp>2020-03-08T07:17:50Z</timestamp>
      <contributor>
        <username>Are U Super Cereal</username>
        <id>38718667</id>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2119" xml:space="preserve">{{Use mdy dates|date=February 2011}}
{{Year dab|295}}
{{unreferenced|date=November 2017}}
{{Year nav|295}}
{{M1 year in topic}}
[[File:Narseh.gif|thumb|King [[Narseh|Narseh of Persia]]]]
__NOTOC__
Year '''295''' ('''[[Roman numerals|CCXCV]]''') was a [[common year starting on Tuesday]] (link will display the full calendar) of the [[Julian calendar]], the '''295th Year''' of the Common Era ([[Common Era|CE]]) and Anno Domini ([[Anno Domini|AD]]) designations, the 295th year of the [[1st millennium]], the 95th year and last 6 years of the [[3rd century]], and the 6th year of the [[290s|290s decade]]. At the time, it was known as the '''Year of the Consulship of [[Nummius Tuscus|Tuscus]] and [[Gaius Annius Anullinus|Anullinus]]''' (or, less frequently, '''year 1048 ''[[Ab urbe condita]]'''''). The denomination 295 for this year has been used since the early medieval period, when the [[Anno Domini]] [[calendar era]] became the prevalent method in Europe for naming years.

== Events ==
&lt;onlyinclude&gt;
=== By place ===
==== Roman Empire ====
* [[Galerius]], Roman [[Caesar (title)|Caesar]] in the [[Balkans]], is dispatched to [[Egypt (Roman province)|Egypt]] to fight against the rebellious cities [[Busiris (Lower Egypt)|Busiris]] and [[Qift|Coptos]].

==== Persia ====
* King [[Narseh]], [[Shah]] of the [[Sassanid Empire]], declares war on [[Ancient Rome|Rome]] and invades [[Armenia]] with his army.
==== China ====
* [[Tuoba Luguan]] divides the territory of the [[Tuoba|Tuoba clan]] into three areas. His nephews [[Tuoba Yilu]] and [[Tuoba Yituo]] become [[chieftain]]s of the western and central areas of ([[Shanxi]] province). Tuoba Luguan dominates the eastern area (near [[Hohhot]]).

=== By topic ===
==== Religion ====
* [[Petra]] rejoins the province of [[Palestine (region)|Palestine]], and is converted to [[Christianity]] by the Syrian monk [[Barsauma]].
&lt;/onlyinclude&gt;
== Births ==
* [[Shi Hu]], Chinese emperor of [[Later Zhao]] (d. [[349]])

== Deaths ==
* [[Maximilian of Tebessa]], Berber Christian saint and [[martyr]]

== References ==
{{Reflist}}

{{DEFAULTSORT:295}}
[[Category:295| ]]</text>
      <sha1>7mevfw46pd3eb5crdgxnhb816alw7ct</sha1>
    </revision>
  </page>
  <page>
    <title>294</title>
    <ns>0</ns>
    <id>43732</id>
    <revision>
      <id>916481483</id>
      <parentid>900216238</parentid>
      <timestamp>2019-09-19T03:47:37Z</timestamp>
      <contributor>
        <ip>175.33.98.125</ip>
      </contributor>
      <comment>/* Roman Empire */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1695" xml:space="preserve">{{Use mdy dates|date=February 2011}}
{{Year dab|294}}
{{unreferenced|date=November 2017}}
{{Year nav|294}}
{{M1 year in topic}}
Year '''294''' ('''[[Roman numerals|CCXCIV]]''') was a [[common year starting on Monday]] (link will display the full calendar) of the [[Julian calendar]]. At the time, it was known as the '''Year of the Consulship of Constantius and Valerius''' (or, less frequently, '''year 1047 ''[[Ab urbe condita]]'''''). The denomination 294 for this year has been used since the early medieval period, when the [[Anno Domini]] [[calendar era]] became the prevalent method in Europe for naming years.

== Events ==
&lt;onlyinclude&gt;
=== By place ===
==== Roman Empire ====
* [[Galerius]], Roman [[Caesar (title)|Caesar]] in the [[Balkans]], proves his worth in campaigning on the [[Danube]] frontier, fighting the [[Goths]], [[Marcomanni]], [[Sarmatians]], and [[Carpi (people)|Carpi]].
* Galerius is given the job of land reclamation and repopulation, moving the entire tribe of the Carpi to settlements within the [[Roman Empire]]. 
* Emperor [[Diocletian]] goes, with the young [[Constantine the Great|Constantine I the Great]] (later the first Christian [[Roman Emperor]]) on his staff, to [[Egypt (Roman province)|Egypt]]. He besieges  [[Alexandria]], and deposes &quot;emperor&quot; [[Achilleus (emperor)|Achilleus]].

==== China ====
* [[Tuoba Luguan]] succeeds his nephew [[Tuoba Fu]] as chieftain of the [[Tuoba|Tuoba clan]].
&lt;/onlyinclude&gt;

== Births ==
* [[Sima Bao]], prince of the [[Jin Dynasty (265–420)|Jin Dynasty]] (d. [[320]])

== Deaths ==
* [[Tuoba Fu]], chieftain of the Chinese [[Tuoba|Tuoba clan]]

== References ==
{{Reflist}}

{{DEFAULTSORT:294}}
[[Category:294| ]]</text>
      <sha1>epr84nt0abe8dvka7356ww4fpa1dm9m</sha1>
    </revision>
  </page>
  <page>
    <title>296</title>
    <ns>0</ns>
    <id>43733</id>
    <revision>
      <id>916125162</id>
      <parentid>809705269</parentid>
      <timestamp>2019-09-17T04:54:01Z</timestamp>
      <contributor>
        <ip>175.33.98.125</ip>
      </contributor>
      <comment>/* Roman Empire */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2764" xml:space="preserve">{{Use mdy dates|date=February 2011}}
{{Year dab|296}}
{{unreferenced|date=November 2017}}
{{Year nav|296}}
{{M1 year in topic}}
[[File:Constantius I capturing London after defeating Allectus Beaurains hoard.jpg|thumb|Medal of [[Constantius Chlorus]] capturing [[Roman London|Londinium (296)]]]] 
__NOTOC__
Year '''296''' ('''[[Roman numerals|CCXCVI]]''') was a [[leap year starting on Wednesday]] (link will display the full calendar) of the [[Julian calendar]]. At the time, it was known as the '''Year of the Consulship of Valerius and Constantius''' (or, less frequently, '''year 1049 ''[[Ab urbe condita]]'''''). The denomination 296 for this year has been used since the early medieval period, when the [[Anno Domini]] [[calendar era]] became the prevalent method in Europe for naming years.

== Events ==
&lt;onlyinclude&gt;
=== By place ===
==== Roman Empire ====
* [[Constantius Chlorus]] assembles two invasion fleets with the intent of crossing the [[English Channel]]. The first is under the command of [[Julius Asclepiodotus|Asclepiodotus]], Constantius' long serving [[Praetorian Prefect]]. He sails from the mouth of the [[Seine]], and lands near the [[Isle of Wight]], where his forces defeat the usurper [[Allectus]] in [[Hampshire]]. Constantius leaves [[Boulogne-sur-Mer|Boulogne]] with his fleet, and occupies [[London]], saving the city from an attack by [[Franks|Frankish]] mercenaries who are roaming the province. 
* [[Maximian]], emperor (''[[Augustus (title)|Augustus]]'') of the [[Roman Empire]], mobilises an army, consisting of [[Praetorian Guard|Praetorian cohorts]], [[Aquileia]]n, Egyptian, and Danubian legionaries, marching through [[Hispania|Spain]]. He crosses the [[Strait of Gibraltar]] into [[Mauretania Tingitana|Mauretania]] (modern [[Morocco]]) to protect the area against Frankish pirates.   
* Constantius Chlorus reconquers [[Roman Britain|Britain]]; he rebuilds the cities [[Eboracum]] ([[York]]), [[Roman London|Londinium]] (London), and [[Verulamium]] ([[St Albans]]).

==== Persia ====
* Emperor [[Diocletian]] dispatches his son-in-law [[Galerius]] with a large army to [[Armenia]]. He invades [[Mesopotamia]], but suffers a complete defeat outside [[Ctesiphon]] against the Persian king [[Narseh]], and is forced to retreat. Galerius crosses the [[Euphrates]] into [[Syria]] to join Diocletian at [[Antioch]].

=== By topic ===
==== Religion ====
* [[April 22]] &amp;ndash; [[Pope Caius]] dies at [[Ancient Rome|Rome]] after a 13-year reign and is succeeded by [[Pope Marcellinus]] as the 29th [[pope]].
&lt;/onlyinclude&gt;
== Births ==
{{empty section|date=November 2017}}

== Deaths ==
* [[April 22]] &amp;ndash; [[Pope Caius]]
* [[Allectus]], Roman [[usurper]]

== References ==
{{Reflist}}

{{DEFAULTSORT:296}}
[[Category:296| ]]</text>
      <sha1>li1xlv9jnoych1qkmcsefphxwbbef5d</sha1>
    </revision>
  </page>
  <page>
    <title>Network packet</title>
    <ns>0</ns>
    <id>43734</id>
    <revision>
      <id>989915645</id>
      <parentid>989915591</parentid>
      <timestamp>2020-11-21T19:21:48Z</timestamp>
      <contributor>
        <username>Pulisi</username>
        <id>39636747</id>
      </contributor>
      <comment>Reverting edit(s) by [[Special:Contributions/201.175.156.138|201.175.156.138]] ([[User_talk:201.175.156.138|talk]]) to rev. 989662757 by Kajjul: [[WP:CRV|Unexplained content removal]] [[w:en:WP:RW|(RW 16)]]</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8605" xml:space="preserve">{{short description|Formatted unit of data carried by a packet-switched network}}
{{Refimprove|date=August 2014}}

In [[telecommunication]]s and [[computer network]]ing, a '''network packet''' is a formatted unit of [[Data (computing)|data]] carried by a [[packet-switched network]]. A packet consists of control information and user data;&lt;ref&gt;{{cite book|last=Stallings|first=William|title=Business Data Communication|date=2001|publisher=Prentice-Hall, Inc.|location=Upper Saddle River, New Jersey, USA|isbn=0-13-088263-1|page=[https://archive.org/details/businessdatacomm00stal/page/632 632]|edition=4|chapter=Glossary|quote=&quot;Packet: A group of bits that includes data plus control information. Generally refers to a network layer (OSI layer 3) protocol data unit.&quot;|url-access=registration|url=https://archive.org/details/businessdatacomm00stal/page/632}}&lt;/ref&gt; the latter is also known as the ''[[Payload (computing)|payload]]''. Control information provides data for delivering the payload (e.g., source and destination [[network address]]es, [[error detection]] codes, or sequencing information). Typically, control information is found in packet [[Header (computing)|headers]] and [[Trailer (computing)|trailers]].

In [[packet switching]], the [[Bandwidth (computing)|bandwidth]] of the [[transmission medium]] is shared between multiple communication sessions, in contrast to [[circuit switching]], in which circuits are preallocated for the duration of one session and data is typically transmitted as a continuous [[bit stream]].
