== Specification ==
The EJB specification was originally developed  in 1997 by [[International Business Machines|IBM]] and later adopted by [[Sun Microsystems]] (EJB 1.0 and 1.1) in 1999&lt;ref&gt;''J2EE Design and Development'', Â© 2002 Wrox Press Ltd., p. 5.&lt;/ref&gt; and enhanced under the [[Java Community Process]] as [http://www.jcp.org/en/jsr/detail?id=19 JSR 19] (EJB 2.0), [http://www.jcp.org/en/jsr/detail?id=153 JSR 153] (EJB 2.1), [http://www.jcp.org/en/jsr/detail?id=220 JSR 220] (EJB 3.0), [http://jcp.org/en/jsr/detail?id=318 JSR 318] (EJB 3.1) and [http://jcp.org/en/jsr/detail?id=345 JSR 345] (EJB 3.2).

The EJB specification provides a standard way to implement the server-side (also called &quot;[[Front and back ends|back-end]]&quot;) 'business' software typically found in enterprise applications (as opposed to 'front-end' [[user interface]] software). Such software addresses the same types of problem, and solutions to these problems are often repeatedly re-implemented by programmers. Jakarta Enterprise Beans is intended to handle such common concerns as [[Persistence (computer science)|persistence]], [[Data integrity|transactional integrity]] and [[Computer security|security]] in a standard way, leaving programmers free to concentrate on the particular parts of the enterprise software at hand.

== General responsibilities ==
The EJB specification details how an [[application server]] provides the following responsibilities:
* [[Transaction processing]]
* Integration with the [[Persistence (computer science)|persistence]] services offered by the [[Java Persistence API| Java Persistence API (JPA)]]
* [[Concurrency control]]
* [[Event-driven programming]] using [[Java Message Service]] and [[Java EE Connector Architecture]]
* [[Asynchronous method invocation]]
* [[Job scheduler|Job scheduling]]
* Naming and [[directory service]]s ([[Java Naming and Directory Interface|JNDI]])
* [[Remote procedure call|Interprocess Communication]] using [[RMI-IIOP]] and [[Web service]]s
* [[computer security|Security]] ([[Java Cryptography Extension|JCE]] and [[Java Authentication and Authorization Service|JAAS]])
* [[Software deployment|Deployment]] of [[software component]]s in an application server

Additionally, the Enterprise JavaBean specification defines the roles played by the EJB container and the EJBs as well as how to deploy the EJBs in a container. Note that the current EJB 3.2 specification does not detail how an application server provides persistence (a task delegated to the JPA specification), but instead details how business logic can easily integrate with the persistence services offered by the application server.

== History ==
Businesses found that using EJBs to encapsulate business logic brought a performance penalty. This is because the original specification allowed only for remote method invocation through [[CORBA]] (and optionally other protocols), even though the large majority of business applications actually do not require this [[distributed computing]] functionality. The EJB 2.0 specification addressed this concern by adding the concept of local interfaces which could be called directly without performance penalties by applications that were not distributed over multiple servers.&lt;ref&gt;''J2EE Design and Development'', 2002, Wrox Press Ltd., p. 19.&lt;/ref&gt;

The EJB 3.0 specification ([[Java Community Process|JSR]] 220) was a departure from its predecessors, following a new light-weight paradigm. EJB 3.0 shows an influence from [[Spring Framework|Spring]] in its use of plain Java objects, and its support for [[dependency injection]] to simplify configuration and integration of heterogeneous systems. Gavin King, the creator of Hibernate, participated in the EJB 3.0 process and is an outspoken advocate of the technology. Many features originally in Hibernate were incorporated in the [[Java Persistence API]], the replacement for [[Entity Bean|entity beans]] in EJB 3.0. The EJB 3.0 specification relies heavily on the use of [[Java annotation|annotations]] (a feature added to the Java language with its 5.0 release) and [[convention over configuration]] to enable a much less verbose coding style. Accordingly, in practical terms EJB 3.0 is much more lightweight and nearly a completely new API, bearing little resemblance to the previous EJB specifications.{{citation needed|date=December 2016}}

== Example ==
The following shows a basic example of what an EJB looks like in code:

&lt;syntaxhighlight lang=java&gt;
@Stateless 
public class CustomerService { 
  

  private EntityManager entityManager; 
   
  public void addCustomer(Customer customer) { 
    entityManager.persist(customer); 
  } 
}
&lt;/syntaxhighlight&gt;

The above defines a service class for persisting a Customer object (via [[Object-relational mapping|O/R mapping]]). The EJB takes care of managing the persistence context and the addCustomer() method is transactional and thread-safe by default. As demonstrated, the EJB focuses only on business logic and persistence and knows nothing about any particular presentation.

Such an EJB can be used by a class in e.g. the web layer as follows:

&lt;syntaxhighlight lang=&quot;java&quot;&gt;
@Named	
@RequestScoped
public class CustomerBacking {
   @EJB 
   private CustomerService customerService;

   public String addCustomer(Customer customer) {
      customerService.addCustomer(customer);
      context.addMessage(...); // abbreviated for brevity
      return &quot;customer_overview&quot;;
   }
}
&lt;/syntaxhighlight&gt;

The above defines a [[JavaServer Faces]] (JSF) backing bean in which the EJB is injected by means of the @EJB annotation. Its addCustomer method is typically bound to some UI component, such as a button. Contrary to the EJB, the backing bean does not contain any business logic or persistence code, but delegates such concerns to the EJB. The backing bean does know about a particular presentation, of which the EJB had no knowledge.

== Types of Enterprise Beans ==
An EJB container holds two major types of beans:
* Session Beans&lt;ref&gt;JSR 318, 4.1, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; that can be either &quot;Stateful&quot;, &quot;Stateless&quot; or &quot;Singleton&quot; and can be accessed via either a '''Local''' (same JVM) or '''Remote''' (different JVM) interface or directly without an interface,&lt;ref&gt;{{cite web|url=https://blogs.oracle.com/kensaks/entry/optional_local_business_interfaces|title=Optional Local Business Interfaces (Ken Saks's Blog)|accessdate=1 June 2016|archive-url=https://web.archive.org/web/20151119053849/https://blogs.oracle.com/kensaks/entry/optional_local_business_interfaces|archive-date=19 November 2015|url-status=dead}}&lt;/ref&gt; in which case local semantics apply. All session beans support asynchronous execution&lt;ref&gt;JSR 318, 4.5, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; for all views (local/remote/no-interface).
* Message Driven Beans (MDBs, also known as Message Beans). MDBs also support asynchronous execution, but via a messaging paradigm.

=== Session beans ===

==== Stateful Session Beans ====
{{see also|Conversational state (Java EE)}}
Stateful Session Beans&lt;ref&gt;JSR 318, 4.6, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; are business objects having [[State (computer science)|state]]: that is, they keep track of which calling client they are dealing with throughout a session and thus access to the bean instance is strictly limited to only one client at a time.&lt;ref name=&quot;autogenerated1&quot;&gt;JSR 318, 4.10.3, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; If concurrent access to a single bean is attempted anyway the container serializes those requests, but via the @AccessTimeout annotation the container can instead throw an exception.&lt;ref&gt;JSR 318, 4.3.14, 21.4.2, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; Stateful session beans' state may be persisted (passivated) automatically by the container to free up memory after the client hasn't accessed the bean for some time. The JPA extended persistence context is explicitly supported by Stateful Session Beans.&lt;ref&gt;{{cite web|url=http://blogs.sun.com/enterprisetechtips/entry/extended_persistence_context_in_stateful|archive-url=https://web.archive.org/web/20080316130556/http://blogs.sun.com/enterprisetechtips/entry/extended_persistence_context_in_stateful|url-status=dead|archive-date=16 March 2008|title=Persistence Context in Stateful|publisher=|accessdate=1 June 2016}}&lt;/ref&gt;
; ''Examples'':
* Checking out in a web store might be handled by a stateful session bean that would use its state to keep track of where the customer is in the checkout process, possibly holding locks on the items the customer is purchasing (from a system architecture's point of view, it would be less ideal to have the client manage those locks).

==== Stateless Session Beans ====
Stateless Session Beans&lt;ref&gt;JSR 318, 4.7, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; are business objects that do not have state associated with them. However, access to a single bean instance is still limited to only one client at a time, [[Concurrent computing|concurrent]] access to the bean is prohibited.&lt;ref name=&quot;autogenerated1&quot;/&gt; If concurrent access to a single bean is attempted, the container simply routes each request to a different instance.&lt;ref&gt;JSR 318, 4.3.14, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; This makes a stateless session bean automatically thread-safe. Instance variables can be used during a single method call from a client to the bean, but the contents of those instance variables are not guaranteed to be preserved across different client [[Method (computer science)|method]] calls. Instances of Stateless Session beans are typically pooled. If a second client accesses a specific bean right after a method call on it made by a first client has finished, it might get the same instance. The lack of overhead to maintain a conversation with the calling client makes them less resource-intensive than stateful beans. 
; ''Examples'':
* Sending an e-mail to customer support might be handled by a stateless bean, since this is a one-off operation and not part of a multi-step process.
* A user of a website clicking on a &quot;keep me informed of future updates&quot; box may trigger a call to an asynchronous method of the session bean to add the user to a list in the company's database (this call is asynchronous because the user does not need to wait to be informed of its success or failure).
* Fetching multiple independent pieces of data for a website, like a list of products and the history of the current user might be handled by asynchronous methods of a session bean as well  (these calls are asynchronous because they can execute in [[Parallel computing|parallel]] that way, which potentially increases performance). In this case, the asynchronous method will return a [http://java.sun.com/javase/6/docs/api/java/util/concurrent/Future.html Future] instance.

==== Singleton Session Beans ====
Singleton Session Beans&lt;ref&gt;JSR 318, 4.8, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://openejb.apache.org/singleton-ejb.html |title=Singleton EJB |publisher=Openejb.apache.org |date= |accessdate=2012-06-17}}&lt;/ref&gt; are business objects having a global shared state within a JVM. Concurrent access to the one and only bean instance can be controlled by the container (Container-managed concurrency, CMC) or by the bean itself (Bean-managed concurrency, BMC). CMC can be tuned using the @Lock annotation, that designates whether a read lock or a write lock will be used for a method call. Additionally, Singleton Session Beans can explicitly request to be instantiated when the EJB container starts up, using the @Startup annotation. 
; ''Examples'':
* Loading a global daily price list that will be the same for every user might be done with a singleton session bean, since this will prevent the application having to do the same query to a database over and over again...

=== Message driven beans ===
'''Message Driven Beans'''&lt;ref&gt;JSR 318, 5.1, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; are business objects whose execution is triggered by messages instead of by method calls. The Message Driven Bean is used among others to provide a high level ease-of-use abstraction for the lower level JMS ([[Java Message Service]]) specification. It may subscribe to JMS message queues or message topics, which typically happens via the activationConfig attribute of the @MessageDriven annotation. They were added in EJB  to allow event-driven processing. Unlike session beans, an MDB does not have a client view (Local/Remote/No-interface), i.&amp;nbsp;e. clients cannot look-up an MDB instance. An MDB just listens for any incoming message on, for example, a JMS queue or topic and processes them automatically. Only JMS support is required by the Java EE spec,&lt;ref&gt;JSR 318, 5.7.2, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; but Message Driven Beans can support other messaging protocols.&lt;ref&gt;JSR 318, 5.4.2, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;JSR 318, 5.6.2, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; Such protocols may be asynchronous but can also be synchronous. Since session beans can also be synchronous or asynchronous, the prime difference between session- and message driven beans is not the synchronicity, but the difference between (object oriented) [[Method (computer science)|method]] [[Calling convention|calling]] and [[Message passing|messaging]]. 
; ''Examples'':
* Sending a configuration update to multiple nodes might be done by sending a JMS message to a 'message topic' and could be handled by a Message Driven Bean listening to this topic (the message paradigm is used here since the sender does not need to know the number of consumers, their location, or even their exact type).
* Submitting a job to a work cluster might be done by sending a JMS message to a 'message queue' and could also be handled by a Message Driven Bean, but this time listening to a queue (the message paradigm and the queue is used, since the sender doesn't have to care which worker executes the job, but it does need assurance that a job is only executed once).
* Processing timing events from the [http://www.quartz-scheduler.org/ Quartz scheduler] can be handled by a Message Driven Bean; when a Quartz ''trigger'' fires, the MDB is automatically invoked. Since Java EE doesn't know about Quartz by default, a [[Java EE Connector Architecture|JCA]] resource adapter would be needed and the MDB would be annotated with a reference to this.&lt;ref&gt;{{cite web|author=Developing Quartz MDB |url=http://www.mastertheboss.com/jboss-application-server/192-developing-quartz-mdb.html |title=Developing Quartz MDB |publisher=Mastertheboss.com |date= |accessdate=2012-06-17}}&lt;/ref&gt;

== Execution ==
EJBs are deployed in an EJB container, typically within an [[application server]]. The specification describes how an EJB interacts with its container and how client code interacts with the container/EJB combination. The EJB classes used by applications are included in the {{Javadoc:EE|package=javax.ejb|javax/ejb}} package. (The {{Javadoc:EE|package=javax.ejb.spi|javax/ejb/spi}} package is a [[service provider interface]] used only by EJB container implementations.)

Clients of EJBs do not instantiate those beans directly via Java's new operator, but instead have to obtain a reference via the EJB container. This reference is usually not a reference to the implementation bean itself, but to a [[Proxy pattern|proxy]], which either dynamically implements the local or remote business interface that the client requested or dynamically implements a sub-type of the actual bean. The proxy can then be directly cast to the interface or bean. A client is said to have a 'view' on the EJB, and the local interface, remote interface and bean type itself respectively correspond with the local view, remote view and no-interface view.

This proxy is needed in order to give the EJB container the opportunity to transparently provide cross-cutting ([[Aspect-oriented programming|AOP]]-like) services to a bean like transactions, security, interceptions, injections, and remoting. As an example, a client invokes a method on a proxy, which will first start a transaction with the help of the EJB container and then call the actual bean method. When the bean method returns, the proxy ends the transaction (i.e. by committing it or doing a rollback) and transfers control back to the client.

The EJB Container is responsible for ensuring the client code has sufficient access rights to an EJB.&lt;ref&gt;JSR 318, Chapter 17, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; Security aspects can be declaratively applied to an EJB via annotations.&lt;ref&gt;{{cite web|url=http://openejb.apache.org/3.0/security-annotations.html|title=Security Annotations|date=|publisher=Openejb.apache.org|accessdate=2012-06-17}}&lt;/ref&gt;

=== Transactions ===
EJB containers must support both container managed [[ACID]] transactions and bean managed transactions.&lt;ref&gt;JSR 318, Chapter 13, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;

Container-managed transactions (CMT) are by default active for calls to session beans. That is, no explicit configuration is needed. This behavior may be declaratively tuned by the bean via annotations and if needed such configuration can later be overridden in the deployment descriptor. Tuning includes switching off transactions for the whole bean or specific methods, or requesting alternative strategies for transaction propagation and starting or joining a transaction. Such strategies mainly deal with what should happen if a transaction is or isn't already in progress at the time the bean is called. The following variations are supported:&lt;ref&gt;JSR 318, 13.6.2, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://openejb.apache.org/3.0/transaction-annotations.html |title=Transaction Annotations |publisher=Openejb.apache.org |date= |accessdate=2012-06-17}}&lt;/ref&gt;

{| class=&quot;wikitable&quot;
|+ Declarative Transactions Management Types
|-
! Type
! Explanation
|-
| MANDATORY
| If the client has not started a transaction, an exception is thrown. Otherwise the client's transaction is used.
|-
| REQUIRED
| If the client has started a transaction, it is used. Otherwise a new transaction is started. (this is the default when no explicit type has been specified)
|-
| REQUIRES_NEW
| If the client has started a transaction, it is suspended. A new transaction is always started.
|-
| SUPPORTS
| If the client has started a transaction, it is used. Otherwise, no transaction is used.
|-
| NOT_SUPPORTED
| If the client has started a transaction, it is suspended. No new transaction is started.
|-
| NEVER
| If the client has started a transaction, an exception is thrown. No new transaction is started.
|}

Alternatively, the bean can also declare via an annotation that it wants to handle transactions programmatically via the [[Java Transaction API|JTA]] API. This mode of operation is called Bean Managed Transactions (BMT), since the bean itself handles the transaction instead of the container.&lt;ref&gt;JSR 318, 13.3.6, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;

=== Events ===
JMS ([[Java Message Service]]) is used to send messages from beans to clients, to let clients receive asynchronous messages from these beans. 
MDBs can be used to receive messages from clients asynchronously using either a '''JMS''' 
Queue or a Topic.

=== Naming and directory services ===
As an alternative to injection, clients of an EJB can obtain a reference to the session bean's proxy object (the EJB stub) using [[JNDI|Java Naming and Directory Interface (JNDI)]]. This alternative can be used in cases where injection is not available, such as in non-managed code or standalone remote Java SE clients, or when it's necessary to programmatically determine which bean to obtain.

JNDI names for EJB session beans are assigned by the EJB container via the following scheme:&lt;ref&gt;JSR 318, 4.4, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;{{cite web |url=https://blogs.oracle.com/MaheshKannan/entry/portable_global_jndi_names |title=Portable Global JNDI names (MaheshKannan) |publisher=Blogs.oracle.com |accessdate=2012-06-17 |archive-url=https://web.archive.org/web/20110620074630/http://blogs.oracle.com/MaheshKannan/entry/portable_global_jndi_names |archive-date=2011-06-20 |url-status=dead }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=https://blogs.oracle.com/kensaks/entry/portable_global_jndi_names |title=Portable Global JNDI Names (Ken Saks's Blog) |publisher=Blogs.oracle.com |accessdate=2012-06-17 |archive-url=https://web.archive.org/web/20111229061909/http://blogs.oracle.com/kensaks/entry/portable_global_jndi_names |archive-date=2011-12-29 |url-status=dead }}&lt;/ref&gt;

{| class=&quot;wikitable&quot;
|+ JNDI names
|-
! Scope
! Name pattern
|-
| Global
| java:global[/&lt;app-name&gt;]/&lt;module-name&gt;/&lt;bean-name&gt;[!&lt;fully-qualified-interface-name&gt;]
|-
| Application
| java:app/&lt;module-name&gt;/&lt;bean-name&gt;[!&lt;fully-qualified-interface-name&gt;]
|-
| Module
| java:module/&lt;bean-name&gt;[!&lt;fully-qualified-interface-name&gt;]
|}
''(entries in square brackets denote optional parts)''

A single bean can be obtained by any name matching the above patterns, depending on the 'location' of the client. Clients in the same module as the required bean can use the module scope and larger scopes, clients in the same application as the required bean can use the app scope and higher, etc.

E.g. code running in the same module as the CustomerService bean ''(as given by the example shown earlier in this article)'' could use the following code to obtain a (local) reference to it:

&lt;syntaxhighlight lang=java&gt;
CustomerServiceLocal customerService =
    (CustomerServiceLocal) new InitialContext().lookup(&quot;java:module/CustomerService&quot;);
&lt;/syntaxhighlight&gt;

=== Remoting/distributed execution ===
For communication with a client that's written in the Java programming language a session bean can expose a remote-view via an @Remote annotated interface.&lt;ref&gt;JSR 318, Chapter 15, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; This allows those beans to be called from clients in other [[JVM]]s which themselves may be located on other (remote) systems. From the point of view of the EJB container, any code in another JVM is remote.

Stateless- and Singleton session beans may also expose a &quot;web service client view&quot; for remote communication via [[WSDL]] and [[SOAP]] or plain XML.&lt;ref&gt;JSR 318, 2.6, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;JSR 318, 3.2.4, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;&lt;ref&gt;JSR 318, 4.3.6, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; This follows the [[JAX-RPC]] and [[JAX-WS]] specifications. JAX-RPC support however is proposed for future removal.&lt;ref name=&quot;autogenerated2&quot;&gt;JSR 318, 2.7, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; To support JAX-WS, the session bean is annotated with the @WebService annotation, and methods that are to be exposed remotely with the @WebMethod annotation..

Although the EJB specification does not mention exposure as RESTful web services in any way and has no explicit support for this form of communication, the [[JAX-RS]] specification does explicitly support EJB.&lt;ref&gt;JSR 311, Chapter 6.2, http://jcp.org/en/jsr/detail?id=311&lt;/ref&gt; Following the JAX-RS spec, Stateless- and Singleton session beans can be root resources via the @Path annotation and EJB business methods can be mapped to resource methods via the @GET, @PUT, @POST and @DELETE annotations. This however does not count as a &quot;web service client view&quot;, which is used exclusively for JAX-WS and JAX-RPC.

Communication via web services is typical for clients not written in the Java programming language, but is also convenient for Java clients who have trouble reaching the EJB server via a firewall. Additionally, web service based communication can be used by Java clients to circumvent the arcane and ill-defined requirements for the so-called &quot;client-libraries&quot;; a set of jar files that a Java client must have on its class-path in order to communicate with the remote EJB server. These client-libraries potentially conflict with libraries the client may already have (for instance, if the client itself is also a full Java EE server) and such a conflict is deemed to be very hard or impossible to resolve.&lt;ref&gt;{{cite web|url=http://community.jboss.org/thread/162519 |title=Communication between JBoss AS 5 and JBoss AS 6 &amp;#124; JBoss AS &amp;#124; JBoss Community |publisher=Community.jboss.org |date= |accessdate=2012-06-17}}&lt;/ref&gt;

=== Legacy ===

==== Home interfaces and required business interface ====
{{redirect|Home interface}}
With EJB 2.1 and earlier, each EJB had to provide a Java implementation [[class (computer science)|class]] and two Java interfaces. The EJB container created instances of the Java implementation class to provide the EJB implementation. The Java interfaces were used by client code of the EJB.

==== Required deployment descriptor ====
With EJB 2.1 and earlier, the EJB specification required a deployment descriptor to be present. This was needed to implement a mechanism that allowed EJBs to be [[software deployment|deployed]] in a consistent manner regardless of the specific EJB platform that was chosen. Information about how the bean should be deployed (such as the name of the home or remote interfaces, whether and how to store the bean in a database, etc.) had to be specified in the deployment descriptor.

The [[deployment descriptor]] is an [[XML]] document having an entry for each EJB to be deployed. This XML document specifies the following information for each EJB:
* Name of the Home interface
* Java class for the Bean (business object)
* Java interface for the Home interface
* Java interface for the business object
* Persistent store (only for Entity Beans)
* Security roles and permissions
* Stateful or Stateless (for Session Beans)

Old EJB containers from many vendors required more deployment information than that in the EJB specification. They would require the additional information as separate XML files, or some other configuration file format. An EJB platform vendor generally provided their own tools that would read this deployment descriptor, and possibly generated a set of classes that would implement the now deprecated Home and Remote interfaces.

Since EJB 3.0 ([http://jcp.org/en/jsr/detail?id=220 JSR 220]), the XML descriptor is replaced by [[Java annotation]]s set in the Enterprise Bean implementation (at source level), although it is still possible to use an XML descriptor instead of (or in addition to) the annotations. If an XML descriptor and annotations are both applied to the same attribute within an Enterprise Bean, the XML definition overrides the corresponding source-level annotation, although some XML elements can also be additive (e.g., an activation-config-property in XML with a different name than already defined via an @ActivationConfigProperty annotation will be added instead of replacing all existing properties).

== Container variations ==
Starting with EJB 3.1, the EJB specification defines two variants of the EJB container; a full version and a limited version. The limited version adheres to a [[proper subset]] of the specification called EJB 3.1 Lite &lt;ref&gt;{{cite web |url=http://wiki.caucho.com/Resin_Java_EE_6_Web_Profile#EJB_3.1_Lite |title=Resin Java EE 6 Web Profile - Resin 3.0 |publisher=Wiki.caucho.com |date=2010-02-12 |accessdate=2012-06-17 |archive-url=https://web.archive.org/web/20120323133421/http://wiki.caucho.com/Resin_Java_EE_6_Web_Profile#EJB_3.1_Lite |archive-date=2012-03-23 |url-status=dead }}&lt;/ref&gt;&lt;ref&gt;JSR 318, 21.1 EJB 3.1 Lite, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt; and is part of [[Java EE#Web Profile|Java EE 6's web profile]] (which is itself a subset of the full Java EE 6 specification).

EJB 3.1 Lite excludes support for the following features:&lt;ref&gt;JSR 318, Table 27 - Required contents of EJB 3.1 Lite and Full EJB 3.1 API, http://jcp.org/en/jsr/detail?id=318&lt;/ref&gt;
* Remote interfaces
* RMI-IIOP Interoperability
* JAX-WS Web Service Endpoints
* EJB Timer Service (@Schedule, @Timeout)
* Asynchronous session bean invocations (@Asynchronous)
* Message-driven beans

EJB 3.2 Lite excludes less features. Particularly it no longer excludes @Asynchronous and @Schedule/@Timeout, but for @Schedule it does not support the &quot;persistent&quot; attribute that full EJB 3.2 does support. The complete excluded list for EJB 3.2 Lite is:
* Remote interfaces
* RMI-IIOP Interoperability
* JAX-WS Web Service Endpoints
* Persistent timers (&quot;persistent&quot; attribute on @Schedule)
* Message-driven beans

== Version history ==
'''EJB 3.2.6, final release (2019-08-23)'''

Despite still using &quot;EJB&quot; the [[Eclipse Foundation]] has official renamed these as Jakarta Enterprise Beans so as not to tread on the &quot;Java&quot; trademark.
