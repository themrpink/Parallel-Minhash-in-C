For each string, if we count the ''k''-th position from the left end of the string, the value is determined by whether a multiple of the [[golden ratio]] falls within the interval &lt;math&gt;(k-1, k)&lt;/math&gt;.  The ratio of A to B likewise converges to the golden mean.

This example yields the same result (in terms of the length of each string, not the sequence of ''A''s and ''B''s) if the rule (''A'' → ''AB'') is replaced with (''A'' → ''BA''), except that the strings are mirrored.

This sequence is a [[locally catenative sequence]] because &lt;math&gt;G(n)=G(n-1)G(n-2)&lt;/math&gt;, where &lt;math&gt;G(n)&lt;/math&gt; is the ''n''-th generation.

===Example 2: Fractal (binary) tree===
* '''variables''' : 0, 1
* '''constants''': [, ]
* '''axiom'''  : 0
* '''rules'''  : (1 → 11), (0 → 1[0]0)

The shape is built by [[recursion|recursively]] feeding the axiom through the production rules. Each character of the input string is checked against the rule list to determine which character or string to replace it with in the output string. In this example, a '1' in the input string becomes '11' in the output string, while '&lt;nowiki&gt;[&lt;/nowiki&gt;' remains the same. Applying this to the axiom of '0', we get:

{|
|-
| axiom: || 0
|-
| 1st recursion: || 1&lt;nowiki&gt;[0]&lt;/nowiki&gt;0
|-
| 2nd recursion: || &lt;nowiki&gt;11[1[0]0]1[0]0&lt;/nowiki&gt;
|-
| 3rd recursion: || &lt;nowiki&gt;1111[11[1[0]0]1[0]0]11[1[0]0]1[0]0&lt;/nowiki&gt;
|-
| …
|}

We can see that this string quickly grows in size and complexity. This string can be drawn as an image by using [[turtle graphics]], where each symbol is assigned a graphical operation for the turtle to perform. For example, in the sample above, the turtle may be given the following instructions:

* 0: draw a [[line segment]] ending in a leaf
* 1: draw a line segment
* &lt;nowiki&gt;[&lt;/nowiki&gt;: push position and angle, turn left 45 degrees
* &lt;nowiki&gt;]&lt;/nowiki&gt;: pop position and angle, turn right 45 degrees

The push and pop refer to a [[LIFO (computing)|LIFO]] stack (more technical grammar would have separate symbols for &quot;push position&quot; and &quot;turn left&quot;). When the turtle interpretation encounters a '&lt;nowiki&gt;[&lt;/nowiki&gt;', the current position and angle are saved, and are then restored when the interpretation encounters a '&lt;nowiki&gt;]&lt;/nowiki&gt;'. If multiple values have been &quot;pushed,&quot; then a &quot;pop&quot; restores the most recently saved values. Applying the graphical rules listed above to the earlier recursion, we get:

{{Gallery
|lines=2
|width=150
|File:Graftal0.png|Axiom
|File:Graftal1.png|First recursion
|File:Graftal2.png|Second recursion
|File:Graftal3.png|Third recursion
|File:Graftal4.png|Fourth recursion
|File:Graftal7.png|Seventh recursion, scaled down ten times
}}

===Example 3: Cantor set===
[[File:Cantor set in seven iterations.svg|450px|right]]
:     '''variables''' :   A B
:     '''constants''' :   none
:     '''start'''     :   A   {starting character string}
:     '''rules'''     :   (A → ABA), (B → BBB)

Let ''A'' mean &quot;draw forward&quot; and ''B'' mean &quot;move forward&quot;.

This produces the famous [[Cantor set|Cantor's fractal set]] on a real straight line '''R'''.

===Example 4: Koch curve===
A variant of the [[Koch snowflake|Koch curve]] which uses only right angles.

: '''variables''' :   F
: '''constants''' :   + &amp;minus;
: '''start'''     :   F
: '''rules'''     :   (F → F+F&amp;minus;F&amp;minus;F+F)

Here, F means &quot;draw forward&quot;, + means &quot;turn left 90°&quot;, and &amp;minus; means &quot;turn right 90°&quot; (see [[turtle graphics]]).

: ''n'' = 0:
:: F
:: [[File:square koch.svg|Koch Square - 0 iterations]]

: ''n'' = 1:
:: F+F&amp;minus;F&amp;minus;F+F
:: [[File:square koch 1.svg|Koch Square - 1 iterations]]

: ''n'' = 2:
:: F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F
:: [[File:square koch 2.svg|Koch Square - 2 iterations]]

: ''n'' = 3:
:: F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F+
::F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;
:: F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;
:: F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F+
:: F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F&amp;minus;F+F&amp;minus;F&amp;minus;F+F+F+F&amp;minus;F&amp;minus;F+F
:: [[File:square koch 3.svg|Koch Square - 3 iterations]]

===Example 5: Sierpinski triangle===
The [[Sierpinski triangle]] drawn using an L-system.

:     '''variables''' :   F G
:     '''constants''' :   + &amp;minus;
:     '''start'''     :   F&amp;minus;G&amp;minus;G
:     '''rules'''     :   (F → F&amp;minus;G+F+G&amp;minus;F), (G → GG)
:     '''angle'''     :   120°

Here, F and G both mean &quot;draw forward&quot;, + means &quot;turn left by angle&quot;, and &amp;minus; means &quot;turn right by angle&quot;.

&lt;gallery mode=nolines widths=&quot;256px&quot; heights=&quot;256px&quot;&gt;
File:Sierpinski Triangle (from L-System, 2 iterations).png|n = 2
File:Sierpinski Triangle (from L-System, 4 iterations).png|n = 4
File:Sierpinski Triangle (from L-System, 6 iterations).png|n = 6
&lt;/gallery&gt;

It is also possible to approximate the [[Sierpinski triangle]] using a [[Sierpiński arrowhead curve]] L-system.

:     '''variables''' :   A B
:     '''constants''' :   + &amp;minus;
:     '''start'''     :   A
:     '''rules'''     :   (A → B&amp;minus;A&amp;minus;B), (B → A+B+A)
:     '''angle'''     :   60°

Here, A and B both mean &quot;draw forward&quot;, + means &quot;turn left by angle&quot;, and &amp;minus; means &quot;turn right by angle&quot; (see [[turtle graphics]]).

[[File:Serpinski Lsystem.svg|centre]]
&lt;center&gt;Evolution for ''n'' = 2, ''n'' = 4, ''n'' = 6, ''n'' = 8&lt;/center&gt;

===Example 6: Dragon curve ===
The [[dragon curve]] drawn using an L-system.

:     '''variables''' :   X Y
:     '''constants''' :   F + −
:     '''start'''     :   FX
:     '''rules'''     :   (X → X+YF+), (Y → −FX−Y)
:     '''angle'''     :   90°

Here, F means &quot;draw forward&quot;, − means &quot;turn left 90°&quot;, and + means &quot;turn right 90°&quot;. X and Y do not correspond to any drawing action and are only used to control the evolution of the curve.

[[File:Dragon curve L-system.svg|centre|400px]]

&lt;center&gt;Dragon curve for ''n'' = 10&lt;/center&gt;

===Example 7: Fractal plant ===
{{see also|Barnsley fern}}

:     '''variables''' :   X F
:     '''constants''' :   + &amp;minus; [ ]
:     '''start'''     :   X
:     '''rules'''     :   (X → F+[[X]-X]-F[-FX]+X), (F → FF)
:     '''angle'''     :   25°

Here, F means &quot;draw forward&quot;, − means &quot;turn right 25°&quot;, and + means &quot;turn left 25°&quot;. X does not correspond to any drawing action and is used to control the evolution of the curve. The square bracket &quot;[&quot; corresponds to saving the current values for position and angle, which are restored when the corresponding &quot;]&quot; is executed.

[[File:Fractal-plant.svg|alt=|left]][[File:Fractal_Farn.gif|alt=]]&lt;center&gt;Fractal plant for ''n'' = 6&lt;/center&gt;

==Variations==
A number of elaborations on this basic L-system technique have been developed which can be used in conjunction with each other. Among these are [[stochastic grammar]]s, [[context sensitive grammar]]s, and parametric grammars.

===Stochastic grammars===
The grammar model we have discussed thus far has been deterministic—that is, given any symbol in the grammar's alphabet, there has been exactly one production rule, which is always chosen, and always performs the same conversion. One alternative is to specify more than one production rule for a symbol, giving each a [[probability]] of occurring. For example, in the grammar of Example 2, we could change the rule for rewriting &quot;0&quot; from:

:0 → 1[0]0

to a probabilistic rule:

:0 (0.5) → 1[0]0
:0 (0.5) → 0

Under this production, whenever a &quot;0&quot; is encountered during string rewriting, there would be a 50% chance it would behave as previously described, and a 50% chance it would not change during production. When a stochastic grammar is used in an [[evolution]]ary context, it is advisable to incorporate a [[random]] seed into the [[genotype]], so that the stochastic properties of the image remain constant between generations.

===Context sensitive grammars===
A context sensitive production rule looks not only at the symbol it is modifying, but the symbols on the string appearing before and after it. For instance, the production rule:

:b &lt; a &gt; c → aa

transforms &quot;a&quot; to &quot;aa&quot;, but only If the &quot;a&quot; occurs between a &quot;b&quot; and a &quot;c&quot; in the input string:

:…bac…

As with stochastic productions, there are multiple productions to handle symbols in different contexts. If no production rule can be found for a given context, the identity production is assumed, and the symbol does not change on transformation. If context-sensitive and context-free productions both exist within the same grammar, the context-sensitive production is assumed to take precedence when it is applicable.

===Parametric grammars===
In a parametric grammar, each symbol in the alphabet has a parameter list associated with it. A symbol coupled with its parameter list is called a module, and a string in a parametric grammar is a series of modules. An example string might be:

:a(0,1)[b(0,0)]a(1,2)
