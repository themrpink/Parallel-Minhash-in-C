=== Financial history ===
[[File:Capital in the Twenty-First Century (front cover).jpg|thumb|right|200px|[[Thomas Piketty]], ''[[Capital in the Twenty-First Century]]'' (2013)]]
* [[Liaquat Ahamed]], ''[[Lords of Finance: The Bankers Who Broke the World]]'' (2009)
* [[Mark Blyth]], ''[[Austerity: The History of a Dangerous Idea]]'' (2013)
* [[Charles W. Calomiris]] and [[Stephen H. Haber]], ''Fragile by Design: The Political Origins of Banking Crises and Scarce Credit'' (2014)
* [[Barry Eichengreen]], ''Exorbitant Privilege: The Rise and Fall of the Dollar and the Future of the International Monetary System'' (2010)
* [[Barry Eichengreen]], ''Globalizing Capital: A History of the International Monetary System'' (1996)
* [[Niall Ferguson]], ''[[The Ascent of Money: A Financial History of the World]]'' (2008)
* [[Harold James (historian)|Harold James]], ''[[International Monetary Cooperation Since Bretton Woods]]'' (1996)
* [[Carmen M. Reinhart]] and [[Kenneth S. Rogoff]], ''This Time Is Different: Eight Centuries of Financial Folly'' (2009)
* [[Benn Steil]], ''[[The Battle of Bretton Woods: John Maynard Keynes, Harry Dexter White, and the Making of a New World Order]]'' (2013)
* [[Adam Tooze]], ''[[The Wages of Destruction: The Making and Breaking of the Nazi Economy]]'' (2006)

=== Globalization and inequality ===
* [[Sven Beckert]], ''Empire of Cotton: A Global History'' (2014)
* [[William J. Bernstein]], ''[[A Splendid Exchange|A Splendid Exchange: How Trade Shaped the World from Prehistory to Today]]'' (2008)
* [[Niall Ferguson]], ''The Cash Nexus: Money and Power in the Modern World, 1700-2000'' (2001)
* [[Robert Fogel]] and [[Stanley L. Engerman]], ''[[Time on the Cross: The Economics of American Negro Slavery]]'' (1974)
* [[Claudia Goldin]], ''Understanding the Gender Gap: An Economic History of American Women'' (1990)
* [[Harold James (historian)|Harold James]], ''The End of Globalization: Lessons from the Great Depression'' (2009)
* [[Thomas Piketty]], ''[[Capital in the Twenty-First Century]]'' (2013)
* [[Thomas Piketty]], ''The Economics of Inequality'' (2015)
* [[Thomas Piketty]], ''[[Capital and Ideology]]'' (2020)
* [[Emmanuel Saez]] and [[Gabriel Zucman]], ''The Triumph of Injustice: How the Rich Dodge Taxes and How to Make Them Pay'' (2019)
* [[Jeffrey G. Williamson]] and [[Kevin O'Rourke]], ''Globalization and History: The Evolution of a Nineteenth-century Atlantic Economy'' (1999)
* [[Gabriel Zucman]], ''[[The Hidden Wealth of Nations: The Scourge of Tax Havens]]'' (2015)

== Notable economic historians ==
[[File:Macro history economists.jpg|thumb|right|250px|Notable economic historians: [[Irving Fisher]], [[Anna Schwartz]], [[Milton Friedman]], [[Stanley Fischer]], [[Carl Menger]], [[Edward C. Prescott]], [[Alfred Marshall]] and [[Franco Modigliani]]]]
{{colbegin|colwidth=15em}}
* [[Moses Abramovitz]]
* [[Jeremy Adelman]]
* [[Robert C. Allen|Robert Allen]]
* [[T. S. Ashton]]
* [[Correlli Barnett]]
* [[Jörg Baten]]
* [[Maxine Berg]]
* [[Jean-François Bergier]]
* [[Ben Bernanke]]
* [[Francesco Boldizzoni]]
* [[Leah Boustan]]
* [[Fernand Braudel]]
* [[Rondo Cameron]]
* [[Sydney Checkland]]
* [[Carlo M. Cipolla]]
* [[John Clapham (economic historian)|John Clapham]]
* [[Gregory Clark (economist)|Gregory Clark]]
* [[Thomas C. Cochran (historian)|Thomas C. Cochran]]
* [[Nicholas Crafts]]
* [[Louis Cullen]]
* [[Peter Davies (economic historian)]]
* [[Brad DeLong]]
* [[Melissa Dell]]
* [[Barry Eichengreen]]
* [[Stanley Engerman]]
* [[Charles Feinstein]]
* [[Niall Ferguson]]
* [[Ronald Findlay]]
* [[Moses Israel Finley]]
* [[Irving Fisher]]
* [[Brian Fitzpatrick (Australian author)|Brian Fitzpatrick]]
* [[Roderick Floud]]
* [[Robert Fogel]]
* [[Milton Friedman]]
* [[Celso Furtado]]
* [[Alexander Gerschenkron]]
* [[Claudia Goldin]]
* [[Jack Goldstone]]
* [[John Habakkuk]]
* [[Earl J. Hamilton]]
* [[Eli Heckscher]]
* [[Eric Hobsbawm]]
* [[Susan Howson (economist)|Susan Howson]]
* [[Leo Huberman]]
* [[Harold James (historian)|Harold James]]
* [[Geoffrey Jones (academic)|Geoffrey Jones]]
* [[Ibn Khaldun]]
* [[Charles P. Kindleberger]]
* [[John Komlos]]
* [[Nikolai Kondratiev]]
* [[Simon Kuznets]]
* [[Emmanuel Le Roy Ladurie]]
* [[Naomi Lamoreaux]]
* [[David Landes]]
* [[Tim Leunig]]
* [[Friedrich List]]
* [[Roberto Sabatino Lopez|Robert Sabatino Lopez]]
* [[Angus Maddison]]
* [[Peter Mathias]]
* [[Ellen McArthur]]
* [[Deirdre McCloskey]]
* [[Jacob Metzer|Jacob (Kobi) Metzer]]
* [[Joel Mokyr]]
* [[Douglass North]]
* [[Nathan Nunn]]
* [[Cormac Ó Gráda]]
* [[Patrick K. O'Brien]]
* [[Thomas Piketty]]
* [[Henri Pirenne]]
* [[Karl Polanyi]]
* [[Erik S. Reinert]]
* [[Christina Romer]]
* [[Walt Whitman Rostow|W. W. Rostow]]
* [[Murray Rothbard]]
* [[Tirthankar Roy]]
* [[Joseph Schumpeter]]
* [[Anna Jacobson Schwartz]]
* [[Larry Schweikart]]
* [[Ram Sharan Sharma]]
* [[Robert Skidelsky, Baron Skidelsky|Robert Skidelsky]]
* [[Adam Smith]]
* [[Graeme Snooks]]
* [[Richard H. Steckel]]
* [[R. H. Tawney]]
* [[Peter Temin]]
* [[Adam Tooze]]
* [[Francesca Trivellato]]
* [[Eberhard Wächtler]]
* [[Jeffrey Williamson]]
* [[Tony Wrigley]]
* [[Jan Luiten van Zanden]]
{{colend}}

== See also ==
&lt;!--Alphabetical:--&gt;
* [[Capitalism]]
* [[Cliometrics]]
* [[Economic History Association]]
* [[Economic History Society]]
* [[History of economic thought]]
* [[Business history]]
* [[History of capitalism]]
* [[History of industrialisation]]

== Notes ==
{{reflist|group=a}}

== References ==
{{Reflist|30em}}

== Further reading ==
* {{cite book |last=Bairoch |first=Paul |year=1995 |title=Economics and World History: Myths and Paradoxes |location=Chicago |publisher=University of Chicago Press |isbn=0226034631 |url-access=registration |url=https://archive.org/details/economicsworldhi00bair_0 }}
* {{cite journal |last=Barker |first=T. C. |title=The Beginnings of the Economic History Society |journal=[[Economic History Review]] |volume=30 |issue=1 |year=1977 |pages=1–19 |jstor=2595495 |doi=10.2307/2595495}}
* {{cite journal |author-link=Jörg Baten |last1=Baten |first1=Jörg |first2=Julia |last2=Muschallik |title=The Global Status of Economic History |journal=Economic History of Developing Regions |volume=27 |year=2012 |issue=1 |pages=93–113 |doi=10.1080/20780389.2012.682390|s2cid=155697900 }}
*[https://www.palgrave.com/us/book/9783319965673 Blum, Matthias, Colvin, Christopher L. (Eds.). 2018. ''An Economist’s Guide to Economic History''. Palgrave.]
* [[Gerold Blümle]]: ''Wirtschaftsgeschichte und ökonomisches Denken. Ausgewählte Aufsätze.'' Metropolis, Marburg, 2007, {{ISBN|978-3-89518-597-7}}.
*{{cite book |author-link=Rondo Cameron |last1=Cameron |first1=Rondo |first2=Larry |last2=Neal |year=2003 |edition=4th |title=A Concise Economic History of the World: From Paleolithic Times to the Present |location=New York |publisher=Oxford University Press |isbn=0195127056}}
* {{cite book |author-link=Carlo M. Cipolla |last=Cipolla |first=C. M. |title=Between History and Economics: An Introduction to Economic History |location=Oxford |publisher=Blackwell |year=1991 |isbn=0631166815}}
* {{cite journal |first1=Dora |last1=Costa |first2=Jean-Luc |last2=Demeulemeester |first3=Claude |last3=Diebolt |year=2007 |title=What is 'Cliometrica'? |journal=Cliometrica |volume=1 |issue=1 |pages=1–6 |doi=10.1007/s11698-006-0001-1|s2cid=154217979 }}
* {{cite journal|author=Crafts, N.F.R.|date=1987|title=Economic history|journal=[[The New Palgrave: A Dictionary of Economics]]|volume=2|pages=1–11|doi=10.1057/978-1-349-95121-5_371-1|isbn=978-1-349-95121-5|ref= pp.&amp;nbsp;37–42|author-link=Nicholas Crafts}}
* Kadish, Alon. ''Historians, Economists, and Economic History'' (2012) pp.&amp;nbsp;3–35 [https://www.amazon.com/Historians-Economists-Economic-Routledge-Revivals/dp/0415613973 excerpt]
* {{cite journal|last=Deng|first= Kent|title=A survey of recent research in Chinese economic history|journal=Journal of Economic Surveys|place=Cambridge|date=2014|volume= 28|issue= 4|pages= 600–616|doi= 10.1111/joes.12064|s2cid= 153614497}}
* {{cite journal|first=Alexander J.|last=Field|date=2008|title=Economic history|journal=[[The New Palgrave Dictionary of Economics]]|pages=1–4|doi=10.1057/978-1-349-95121-5_371-2|isbn=978-1-349-95121-5|url=http://www.dictionaryofeconomics.com/article?id=pde2008_E000016&amp;q=history&amp;topicid=&amp;result_number=2}}
* {{cite journal|first=Lou|last=[[Louis Galambos|Galambos]]|title=Is This a Decisive Moment for the History of Business, Economic History, and the History Of Capitalism?|journal=[[Essays in Economic &amp; Business History]]|date=2014| volume=32|ref= pp. 1–18|url=http://www.ebhsoc.org/journal/index.php/journal/article/download/271/253}}
* {{cite journal |last=Gras |first=N. S. B. |title=The Rise and Development of Economic History |journal=[[Economic History Review]] |volume=1 |issue=1 |year=1927 |pages=12–34 |jstor=2590668 |doi=10.2307/2590668}}
* {{cite journal|first=Joyr|last=[[Joel Mokyr|Mokyr]]|date=2003|journal=The Oxford Encyclopedia of Economic History|place=Oxford|publisher=Oxford University Press|volume=5 vols|url=http://www.oup.com/us/catalog/general/subject/Economics/History/?view=usa&amp;ci=9780195105070|title=Economic Encyclopaedia}}
* {{cite journal|first=Peter|last=Temin|date=2014|journal=Economic History and Economic Development|title=New Economic History in Retrospect and Prospect|issue=w20107|publisher=National Bureau of Economic Research|url=http://www10.iadb.org/intal/intalcdi/PE/2014/14297.pdf}}{{Dead link|date=August 2019 |bot=InternetArchiveBot |fix-attempted=yes }}
* {{cite journal |last=Roy |first=Tirthankar |date=Summer 2002 |title=Economic History and Modern India: Redefining the Link |journal=[[The Journal of Economic Perspectives]] |publisher=American Economic Association |volume=16 |issue=3 |pages=109–30 |doi=10.1257/089533002760278749 |jstor=3216953|doi-access=free }}
*[[Kevin O'Rourke|O’Rourke, K.]] (2019). [https://www.cambridge.org/core/journals/journal-of-economic-history/article/economic-history-and-contemporary-challenges-to-globalization/616A2B63EDFDE212193C324157498179 Economic History and Contemporary Challenges to Globalization]. The Journal of Economic History, 79(2), 356-382.
*[[Robert Solow|Solow, Robert M]]. &quot;Economic History and Economics.&quot; The American Economic Review 75, no. 2 (1985): 328-31. www.jstor.org/stable/1805620.
* KT Rammohan. 2011. 'Pathways to India's Economic Past'. in D Narayana and Raman Mahadevan (eds). 'Shaping India: Economic Change in Historical Perspective'. London, New York and New Delhi: Routledge. pp. 323-347.   

{{Commons category|Economic history}}
{{Wikisource portal|Economic history and conditions}}

{{Financial bubbles}}
{{Financial crises}}
{{Economic history}}
{{Economics}}
{{Theories of History}}
{{Social sciences}}

{{Authority control}}

[[Category:Economic history| ]]
[[Category:Economic history studies| ]]
[[Category:Schools of economic thought]]
[[Category:History of economic thought]]
[[Category:Academic disciplines]]</text>
      <sha1>68btr8bzls3fx0ak35wotstr2mpvr0g</sha1>
    </revision>
  </page>
  <page>
    <title>Thread safety</title>
    <ns>0</ns>
    <id>45634</id>
    <revision>
      <id>978335741</id>
      <parentid>965552627</parentid>
      <timestamp>2020-09-14T08:32:22Z</timestamp>
      <contributor>
        <username>Frap</username>
        <id>612852</id>
      </contributor>
      <minor />
      <comment>/* Examples */ format code</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9464" xml:space="preserve">{{Cleanup|reason=the opening definition is tautological/circular|date=January 2016}}
'''Thread safety''' is a [[computer programming]] concept applicable to [[thread (computing)|multi-threaded]] code. Thread-safe code only manipulates shared data structures in a manner that ensures that all threads behave properly and fulfill their design specifications without unintended interaction. There are various strategies for making thread-safe data structures.&lt;ref&gt;{{cite book|last=Kerrisk|first=Michael|title=The Linux Programing Interface|year=2010|publisher=[[No Starch Press]]|page=655}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://docs.oracle.com/cd/E37838_01/html/E61057/index.html|title=Multithreaded Programming Guide|date=November 2010|publisher=[[Oracle Corporation]]|quote=A procedure is thread safe when the procedure is logically correct when executed simultaneously by several threads.}}&lt;/ref&gt;

A program may execute code in several threads simultaneously in a shared [[address space]] where each of those threads has access to virtually all of the [[computer storage|memory]] of every other thread. Thread safety is a property that allows code to run in multithreaded environments by re-establishing some of the correspondences between the actual flow of control and the text of the program, by means of [[synchronization (computer science)|synchronization]].

==Levels of thread safety==
[[Library (computing)|Software libraries]] can provide certain thread-safety guarantees. For example, concurrent reads might be guaranteed to be thread-safe, but concurrent writes might not be. Whether a program using such a library is thread-safe depends on whether it uses the library in a manner consistent with those guarantees.

Different vendors use slightly different terminology for thread-safety:&lt;ref&gt;{{cite web|url=https://doc.qt.io/qt-5/threads-reentrancy.html |title=Reentrancy and Thread-Safety &amp;#124; Qt 5.6 |publisher=Qt Project |date= |accessdate=2016-04-20}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://www.boost.org/doc/libs/1_51_0/doc/html/boost_asio/reference/ip__tcp.html |title=ip::tcp – 1.51.0 |publisher=Boost.org |date= |accessdate=2013-10-16}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://publib.boulder.ibm.com/html/as400/ic2924/info/RZAHWM40.HTM |title=API thread safety classifications |publisher=Publib.boulder.ibm.com |date=1998-06-09 |accessdate=2013-10-16}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://docs.oracle.com/cd/E19963-01/html/821-1601/compat-59005.html |title=MT Interface Safety Levels – Multithreaded Programming Guide |publisher=Docs.oracle.com |date=2010-11-01 |accessdate=2013-10-16}}&lt;/ref&gt;
*'''Thread safe''': Implementation is guaranteed to be free of [[race condition#Computing|race conditions]] when accessed by multiple threads simultaneously.
*'''Conditionally safe''': Different threads can access different objects simultaneously, and access to shared data is protected from race conditions.
*'''Not thread safe''': Data structures should not be accessed simultaneously by different threads.

Thread safety guarantees usually also include design steps to prevent or limit the risk of different forms of [[deadlock]]s, as well as optimizations to maximize concurrent performance. However, deadlock-free guarantees cannot always be given, since deadlocks can be caused by [[callback (computer programming)|callbacks]] and violation of [[architectural layer]]ing independent of the library itself.

==Implementation approaches==
Below we discuss two classes of approaches for avoiding [[race condition#Computing|race conditions]] to achieve thread safety.

The first class of approaches focuses on avoiding shared state, and includes:
; [[Reentrant (subroutine)|Re-entrancy]]: Writing code in such a way that it can be partially executed by a thread, reexecuted by the same thread or simultaneously executed by another thread and still correctly complete the original execution. This requires the saving of [[state (computer science)|state]] information in variables local to each execution, usually on a stack, instead of in [[static variable|static]] or [[global variable|global]] variables or other non-local state. All non-local state must be accessed through atomic operations and the data-structures must also be reentrant.
; [[Thread-local storage]]: Variables are localized so that each thread has its own private copy. These variables retain their values across [[subroutine]] and other code boundaries, and are thread-safe since they are local to each thread, even though the code which accesses them might be executed simultaneously by another thread.
; [[Immutable object]]s: The state of an object cannot be changed after construction. This implies both that only read-only data is shared and that inherent thread safety is attained. Mutable (non-const) operations can then be implemented in such a way that they create new objects instead of modifying existing ones. This approach is characteristic of [[functional programming]] and is also used by the ''string'' implementations in Java, C#, and Python. (See [[Immutable object]].)

The second class of approaches are synchronization-related, and are used in situations where shared state cannot be avoided:
;[[Mutual exclusion]]: Access to shared data is ''serialized'' using mechanisms that ensure only one thread reads or writes to the shared data at any time. Incorporation of mutual exclusion needs to be well thought out, since improper usage can lead to side-effects like [[deadlock]]s, [[livelock]]s, and [[resource starvation]].
; [[Linearizability|Atomic operations]]: Shared data is accessed by using atomic operations which cannot be interrupted by other threads. This usually requires using special [[machine language]] instructions, which might be available in a [[runtime library]]. Since the operations are atomic, the shared data is always kept in a valid state, no matter how other threads access it. Atomic operations form the basis of many thread locking mechanisms, and are used to implement mutual exclusion primitives.

==Examples==

In the following piece of [[Java (programming language)|Java]] code, the Java keyword [[list of Java keywords#synchronized|synchronized]] makes the method thread-safe:

&lt;syntaxhighlight lang=&quot;java&quot;&gt;
class Counter {
    private int i = 0;

    public synchronized void inc() {
        i++;
    }
}
&lt;/syntaxhighlight&gt;

In the [[C (programming language)|C programming language]], each thread has its own stack. However, a [[static variable]] is not kept on the stack; all threads share simultaneous access to it. If multiple threads overlap while running the same function, it is possible that a static variable might be changed by one thread while another is midway through checking it. This difficult-to-diagnose [[logic error]], which may compile and run properly most of the time, is called a [[race condition#Software|race condition]]. One common way to avoid this is to use another shared variable as a [[lock (computer science)|&quot;lock&quot; or &quot;mutex&quot;]] (from '''mut'''ual '''ex'''clusion).

In the following piece of C code, the function is thread-safe, but not reentrant:

&lt;syntaxhighlight lang=&quot;c&quot;&gt;
# include &lt;pthread.h&gt;

int increment_counter ()
{
  static int counter = 0;
  static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

  // only allow one thread to increment at a time
  pthread_mutex_lock(&amp;mutex);

  ++counter;

  // store value before any other threads increment it further
  int result = counter;

  pthread_mutex_unlock(&amp;mutex);

  return result;
}
&lt;/syntaxhighlight&gt;

In the above, &lt;code&gt;increment_counter&lt;/code&gt; can be called by different threads without any problem since a mutex is used to synchronize all access to the shared &lt;code&gt;counter&lt;/code&gt; variable. But if the function is used in a reentrant interrupt handler and a second interrupt arises while the mutex is locked, the second routine will hang forever. As interrupt servicing can disable other interrupts, the whole system could suffer.

The same function can be implemented to be both thread-safe and reentrant using the lock-free [[linearizability|atomics]] in [[C++11]]:
&lt;syntaxhighlight lang=&quot;cpp&quot;&gt;
# include &lt;atomic&gt;

int increment_counter ()
{
  static std::atomic&lt;int&gt; counter(0);

  // increment is guaranteed to be done atomically
  int result = ++counter;

  return result;
}
&lt;/syntaxhighlight&gt;

==See also==
*[[Concurrency control]]
*[[Exception safety]]
*[[Priority inversion]]
*[[ThreadSafe]]

==References==
{{Reflist}}

==External links==
*{{cite web|url=https://www.javaworld.com/article/2077373/thread-safe-design-4-20-99.html|title=Thread-safe design (4/20/99)|author=Java Q&amp;A Experts|date=20 April 1999|website=JavaWorld.com|accessdate=2012-01-22}}
*{{cite web|url=http://www.tutorialsdesk.com/2014/09/synchronization-and-thread-safety.html
|title=Synchronization and Thread Safety Tutorial with Examples in Java|author=TutorialsDesk|date=30 Sep 2014|website=TutorialsDesk.com|accessdate=2012-01-22}}
*{{cite news|url=https://www.javaworld.com/article/2076747/design-for-thread-safety.html|title=Design for thread safety|last=Venners|first=Bill|date=1 August 1998|work=JavaWorld.com|accessdate=2012-01-22}}
*{{cite web|url=http://www.thinkingparallel.com/2006/10/15/a-short-guide-to-mastering-thread-safety/|title=A Short Guide to Mastering Thread-Safety|last=Suess|first=Michael|date=15 October 2006|website=Thinking Parallel|accessdate=2012-01-22}}

[[Category:Threads (computing)]]
[[Category:Programming language topics]]</text>
      <sha1>hylndgwmg992di0y9laiud2clfickic</sha1>
    </revision>
  </page>
  <page>
    <title>Top-down and bottom-up design</title>
    <ns>0</ns>
    <id>45635</id>
    <revision>
      <id>991551881</id>
      <parentid>991551840</parentid>
      <timestamp>2020-11-30T17:32:44Z</timestamp>
      <contributor>
        <username>Materialscientist</username>
        <id>7852030</id>
      </contributor>
      <minor />
      <comment>Reverted edits by [[Special:Contributions/82.3.216.177|82.3.216.177]] ([[User talk:82.3.216.177|talk]]) ([[WP:HG|HG]]) (3.4.10)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28955" xml:space="preserve">{{multiple issues|
{{Original research|date=December 2010}}
{{Disputed|Edits of this date|what = article's basic concept—that one article should cover all appearing uses of the title term (i.e., that they all actually have comparable meaning across the various fields)—this matter |date=March 2017}}
{{expert needed |computer science |ex2 = political science |ex3 = ecology | reason = large tracts of unsourced text, on the one hand (whole paragraphs, whole sections), and on the other hand, the article's completely missing current practices of how software comes into being, making no mention of scrum, etc |date=March 2017}}
{{Rewrite|date=July 2018}}
{{Title-disputed|date=July 2018}}
}}
{{Use mdy dates|date=September 2012}}

'''Top-down''' and '''bottom-up''' are both strategies of [[information processing]] and knowledge ordering, used in a variety of fields including software, humanistic and scientific theories (see [[systemics]]), and management and organization. In practice, they can be seen as a style of thinking, teaching, or leadership.

A '''top-down''' approach (also known as ''stepwise design'' and '''stepwise refinement''' and in some cases used as a synonym of ''decomposition'') is essentially the breaking down of a system to gain insight into its compositional sub-systems in a reverse engineering fashion. In a top-down approach an overview of the system is formulated, specifying, but not detailing, any first-level subsystems. Each subsystem is then refined in yet greater detail, sometimes in many additional subsystem levels, until the entire specification is reduced to base elements. A top-down model is often specified with the assistance of &quot;black boxes&quot;, which makes it easier to manipulate. However, black boxes may fail to clarify elementary mechanisms or be detailed enough to realistically validate the model. Top down approach starts with the big picture. It breaks down from there into smaller segments.&lt;ref&gt;{{cite web |url=http://bactra.org/weblog/950.html |title=Top-Down Design (Introduction to Statistical Computing) |publisher=bactra.org |date=September 24, 2012 |access-date=September 9, 2015}}&lt;/ref&gt;

A '''bottom-up''' approach is the piecing together of systems to give rise to more complex systems, thus making the original systems sub-systems of the emergent system. Bottom-up processing is a type of [[information processing]] based on incoming data from the environment to form a [[perception]]. From a cognitive psychology perspective, information enters the eyes in one direction (sensory input, or the &quot;bottom&quot;), and is then turned into an image by the brain that can be interpreted and recognized as a perception (output that is &quot;built up&quot; from processing to final cognition). In a bottom-up approach the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems, which then in turn are linked, sometimes in many levels, until a complete top-level system is formed. This strategy often resembles a &quot;seed&quot; model, by which the beginnings are small but eventually grow in complexity and completeness. However, &quot;organic strategies&quot; may result in a tangle of elements and subsystems, developed in isolation and subject to local optimization as opposed to meeting a global purpose.

==Product design and development==
{{Main article|New product development}}
During the design and development of new products, designers and engineers rely on both a bottom-up and top-down approach. The bottom-up approach is being utilized when off-the-shelf or existing components are selected and integrated into the product. An example would include selecting a particular fastener, such as a bolt, and designing the receiving components such that the fastener will fit properly. In a top-down approach, a custom fastener would be designed such that it would fit properly in the receiving components.&lt;ref&gt;{{cite journal|title=Cognitive Lie Detection: Response Time and Consistency of Answers as Cues to Deception - Springer |date=January 9, 1997 |doi=10.1007/s10869-009-9090-8 |volume=24 |journal=Journal of Business and Psychology |pages=33–49|last1 = Walczyk|first1 = Jeffrey J.|last2=Mahoney |first2=Kevin T. |last3=Doverspike |first3=Dennis |last4=Griffith-Ross |first4=Diana A. |s2cid=143270100 }}&lt;/ref&gt;
For perspective, for a product with more restrictive requirements (such as weight, geometry, safety, environment, etc.), such as a space-suit, a more top-down approach is taken and almost everything is custom designed.

==Computer science==

===Software development===
:''Part of this section is from the [[Perl Design Patterns Book]]''.

In the [[software development process]], the '''top-down''' and '''bottom-up''' approaches play a key role.

Top-down approaches emphasize planning and a complete understanding of the system. It is inherent that no coding can begin until a sufficient level of detail has been reached in the design of at least some part of the system. Top-down approaches are implemented by attaching the stubs in place of the module. This, however, delays testing of the ultimate functional units of a system until significant design is complete.

Bottom-up emphasizes coding and early testing, which can begin as soon as the first module has been specified. This approach, however, runs the risk that modules may be coded without having a clear idea of how they link to other parts of the system, and that such linking may not be as easy as first thought. [[Code reuse|Re-usability of code]] is one of the main benefits of the bottom-up approach.&lt;ref name=&quot;autogenerated1&quot;&gt;{{cite web |url=http://step.psy.cmu.edu/scripts/Attention/Treisman1980.html |title=STEP: Scripts: Attention: Treisman and Gelade 1980 |publisher=Step.psy.cmu.edu |date=March 13, 2003 |access-date=October 21, 2012 |url-status=dead |archive-url=https://web.archive.org/web/20110914130951/http://step.psy.cmu.edu/scripts/Attention/Treisman1980.html |archive-date=September 14, 2011 |df=mdy-all }}&lt;/ref&gt;

Top-down design was promoted in the 1970s by [[IBM]] researchers [[Harlan Mills]] and [[Niklaus Wirth]]. Mills developed [[structured programming]] concepts for practical use and tested them in a 1969 project to automate the ''[[The New York Times|New York Times]]'' morgue index. The engineering and management success of this project led to the spread of the top-down approach through IBM and the rest of the computer industry. Among other achievements, Niklaus Wirth, the developer of [[Pascal programming language]], wrote the influential paper ''Program Development by '''Stepwise Refinement'''''. Since Niklaus Wirth went on to develop languages such as [[Modula]] and [[Oberon (programming language)|Oberon]] (where one could define a module before knowing about the entire program specification), one can infer that top-down programming was not strictly what he promoted. Top-down methods were favored in [[software engineering]] until the late 1980s,&lt;ref name=&quot;autogenerated1&quot;/&gt; and [[object-oriented programming]] assisted in demonstrating the idea that both aspects of top-down and bottom-up programming could be utilized.
