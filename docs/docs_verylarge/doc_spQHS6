Modern software design approaches usually combine both top-down and bottom-up approaches. Although an understanding of the complete system is usually considered necessary for good design, leading theoretically to a top-down approach, most software projects attempt to make use of existing code to some degree. Pre-existing modules give designs a bottom-up flavor. Some design approaches also use an approach where a partially functional system is designed and coded to completion, and this system is then expanded to fulfill all the requirements for the project.

===Programming===
[[File:Lego Chicago City View 2001.jpg|thumb|left|Building blocks are an example of bottom-up design because the parts are first created and then assembled without regard to how the parts will work in the assembly.]]

Top-down is a programming style, the mainstay of traditional procedural languages, in which design begins by specifying complex pieces and then dividing them into successively smaller pieces. The technique for writing a program using top–down methods is to write a main procedure that names all the major functions it will need. Later, the programming team looks at the requirements of each of those functions and the process is repeated. These compartmentalized sub-routines eventually will perform actions so simple they can be easily and concisely coded. When all the various sub-routines have been coded the program is ready for testing. By defining how the application comes together at a high level, lower level work can be self-contained. By defining how the lower level abstractions are expected to integrate into higher level ones, interfaces become clearly defined.

In a bottom-up approach, the individual base elements of the system are first specified in great detail. These elements are then linked together to form larger subsystems, which then in turn are linked, sometimes in many levels, until a complete top-level system is formed. This strategy often resembles a &quot;seed&quot; model, by which the beginnings are small, but eventually grow in complexity and completeness. Object-oriented programming (OOP) is a paradigm that uses &quot;objects&quot; to design applications and computer programs. In mechanical engineering with software programs such as Pro/ENGINEER, Solidworks, and Autodesk Inventor users can design products as pieces not part of the whole and later add those pieces together to form assemblies like building with [[Lego]]. Engineers call this piece part design.

In a bottom-up approach, good intuition is necessary to decide the functionality that is to be provided by the module. If a system is to be built from an existing system, this approach is more suitable as it starts from some existing modules.

=== Parsing ===

[[Parsing]] is the process of analyzing an input sequence (such as that read from a file or a keyboard) in order to determine its grammatical structure. This method is used in the analysis of both [[natural language]]s and [[computer language]]s, as in a [[compiler]].

Bottom-up parsing is a strategy for analyzing unknown data relationships that attempts to identify the most fundamental units first, and then to infer higher-order structures from them. Top-down parsers, on the other hand, hypothesize general [[parse tree]] structures and then consider whether the known fundamental structures are compatible with the hypothesis. See [[Top-down parsing]] and [[Bottom-up parsing]].

== Nanotechnology ==
{{Main article|Nanotechnology}}

'''Top-down''' and '''bottom-up''' are two approaches for the manufacture of products. These terms were first applied to the field of nanotechnology by the [[Foresight Institute]] in 1989 in order to distinguish between molecular manufacturing (to mass-produce large atomically precise objects) and conventional manufacturing (which can mass-produce large objects that are not atomically precise). Bottom-up approaches seek to have smaller (usually [[Molecule|molecular]]) components built up into more complex assemblies, while top-down approaches seek to create nanoscale devices by using larger, externally controlled ones to direct their assembly. Certain valuable nanostructures, such as [[Silicon nanowire#Synthesis|Silicon nanowires]], can be fabricated using either approach, with processing methods selected on the basis of targeted applications.

The top-down approach often uses the traditional workshop or microfabrication methods where externally controlled tools are used to cut, mill, and shape materials into the desired shape and order. [[Micropatterning]] techniques, such as [[photolithography]] and [[inkjet printing]] belong to this category. Vapor treatment can be regarded as a  new top-down secondary approaches to engineer nanostructures.&lt;ref&gt;{{cite journal|last1=Saghaei|first1=Jaber|last2=Fallahzadeh|first2=Ali|last3=Saghaei|first3=Tayebeh|title=Vapor treatment as a new method for photocurrent enhancement of UV photodetectors based on ZnO nanorods|journal=Sensors and Actuators A: Physical|date=June 2016|volume=247|pages=150–155|doi=10.1016/j.sna.2016.05.050}}&lt;/ref&gt;

Bottom-up approaches, in contrast, use the [[chemistry|chemical]] properties of single molecules to cause single-molecule components to (a) self-organize or self-assemble into some useful conformation, or (b) rely on positional assembly. These approaches utilize the concepts of [[molecular self-assembly]] and/or [[molecular recognition]]. See also [[Supramolecular chemistry]]. Such bottom-up approaches should, broadly speaking, be able to produce devices in parallel and much cheaper than top-down methods, but could potentially be overwhelmed as the size and complexity of the desired assembly increases.

== Neuroscience and psychology ==
[[Image:TheCat.png|thumb|right|An example of top-down processing: Even though the second letter in each word is ambiguous, top-down processing allows for easy disambiguation based on the context.]]

These terms are also employed in [[neuroscience]], [[cognitive neuroscience]] and [[cognitive psychology]] to discuss the flow of information in processing.&lt;ref&gt;Palmer (1981).{{page needed|date=March 2017}}&lt;/ref&gt;{{page needed|date=March 2017}} Typically [[Sensory system|sensory]] input is considered &quot;bottom-up&quot;, and [[Executive functions|higher cognitive processes]], which have more information from other sources, are considered &quot;top-down&quot;. A bottom-up process is characterized by an absence of higher level direction in sensory processing, whereas a top-down process is characterized by a high level of direction of sensory processing by more cognition, such as goals or targets (Beiderman, 19).&lt;ref name=&quot;autogenerated1&quot;/&gt;

According to college teaching notes written by Charles Ramskov,{{who|date=March 2017}} Rock, Neiser, and Gregory claim that top-down approach involves perception that is an active and constructive process.&lt;ref&gt;Ramskov (2008), p. 67.{{better source|date=March 2017}}&lt;/ref&gt;{{better source|date=March 2017}} Additionally, it is an approach not directly given by stimulus input, but is the result of stimulus, internal hypotheses, and expectation interactions. According to Theoretical Synthesis, &quot;when a stimulus is presented short and clarity is uncertain that gives a vague stimulus, perception becomes a top-down approach.&quot;&lt;ref name=&quot;autogenerated1935&quot;&gt;{{cite web |url=http://psychclassics.asu.edu/Stroop/ |title=Classics in the History of Psychology - Stroop (1935) |publisher=Psychclassics.asu.edu |date=August 15, 1934 |access-date=October 21, 2012 |url-status=dead |archive-url=https://web.archive.org/web/20140119172853/http://psychclassics.asu.edu/Stroop/ |archive-date=January 19, 2014 |df=mdy-all }}&lt;/ref&gt;

Conversely, psychology defines bottom-up processing as an approach wherein there is a progression from the individual elements to the whole. According to Ramskov, one proponent of bottom-up approach, Gibson, claims that it is a process that includes visual perception that needs information available from proximal stimulus produced by the distal stimulus.&lt;ref&gt;Ramskov (2008).{{page needed|date=March 2017}}{{better source|date=March 2017}}&lt;/ref&gt;{{page needed|date=March 2017}}{{better source|date=March 2017}}&lt;ref&gt;Solso (1998), p. 15.&lt;/ref&gt; Theoretical Synthesis also claims that bottom-up processing occurs &quot;when a stimulus is presented long and clearly enough.&quot;&lt;ref name=&quot;autogenerated1935&quot;/&gt;

Cognitively speaking, certain cognitive processes, such as fast reactions or quick visual identification, are considered bottom-up processes because they rely primarily on sensory information, whereas processes such as [[motor system|motor]] control and [[Overt attention|directed attention]] are considered top-down because they are goal directed. Neurologically speaking, some areas of the brain, such as area [[Visual cortex#Primary visual cortex (V1)|V1]] mostly have bottom-up connections.&lt;ref name=&quot;autogenerated1935&quot;/&gt; Other areas, such as the [[fusiform gyrus]] have inputs from higher brain areas and are considered to have top-down influence.&lt;ref&gt;Ramskov (2008), p. 81.{{better source|date=March 2017}}&lt;/ref&gt;{{better source|date=March 2017}}

The study of [[Attention|visual attention]] provides an example. If your attention is drawn to a flower in a field, it may be because the color or shape of the flower are visually salient. The information that caused you to attend to the flower came to you in a bottom-up fashion—your attention was not contingent upon knowledge of the flower; the outside stimulus was sufficient on its own. Contrast this situation with one in which you are looking for a flower. You have a representation of what you are looking for. When you see the object you are looking for, it is salient. This is an example of the use of top-down information.

In cognitive terms, two thinking approaches are distinguished. &quot;Top-down&quot; (or &quot;big chunk&quot;) is stereotypically the visionary, or the person who sees the larger picture and overview. Such people focus on the big picture and from that derive the details to support it. &quot;Bottom-up&quot; (or &quot;small chunk&quot;) cognition is akin to focusing on the detail primarily, rather than the landscape. The expression &quot;seeing the wood for the trees&quot; references the two styles of cognition.&lt;ref&gt;{{cite journal | last1 = Biederman | first1 = I. | last2 = Glass | first2 = A. L. | last3 = Stacy | first3 = E. W. | year = 1973 | title = Searching for objects in real world scenes | journal = Journal of Experimental Psychology | volume = 97 | issue = 1| pages = 22–27 | doi=10.1037/h0033776| pmid = 4704195 }}&lt;/ref&gt;

==Management and organization ==
In the fields of management and organization, the terms &quot;top-down&quot; and &quot;bottom-up&quot; are used to describe how decisions are made and/or how change is implemented.&lt;ref name=&quot;:0&quot;&gt;{{Cite journal|last1=Stewart|first1=Greg L.|last2=Manges|first2=Kirstin A.|last3=Ward|first3=Marcia M.|title=Empowering Sustained Patient Safety|journal=Journal of Nursing Care Quality|volume=30|issue=3|pages=240–246|doi=10.1097/ncq.0000000000000103|pmid=25479238|year=2015|s2cid=5613563}}&lt;/ref&gt;

A &quot;''top-down''&quot; approach is where an executive decision maker or other top person makes the decisions of how something should be done. This approach is disseminated under their authority to lower levels in the hierarchy, who are, to a greater or lesser extent, bound by them. For example, when wanting to make an improvement in a hospital, a hospital administrator might decide that a major change (such as implementing a new program) is needed, and then the leader uses a planned approach to drive the changes down to the frontline staff (Stewart, Manges, Ward, 2015).&lt;ref name=&quot;:0&quot; /&gt;

A &quot;''bottom-up''&quot; approach to changes is one that works from the [[grassroots]]—from a large number of people working together, causing a decision to arise from their joint involvement. A decision by a number of activists, students, or victims of some incident to take action is a &quot;bottom-up&quot; decision. A bottom-up approach can be thought of as &quot;an incremental change approach that represents an emergent process cultivated and upheld primarily by frontline workers&quot; (Stewart, Manges, Ward, 2015, p.&amp;nbsp;241).&lt;ref name=&quot;:0&quot; /&gt;

Positive aspects of top-down approaches include their efficiency and superb overview of higher levels.&lt;ref name=&quot;:0&quot; /&gt; Also, external effects can be internalized. On the negative side, if reforms are perceived to be imposed 'from above', it can be difficult for lower levels to accept them (e.g. Bresser-Pereira, Maravall, and Przeworski 1993). Evidence suggests this to be true regardless of the content of reforms (e.g. Dubois 2002). A bottom-up approach allows for more experimentation and a better feeling for what is needed at the bottom. Other evidence suggests that there is a third combination approach to change (see Stewart, Manges, Ward, 2015).&lt;ref name=&quot;:0&quot; /&gt;

===Public health===

Both top-down and bottom-up approaches exist in [[public health]]. There are many examples of top-down programs, often run by governments or large [[inter-governmental organizations]] (IGOs); many of these are disease-specific or issue-specific, such as [[HIV]] control or [[Smallpox]] [[Eradication of infectious diseases|Eradication]]. Examples of bottom-up programs include many small NGOs set up to improve local access to healthcare. However, a lot of programs seek to combine both approaches; for instance, [[guinea worm eradication]], a single-disease international program currently run by the [[Carter Center]] has involved the training of many local volunteers, boosting bottom-up capacity, as have international programs for hygiene, sanitation, and access to primary health-care.

== Architecture ==

Often, the [[École des Beaux-Arts]] school of design is said to have primarily promoted top-down design because it taught that an architectural design should begin with a [[parti pris|parti]], a basic plan drawing of the overall project.{{Citation needed|date=December 2014}}

By contrast, the [[Bauhaus]] focused on bottom-up design. This method manifested itself in the study of translating small-scale organizational systems to a larger, more architectural scale (as with the woodpanel carving and furniture design).

== Ecology ==
In [[ecology]], top-down control refers to when a top predator controls the structure or population dynamics of the [[ecosystem]]. The interactions between these top predators and their prey is what influences lower [[trophic level]]s. Changes in the top level of trophic levels have an inverse effect on the lower trophic levels. Top-down control can have negative effects on the surrounding ecosystem if there is a drastic change in the number of predators. The classic example is of [[kelp forest]] ecosystems. In such ecosystems, [[sea otter]]s are a [[keystone species|keystone]] predator. They prey on [[Sea urchin|urchins]] which in turn eat [[kelp]]. When otters are removed, urchin populations grow and reduce the kelp forest creating [[urchin barren]]s. This reduces the diversity of the ecosystem as a whole and can detrimental effects on all of the other organisms. In other words, such ecosystems are not controlled by productivity of the kelp, but rather, a top predator. One can see the inverse effect that top-down control has in this example; when the population of otters decreased, the population of the urchins increased. 


Bottom-up control in ecosystems refers to ecosystems in which the nutrient supply, productivity, and type of [[primary producer]]s (plants and phytoplankton) control the ecosystem structure. If there are not enough resources or producers in the ecosystem, there is not enough energy left for the rest of the animals in the food chain because of [[biomagnification]] and the [[ecological efficiency]]. An example would be how plankton populations are controlled by the availability of nutrients. Plankton populations tend to be higher and more complex in areas where upwelling brings nutrients to the surface.


There are many different examples of these concepts. It is common for populations to be influenced by both types of control, and there is still debates going on as to which type of control affects food webs in certain ecosystems.

== Philosophy and ethics ==

Top-down reasoning in ethics is when the reasoner starts from abstract universalisable principles and then reasons down them to particular situations. Bottom-up reasoning occurs when the reasoner starts from intuitive particular situational judgements and then reasons up to principles.&lt;ref&gt;{{cite web| url=https://philpapers.org/rec/COHTNO| title=Nature of Moral Reasoning by Stephen Cohen |year=2004}}&lt;/ref&gt; Reflective Equilibrium&lt;ref&gt;{{citation|first=John |last=Rawls |title=Theory of Justice}}&lt;/ref&gt; occurs when there is interaction between top-down and bottom-up reasoning until both are in harmony. That is to say, when universalisable abstract principles are reflectively found to be in equilibrium with particular intuitive judgements. The process occurs when cognitive dissonance occurs when reasoners try to resolve top-down with bottom-up reasoning, and adjust one or the other, until they are satisfied they have found the best combinations of principles and situational judgements.

==See also==
*[[The Cathedral and the Bazaar]]
* [[Pseudocode]]

==References cited==
* {{cite book | author = Palmer S.E., Rosch E., &amp; Chase P. | year = 1981 | chapter = Canonical Perspective and the Perception of Objects | editor = Long J. &amp; Baddely A. | title = Attention and performance IX | isbn = 978-0757548895 | location = Hillsdale, NJ | publisher = L. Erlbaum Associates | pages = 135–151}}
*{{cite book | author = Ramskov, Charles B. | year = 2008 | title = Psychology Notes | 
isbn = 978-0757548895 | publisher = Kendall Hunt Publishing }}
*{{cite book | author = Solso, Robert L. | year = 1998 | title = Cognitive psychology | edition = 5th | isbn = 978-0757548895 | location = Needham Heights, MA | publisher = Allyn and Bacon }}
*{{cite book | author = Lynam C. P., Llope M., Möllmann C., Helaouët P., Bayliss-Brown G. A., &amp; Stenseth N.C. | year = 2017 | title = Interaction between top-down and bottom-up control in marine food webs }}

*{{cite book | author = Cohen, Stephen. | year = 2004 | title = Nature of Moral Reasoning }} https://philpapers.org/rec/COHTNO

== Citations and notes ==
{{Reflist|33em}}

==Further reading==
*[[Luiz Carlos Bresser-Pereira]], José María Maravall, and Adam Przeworski, 1993. Economic reforms in new democracies. Cambridge: Cambridge University Press. {{ISBN|1-55587-532-7}}.
* Dubois, Hans F.W. 2002. Harmonization of the European vaccination policy and the role TQM and reengineering could play. Quality Management in Health Care 10(2): 47–57.
* J. A. Estes, M. T. Tinker, T. M. Williams, D. F. Doak &quot;Killer Whale Predation on Sea Otters Linking Oceanic and Nearshore Ecosystems&quot;, ''Science'', October 16, 1998: Vol. 282. no. 5388, pp.&amp;nbsp;473 – 476
* {{cite journal | last1 = Malone | first1 = T. C. | last2 = Conley | first2 = D. J. | last3 = Fisher | first3 = T. R. | last4 = Glibert | first4 = P. M. | last5 = Harding | first5 = L.W. | last6 = Sellner | first6 = K.G. | year = 1996 | title = Scales of nutrient-limited phytoplankton productivity in Chesapeake Bay | journal = Estuaries | volume = 19 | issue = 2| pages = 371–385 | doi=10.2307/1352457| jstor = 1352457 | s2cid = 84062438 }}
* Galotti, K. (2008). ''Cognitive Psychology: In and out of the laboratory''. USA: Wadsworth.
*Goldstein, E.B. (2010). ''Sensation and Perception''. USA: Wadsworth.
*{{cite journal | last1 = Biederman | first1 = I. | last2 = Glass | first2 = A. L. | last3 = Stacy | first3 = E. W. | year = 1973 | title = Searching for objects in real world scenes | journal = Journal of Experimental Psychology | volume = 97 | issue = 1| pages = 22–27 | doi=10.1037/h0033776| pmid = 4704195 }}
*{{cite journal | last1 = Stewart | first1 = G. L. | last2 = Manges | first2 = K. A. | last3 = Ward | first3 = M. M. | year = 2015 | title = Empowering sustained patient safety: the benefits of combining top-down and bottom-up approaches | journal = Journal of Nursing Care Quality | volume = 30 | issue = 3| pages = 240–246 | doi=10.1097/ncq.0000000000000103| pmid = 25479238 | s2cid = 5613563 }}

== External links ==
* [http://portal.acm.org/citation.cid=362575.362577&amp;coll=ACM&amp;dl=ACM&amp;CFID=104603749&amp;CFTOKEN=53111129 &quot;Program Development by Stepwise Refinement&quot;], ''Communications of the ACM'', Vol. 14, No. 4, April (1971)
* [https://web.archive.org/web/20121015165640/http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.57.224 Integrated Parallel Bottom-up and Top-down Approach]. In Proceedings of the International Emergency Management Society's Fifth Annual Conference (TIEMS 98), May 19–22, Washington DC, USA (1998).
* [https://web.archive.org/web/20060304154216/http://search.bwh.harvard.edu/pdf/ChangingYourMind.pdf Changing Your Mind: On the Contributions of Top-Down and Bottom-Up Guidance in Visual Search for Feature Singletons], ''Journal of Experimental Psychology: Human Perception and Performance'', Vol. 29, No. 2, 483–502, 2003.
* K. Eric Drexler and Christine Peterson, [https://web.archive.org/web/20081012060801/http://www.foresight.org/updates/Briefing2.html Nanotechnology and Enabling Technologies], Foresight Briefing No. 2, 1989.
* [http://journals.lww.com/jncqjournal/Abstract/2015/07000/Empowering_Sustained_Patient_Safety__The_Benefits.9.aspx Empowering sustained patient safety: the benefits of combining top-down and bottom-up approaches]

{{DEFAULTSORT:Top-Down and Bottom-Up Design}}
[[Category:Dichotomies]]
[[Category:Information science]]
[[Category:Neuropsychology]]
[[Category:Software design]]
[[Category:Management science]]
[[Category:Hierarchy]]</text>
      <sha1>s8lmhjhpqwegi0k07aad2msbbjuhtpe</sha1>
    </revision>
  </page>
  <page>
    <title>Borland Turbo C</title>
    <ns>0</ns>
    <id>45636</id>
    <revision>
      <id>984031729</id>
      <parentid>979632170</parentid>
      <timestamp>2020-10-17T19:10:07Z</timestamp>
      <contributor>
        <username>WikiCleanerBot</username>
        <id>18872885</id>
      </contributor>
      <minor />
      <comment>v2.03b - [[User:WikiCleanerBot#T20|Bot T20 CW#61]] - [[WP:WCW]] project (Reference before punctuation)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6261" xml:space="preserve">{{short description|Discontinued C IDE and compiler}}
{{Technical reasons|Turbo C#|the C# IDE|Turbo C Sharp}}
{{Infobox Software
| name                   = Borland Turbo C
| developer              = [[Borland]]
| released               = {{Start date and age|1987}}
| operating system       = [[Microsoft Windows]], [[MS-DOS]]
| genre                  = [[Integrated development environment|IDE]]
| license                = [[Proprietary software]]
}}
'''Turbo C''' is a discontinued [[Integrated Development Environment]] and [[compiler]] for the [[C (programming language)|C programming language]] from [[Borland]]. First introduced in 1987, it was noted for its integrated development environment, small size, fast compile speed, comprehensive manuals and low price.

In May 1990, Borland replaced Turbo C with [[Turbo C++]]. In 2006, Borland reintroduced the '''Turbo''' [[moniker]].

==Early history==
In the early 1980s, Borland enjoyed considerable success with their [[Turbo Pascal]] product and it became a popular choice when developing applications for the PC. Borland followed up that success by releasing [[Turbo Basic]], [[Turbo Prolog]], and in 1987, Turbo C. Turbo C has similar properties to Turbo Pascal: an [[integrated development environment]], a fast compiler (though not near the speed of Turbo Pascal),&lt;ref&gt;{{cite web|last1=Hague|first1=James|title=A Personal History of Compilation Speed, Part 2|url=http://prog21.dadgum.com/47.html|website=Programming in the 21st Century|accessdate=2016-06-05}}&lt;/ref&gt; a good editor, and a competitive price.

While Turbo Pascal was successful with hobbyists and schools as well as professional programmers, Turbo C competed with other professional programming tools, such as [[Microsoft C]], [[Lattice C]], and [[Watcom C/C++|Watcom C]].{{Citation needed|date=January 2019}}

==Version history==
'''Version 1.0''' (May 13, 1987) offered the first integrated development environment for C on [[IBM PC]]s. Like many Borland products of the time, the software was bought from another company (in this case '''Wizard C''' by Bob Jervis&lt;ref&gt;[https://groups.google.com/d/msg/borland.public.delphi.non-technical/QMdz7BbHDVg/T8bGnRFje3cJ Borland Backgrounder], 2/8/99&lt;/ref&gt;), and branded with the &quot;Turbo&quot; name. It ran in {{nowrap|384 kB}} of memory. It allowed [[inline assembly]] with full access to C symbolic names and structures, supported all memory models, and offered optimizations for speed, size, [[constant folding]], and jump elimination.&lt;ref name=&quot;foldoc turboc&quot;&gt;{{cite web|url=http://foldoc.org/index.cgi?Turbo+C |title=Computing Dictionary |website=Foldoc.org |accessdate=2016-06-05}}&lt;/ref&gt;

&lt;!-- Deleted image removed: [[Image:Tc15startup.png|thumb|Turbo C 1.5 startup screen.]] --&gt;
'''Version 1.5''' (January 1988) was an incremental improvement over version 1.0. It included more sample programs, improved manuals and bug fixes. It was shipped on five 360 KB [[diskette]]s of uncompressed files, and came with sample C programs, including a stripped down spreadsheet called [[mcalc]]. This version introduced the &lt;conio.h&gt; header file (which provided fast, PC-specific console I/O routines).

&lt;!-- Deleted image removed: [[Image:Tc20startup.png|thumb|Turbo C 2.0 startup screen.]] --&gt;
'''Version 2.0''' (late 1988) featured the first &quot;blue screen&quot; version, which would be typical of all future Borland releases for [[MS-DOS]]. It was also available bundled with [[Turbo Assembler]] and [[Turbo Debugger]]. Turbo C 2.0 was also released (in [[Germany]] only) for the [[Atari ST]]; the program was not maintained by Borland, but sold and renamed PureC.

With the release of [[Turbo C++]] 1.0 (in 1990), the two products were folded into one and the name &quot;Turbo C&quot; was discontinued. The C++ compiler was developed under contract by a company in San Diego, and was one of the first &quot;true&quot; compilers for C++ (until then, it was common to use pre-compilers that generated C code, ref. [[Cfront]]).

== Freeware release ==
In 2006,{{citation needed|date=September 2019}} Borland's successor, [[Embarcadero Technologies]], re-released Turbo C and the MS-DOS versions of the Turbo C++ compilers as [[freeware]].&lt;ref&gt;{{cite web |author=Tim DelChiaro |url=http://edn.embarcadero.com/article/41337 |title=Free Borland C++ 5.5 Compiler |website=Edn.embarcadero.com |date=2011-03-28 |accessdate=2019-09-11}}&lt;/ref&gt;&lt;ref&gt;{{cite web |author=David Intersimone |url=http://edn.embarcadero.com/article/20841 |title=Antique Software: Turbo C version 2.01 |website=Edn.embarcadero.com |date=2000-02-15|orig-year=1989-05-11|accessdate=2019-09-11}}&lt;/ref&gt;&lt;ref&gt;{{cite web |author=David Intersimone |url=http://edn.embarcadero.com/article/21751 |title=Antique Software: Turbo C++ version 1.01 |website=Edn.embarcadero.com |date=2000-04-14|orig-year=1991-02-28|accessdate=2019-09-11}}&lt;/ref&gt;

==Reception==
''[[BYTE]]'' in 1989 listed Turbo C and Turbo Pascal as among the &quot;Distinction&quot; winners of the BYTE Awards. Citing their user interface and continued emphasis on speed, the magazine stated that &quot;for rapid prototyping there's not much better&quot;.&lt;ref name=&quot;byte198901&quot;&gt;{{Cite magazine |date=January 1989 |title=The BYTE Awards |url=https://archive.org/stream/byte-magazine-1989-01/1989_01_BYTE_14-01_PC_Communications_and_Annual_Awards_and_Digitizing_Tablets#page/n371/mode/2up |magazine=BYTE |page=327}}&lt;/ref&gt;

==See also==
* [[Turbo Assembler]]
* [[Turbo Debugger]]
