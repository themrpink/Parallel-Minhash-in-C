[[Telecommunication]]s systems employ numerous embedded systems from [[telephone switch]]es for the network to [[Mobile phone|cell phones]] at the [[end user]].
Computer networking uses dedicated [[Router (computing)|routers]] and [[network bridge]]s to route data.

[[Consumer electronics]] include [[MP3 player]]s, [[television set]]s, [[mobile phone]]s, [[video game console]]s, [[digital camera]]s, [[Global Positioning System|GPS]] receivers, and [[computer printer|printers]]. Household appliances, such as [[microwave oven]]s, [[washing machine]]s and [[dishwashers]], include embedded systems to provide flexibility, efficiency and features. Advanced [[HVAC]] systems use networked [[thermostat]]s to more accurately and efficiently control temperature that can change by time of day and [[season]]. [[Home automation]] uses wired- and wireless-networking that can be used to control lights, climate, security, audio/visual, surveillance, etc., all of which use embedded devices for sensing and controlling.

Transportation systems from flight to automobiles increasingly use embedded systems. New airplanes contain advanced [[avionics]] such as [[inertial guidance system]]s and GPS receivers that also have considerable safety requirements. Various electric motors — [[brushless DC motor]]s, [[induction motor]]s and [[DC motor]]s — use electronic [[motor controller]]s. [[Automobile]]s, [[electric vehicle]]s, and [[hybrid vehicle]]s increasingly use embedded systems to maximize efficiency and reduce pollution. Other automotive safety systems using embedded systems include [[anti-lock braking system]] (ABS), [[Electronic Stability Control]] (ESC/ESP), [[Traction control system|traction control]] (TCS) and automatic [[four-wheel drive]].

[[Medical equipment]] uses embedded systems for [[Monitoring (medicine)|monitoring]], and various [[medical imaging]] ([[Positron emission tomography|PET]], [[Single photon emission computed tomography|SPECT]], [[Computed tomography|CT]], and [[Magnetic resonance imaging|MRI]]) for non-invasive internal inspections. Embedded systems within medical equipment are often powered by industrial computers.&lt;ref&gt;[http://content.dell.com/us/en/enterprise/oem-industry-solutions-build-your-product-with-dell Embedded Systems Dell OEM Solutions | Dell]. Content.dell.com (2011-01-04). Retrieved on 2013-02-06.&lt;/ref&gt;

Embedded systems are used [[safety-critical system]]s. Unless connected to wired or wireless networks via on-chip 3G cellular or other methods for IoT monitoring and control purposes, these systems can be isolated from hacking and thus be more secure.&lt;ref&gt;{{Cite journal|last=Mulla|first=Ifath Azeem|date=August 2019|title=Comprehensive Study on Embedded System and IoT|url=https://iarjset.com/wp-content/uploads/2019/09/IARJSET.2019.6813.pdf|journal=International Advanced Research Journal in Science, Engineering and Technology|volume=6|issue=8}}&lt;/ref&gt; For fire safety, the systems can be designed to have a greater ability to handle higher temperatures and continue to operate. In dealing with security, the embedded systems can be self-sufficient and be able to deal with cut electrical and communication systems.

Miniature wireless devices called [[mote (sensor)|motes]] are networked wireless sensors. [[Wireless sensor networking]] makes use of miniaturization made possible by advanced IC design to couple full wireless subsystems to sophisticated sensors, enabling people and companies to measure a myriad of things in the physical world and act on this information through monitoring and control systems. These motes are completely self-contained and will typically run off a battery source for years before the batteries need to be changed or charged.

==Characteristics==
Embedded systems are designed to do some specific task, rather than be a general-purpose computer for multiple tasks. Some also have [[Real-time computing|real-time]] performance constraints that must be met, for reasons such as safety and usability; others may have low or no performance requirements, allowing the system hardware to be simplified to reduce costs.

Embedded systems are not always standalone devices. Many embedded systems consist of small parts within a larger device that serves a more general purpose. For example, the [[Gibson Robot Guitar]] features an embedded system for tuning the strings, but the overall purpose of the Robot Guitar is, of course, to play music.&lt;ref&gt;{{cite magazine |url=http://www.embedded.com/underthehood/207401418 |title=Under the Hood: Robot Guitar embeds autotuning |archive-url=https://web.archive.org/web/20080708195311/http://embedded.com/underthehood/207401418 |archive-date=2008-07-08 |author=David Carey |date=2008-04-22 |magazine=Embedded Systems Design}}&lt;/ref&gt; Similarly, an embedded system in an [[automobile]] provides a specific function as a subsystem of the car itself.

[[File:ESOM270 eSOM300 Computer on Modules.jpg|thumb|e-con Systems eSOM270 &amp; eSOM300 Computer on Modules]]
The program instructions written for embedded systems are referred to as [[firmware]], and are stored in read-only memory or [[flash memory]] chips. They run with limited computer hardware resources: little memory, small or non-existent keyboard or screen.&lt;!--[[User:Kvng/RTH]]--&gt;

===User interface===
[[File:MicroVGA TUI demoapp.jpg|thumb|Embedded system [[text user interface]] using MicroVGA&lt;ref group=&quot;nb&quot; name=&quot;MicroVGA&quot;&gt;For more details of MicroVGA see this [http://www.microvga.com/pdf/uvga-text-ds.pdf PDF].&lt;/ref&gt;]]

Embedded systems range from [[Headless system|no user interface]] at all, in systems dedicated only to one task, to complex [[Desktop operating system#Graphical user interfaces|graphical user interfaces]] that resemble modern computer desktop operating systems.
Simple embedded devices use [[Push-button|buttons]], [[LED]]s, graphic or character [[LCD]]s ([[Hitachi HD44780 LCD controller|HD44780 LCD]] for example) with a simple [[menu (computing)|menu system]].

More sophisticated devices that use a graphical screen with [[touch screen|touch]] sensing or screen-edge buttons provide flexibility while minimizing space used: the meaning of the buttons can change with the screen, and selection involves the natural behavior of pointing at what is desired. [[Mobile device|Handheld systems]] often have a screen with a &quot;joystick button&quot; for a pointing device.

Some systems provide user interface remotely with the help of a serial (e.g. [[RS-232]], [[USB]], [[I²C]], etc.) or network (e.g. [[Ethernet]]) connection. This approach gives several advantages: extends the capabilities of embedded system, avoids the cost of a display, simplifies [[Board support package|BSP]] and allows one to build a rich user interface on the PC. A good example of this is the combination of an [[Embedded HTTP server|embedded web server]] running on an embedded device (such as an [[IP camera]]) or a [[Router (computing)|network router]]. The user interface is displayed in a [[web browser]] on a PC connected to the device, therefore needing no software to be installed.

===Processors in embedded systems===
Examples of properties of typical embedded computers, when compared with general-purpose counterparts, are low power consumption, small size, rugged operating ranges, and low per-unit cost. This comes at the price of limited processing resources, which make them significantly more difficult to program and to interact with. However, by building intelligence mechanisms on top of the hardware, taking advantage of possible existing sensors and the existence of a network of embedded units, one can both optimally manage available resources at the unit and network levels as well as provide augmented functions, well beyond those available.&lt;ref name=&quot;Alippi2014&quot;&gt;C.Alippi: ''Intelligence for Embedded Systems.'' Springer, 2014, 283pp, {{ISBN|978-3-319-05278-6}}.&lt;/ref&gt; For example, intelligent techniques can be designed to manage power consumption of embedded systems.&lt;ref&gt;S. Mittal, &quot;[https://www.academia.edu/4186102/A_survey_of_techniques_for_improving_energy_efficiency_in_embedded_computing_systems A survey of techniques for improving energy efficiency in embedded computing systems]&quot;, IJCAET, 6(4), 440–459, 2014.&lt;/ref&gt;

Embedded processors can be broken into two broad categories. Ordinary microprocessors (μP) use separate integrated circuits for memory and peripherals. Microcontrollers (μC) have on-chip peripherals, thus reducing power consumption, size and cost. In contrast to the personal computer market, many different basic [[CPU architecture]]s are used since the software is custom-developed for an application and is not a commodity product installed by the end user. Both [[Von Neumann architecture|Von Neumann]], as well as various degrees of [[Harvard architecture]]s, are used. [[RISC]] as well as non-RISC processors are found. Word lengths vary from 4-bit to 64-bits and beyond, although the most typical remain 8/16-bit. Most architectures come in a large number of different variants and shapes, many of which are also manufactured by several different companies.

[[List of common microcontrollers|Numerous microcontrollers]] have been developed for embedded systems use. General-purpose microprocessors are also used in embedded systems, but generally, require more support circuitry than microcontrollers.

====Ready-made computer boards====
[[PC/104]] and PC/104+ are examples of standards for ''ready-made'' computer boards intended for small, low-volume embedded and ruggedized systems, mostly x86-based. These are often physically small compared to a standard PC, although still quite large compared to most simple (8/16-bit) embedded systems. They often use [[DOS]], [[Linux]], [[NetBSD]], or an embedded [[real-time operating system]] such as [[MicroC/OS-II]], [[QNX]] or [[VxWorks]]. Sometimes these boards use non-x86 processors.

In certain applications, where small size or power efficiency are not primary concerns, the components used may be compatible with those used in general-purpose x86 personal computers. Boards such as the VIA [[EPIA]] range help to bridge the gap by being PC-compatible but highly integrated, physically smaller or have other attributes making them attractive to embedded engineers. The advantage of this approach is that low-cost commodity components may be used along with the same software development tools used for general software development. Systems built in this way are still regarded as embedded since they are integrated into larger devices and fulfill a single role. Examples of devices that may adopt this approach are [[Automated teller machines|ATMs]] and [[arcade machines]], which contain code specific to the application.

However, most ready-made embedded systems boards are not PC-centered and do not use the ISA or PCI busses. When a [[system-on-a-chip]] processor is involved, there may be little benefit to having a standardized bus connecting discrete components, and the environment for both hardware and software tools may be very different.

One common design style uses a small system module, perhaps the size of a business card, holding high density [[Ball grid array|BGA]] chips such as an [[ARM architecture|ARM]]-based [[system-on-a-chip]] processor and peripherals, external [[flash memory]] for storage, and [[Dynamic random access memory|DRAM]] for runtime memory. The module vendor will usually provide boot software and make sure there is a selection of operating systems, usually including [[Linux]] and some real-time choices. These modules can be manufactured in high volume, by organizations familiar with their specialized testing issues, and combined with much lower volume custom mainboards with application-specific external peripherals.

Implementation of embedded systems has advanced so that they can easily be implemented with already-made boards that are based on worldwide accepted platforms. These platforms include, but are not limited to, [[Arduino]] and [[Raspberry Pi]].

====ASIC and FPGA solutions====
A common array for very-high-volume embedded systems is the [[system on a chip]] (SoC) that contains a complete system consisting of multiple processors, multipliers, caches and interfaces on a single chip. SoCs can be implemented as an [[application-specific integrated circuit]] (ASIC) or using a [[field-programmable gate array]] (FPGA).

===Peripherals===
[[File:SMSC LAN91C110 ethernet chip.jpg|thumb|A close-up of the SMSC LAN91C110 (SMSC 91x) chip, an embedded [[Ethernet]] chip]]

Embedded systems talk with the outside world via [[peripheral]]s, such as:
* Serial Communication Interfaces (SCI): [[RS-232]], [[RS-422]], [[RS-485]], etc.
* Synchronous Serial Communication Interface: [[I2C]], [[Serial Peripheral Interface Bus|SPI]], SSC and ESSI (Enhanced Synchronous Serial Interface)
* [[Universal Serial Bus]] (USB)
* Multi Media Cards (SD cards, Compact Flash, etc.)
* Networks: [[Ethernet]], [[LonWorks]], etc.
* [[Fieldbus]]es: [[Controller Area Network|CAN-Bus]], [[Local Interconnect Network|LIN-Bus]], [[PROFIBUS]], etc.
* Timers: [[Phase-locked loop|PLL]](s), Capture/Compare and [[Time Processing Unit]]s
* Discrete IO: aka [[General Purpose Input/Output]] (GPIO)
* Analog to Digital/Digital to Analog ([[Analog-to-digital converter|ADC]]/[[Digital-to-analog converter|DAC]])
* Debugging: [[JTAG]], [[In-System Programming|ISP]], [[Background Debug Mode interface|BDM]] Port, BITP, and DB9 ports.

===Tools===
As with other software, embedded system designers use [[compiler]]s, [[Assembly language|assemblers]], and [[debugger]]s to develop embedded system software. However, they may also use some more specific tools:
* In circuit debuggers or emulators (see next section).
* Utilities to add a checksum or [[Cyclic redundancy check|CRC]] to a program, so the embedded system can check if the program is valid.
* For systems using [[digital signal processing]], developers may use a math workbench to simulate the mathematics.
* System-level modeling and simulation tools help designers to construct simulation models of a system with hardware components such as [[processors]], [[memories]], [[Direct memory access|DMA]], [[Interface (computing)|interface]]s, buses and software behavior flow as a state diagram or flow diagram using configurable library blocks. Simulation is conducted to select the right components by performing power vs. performance trade-off, reliability analysis and bottleneck analysis. Typical reports that help a designer to make architecture decisions includes application latency, device throughput, device utilization, power consumption of the full system as well as device-level power consumption.
* A model-based development tool creates and simulates graphical data flow and UML state chart diagrams of components like digital filters, motor controllers, communication protocol decoding and multi-rate tasks.
* Custom compilers and linkers may be used to optimize specialized hardware.
* An embedded system may have its own special language or design tool, or add enhancements to an existing language such as [[Forth (programming language)|Forth]] or [[BASIC Stamp|Basic]].
* Another alternative is to add a [[real-time operating system]] or [[embedded operating system]]
* Modeling and code generating [[UML tool|tools]] often based on [[UML state machine|state machines]]

Software tools can come from several sources:
* Software companies that specialize in the embedded market
* Ported from the [[GNU]] software development tools
* Sometimes, development tools for a personal computer can be used if the embedded processor is a close relative to a common PC processor

As the complexity of embedded systems grows, higher-level tools and operating systems are migrating into machinery where it makes sense. For example, [[cellphone]]s, [[personal digital assistant]]s and other consumer computers often need significant software that is purchased or provided by a person other than the manufacturer of the electronics. In these systems, an open programming environment such as [[Linux]], [[NetBSD]], [[OSGi]] or [[Embedded Java]] is required so that the third-party software provider can sell to a large market.

Embedded systems are commonly found in consumer, cooking, industrial, automotive, and medical applications.
Some examples of embedded systems are MP3 players, mobile phones, video game consoles, digital cameras, DVD players, and GPS. Household appliances, such as microwave ovens, washing machines and dishwashers, include embedded systems to provide flexibility and efficiency.

==Debugging==
Embedded [[debugging]] may be performed at different levels, depending on the facilities available. The different metrics that characterize the different forms of embedded debugging are: does it slow down the main application, how close is the debugged system or application to the actual system or application, how expressive are the triggers that can be set for debugging (e.g., inspecting the memory when a particular [[program counter]] value is reached), and what can be inspected in the debugging process (such as, only memory, or memory and registers, etc.).

From simplest to most sophisticated they can be roughly grouped into the following areas:
* Interactive resident debugging, using the simple shell provided by the embedded operating system (e.g. Forth and Basic)
* External debugging using logging or serial port output to trace operation using either a monitor in flash or using a debug server like the [[Remedy Debugger]] that even works for heterogeneous [[Multi-core processor|multicore]] systems.
* An in-circuit debugger (ICD), a hardware device that connects to the microprocessor via a [[JTAG]] or [[Nexus (standard)|Nexus]] interface.&lt;ref&gt;{{Cite journal|last1=Tancreti|first1=Matthew|last2=Hossain|first2=Mohammad Sajjad|last3=Bagchi|first3=Saurabh|last4=Raghunathan|first4=Vijay|date=2011|title=Aveksha: A Hardware-software Approach for Non-intrusive Tracing and Profiling of Wireless Embedded Systems|journal=Proceedings of the 9th ACM Conference on Embedded Networked Sensor Systems|series=SenSys '11|location=New York, NY, USA|publisher=ACM|pages=288–301|doi=10.1145/2070942.2070972|isbn=9781450307185|s2cid=14769602}}&lt;/ref&gt; This allows the operation of the microprocessor to be controlled externally, but is typically restricted to specific debugging capabilities in the processor. 
* An [[in-circuit emulator]] (ICE) replaces the microprocessor with a simulated equivalent, providing full control over all aspects of the microprocessor.
* A complete [[emulator]] provides a simulation of all aspects of the hardware, allowing all of it to be controlled and modified, and allowing debugging on a normal PC. The downsides are expense and slow operation, in some cases up to 100 times slower than the final system.
* For SoC designs, the typical approach is to verify and debug the design on an FPGA prototype board. Tools such as Certus&lt;ref&gt;{{cite web|url=http://www.eejournal.com/archives/articles/20121030-tektronix/ | title=Tektronix Shakes Up Prototyping, Embedded Instrumentation Boosts Boards to Emulator Status| publisher=Electronic Engineering Journal | date= 2012-10-30|access-date=2012-10-30}}&lt;/ref&gt; are used to insert probes in the FPGA RTL that make signals available for observation. This is used to debug hardware, firmware and software interactions across multiple FPGA with capabilities similar to a logic analyzer.
* Software-only debuggers have the benefit that they do not need any hardware modification but have to carefully control what they record in order to conserve time and storage space.&lt;ref&gt;{{Cite journal|last1=Tancreti|first1=Matthew|last2=Sundaram|first2=Vinaitheerthan|last3=Bagchi|first3=Saurabh|last4=Eugster|first4=Patrick|date=2015|title=TARDIS: Software-only System-level Record and Replay in Wireless Sensor Networks|journal=Proceedings of the 14th International Conference on Information Processing in Sensor Networks|series=IPSN '15|location=New York, NY, USA|publisher=ACM|pages=286–297|doi=10.1145/2737095.2737096|isbn=9781450334754|s2cid=10120929}}&lt;/ref&gt;

Unless restricted to external debugging, the programmer can typically load and run software through the tools, view the code running in the processor, and start or stop its operation. The view of the code may be as [[High-level programming language|HLL]] [[source-code]], [[assembly code]] or mixture of both.

Because an embedded system is often composed of a wide variety of elements, the debugging strategy may vary. For instance, debugging a software- (and microprocessor-) centric embedded system is different from debugging an embedded system where most of the processing is performed by peripherals (DSP, FPGA, and co-processor).
An increasing number of embedded systems today use more than one single processor core. A common problem with multi-core development is the proper synchronization of software execution. In this case, the embedded system design may wish to check the data traffic on the busses between the processor cores, which requires very low-level debugging, at signal/bus level, with a [[logic analyzer]], for instance.

===Tracing===

Real-time operating systems ([[RTOS]]) often supports [[tracing (software)|tracing]] of operating system events. A graphical view is presented by a host PC tool, based on a recording of the system behavior. The trace recording can be performed in software, by the RTOS, or by special tracing hardware. RTOS tracing allows developers to understand timing and performance issues of the software system and gives a good understanding of the high-level system behaviors.

===Reliability===
Embedded systems often reside in machines that are expected to run continuously for years without errors, and in some cases recover by themselves if an error occurs. Therefore, the software is usually developed and tested more carefully than that for personal computers, and unreliable mechanical moving parts such as disk drives, switches or buttons are avoided.

Specific reliability issues may include:
* The system cannot safely be shut down for repair, or it is too inaccessible to repair. Examples include space systems, undersea cables, navigational beacons, bore-hole systems, and automobiles.
* The system must be kept running for safety reasons. &quot;Limp modes&quot; are less tolerable. Often backups are selected by an operator. Examples include aircraft navigation, reactor control systems, safety-critical chemical factory controls, train signals.
* The system will lose large amounts of money when shut down: Telephone switches, factory controls, bridge and elevator controls, funds transfer and market making, automated sales and service.

A variety of techniques are used, sometimes in combination, to recover from errors—both software bugs such as [[memory leak]]s, and also [[soft error]]s in the hardware:
* [[watchdog timer]] that resets the computer unless the software periodically notifies the watchdog subsystems with redundant spares that can be switched over to software &quot;limp modes&quot; that provide partial function
* Designing with a [[Trusted Computing Base]] (TCB) architecture&lt;ref&gt;{{cite journal |url=http://c59951.r51.cf2.rackcdn.com/5557-528-heiser.pdf |title=Your System is secure? Prove it! |first1=Gernot |last1=Heiser |date=December 2007 |volume=2 |issue=6 |pages=35–8 |journal=[[;login:]]}}&lt;/ref&gt; ensures a highly secure &amp; reliable system environment
* A [[hypervisor]] designed for embedded systems is able to provide secure encapsulation for any subsystem component so that a compromised software component cannot interfere with other subsystems, or privileged-level system software.&lt;ref&gt;{{cite journal|last1=Moratelli|first1=C|last2=Johann|first2=S|last3=Neves|first3=M|last4=Hessel|first4=F|title=Embedded virtualization for the design of secure IoT applications|journal=2016 International Symposium on Rapid System Prototyping (RSP)|pages=2–6|date=2016|url=https://ieeexplore.ieee.org/document/7909116|access-date=2 February 2018|doi=10.1145/2990299.2990301|isbn=9781450345354|s2cid=17466572}}&lt;/ref&gt; This encapsulation keeps faults from propagating from one subsystem to another, thereby improving reliability. This may also allow a subsystem to be automatically shut down and restarted on fault detection.
* [[Immunity Aware Programming]]

===High vs. low volume===
For high volume systems such as [[Digital audio player|portable music players]] or [[mobile phone]]s, minimizing cost is usually the primary design consideration. Engineers typically select hardware that is just “good enough” to implement the necessary functions.

For low-volume or prototype embedded systems, general-purpose computers may be adapted by limiting the programs or by replacing the operating system with a [[real-time operating system]].

==Embedded software architectures==
{{Main|Embedded software}}

In 1978 [[National Electrical Manufacturers Association]] released a standard for programmable microcontrollers, including almost any computer-based controllers, such as single board computers, numerical, and event-based controllers.

There are several different types of software architecture in common use today.

===Simple control loop===
In this design, the software simply has a [[loop (computing)|loop]]. The loop calls [[subroutine]]s, each of which manages a part of the hardware or software. Hence it is called a simple control loop or control loop.

===Interrupt-controlled system===
Some embedded systems are predominantly controlled by [[interrupt]]s. This means that tasks performed by the system are triggered by different kinds of events; an interrupt could be generated, for example, by a timer in a predefined frequency, or by a serial port controller receiving a byte.

These kinds of systems are used if event handlers need low latency, and the event handlers are short and simple. Usually, these kinds of systems run a simple task in a main loop also, but this task is not very sensitive to unexpected delays.

Sometimes the interrupt handler will add longer tasks to a queue structure. Later, after the interrupt handler has finished, these tasks are executed by the main loop. This method brings the system close to a multitasking kernel with discrete processes.

===Cooperative multitasking===
A non-preemptive multitasking system is very similar to the simple control loop scheme, except that the loop is hidden in an [[Application programming interface|API]].&lt;ref name=&quot;:0&quot; /&gt;&lt;ref name=&quot;Barr-glossary&quot; /&gt; The programmer defines a series of tasks, and each task gets its own environment to “run” in. When a task is idle, it calls an idle routine, usually called “pause”, “wait”, “yield”, “nop” (stands for ''no operation''), etc.

The advantages and disadvantages are similar to that of the control loop, except that adding new software is easier, by simply writing a new task, or adding to the queue.

===Preemptive multitasking or multi-threading===
In this type of system, a low-level piece of code switches between tasks or threads based on a timer (connected to an interrupt). This is the level at which the system is generally considered to have an &quot;operating system&quot; kernel. Depending on how much functionality is required, it introduces more or less of the complexities of managing multiple tasks running conceptually in parallel.

As any code can potentially damage the data of another task (except in larger systems using an [[Memory management unit|MMU]]) programs must be carefully designed and tested, and access to shared data must be controlled by some synchronization strategy, such as [[message queue]]s, [[semaphore (programming)|semaphores]] or a [[non-blocking synchronization]] scheme.
