==References==
{{reflist|30em}}

==External links==
{{commons|Andie MacDowell}}
* {{Twitter}}
* {{IMDb name|0000510}}

{{Navboxes
|title = Awards for Andie MacDowell
|list =
{{Honorary César}}
{{IndependentSpiritBestFemaleLead 1985–1999}}
{{Los Angeles Film Critics Association Award for Best Actress 1981-2000}}
{{Saturn Award for Best Actress}}
}}

{{Authority control}}

{{DEFAULTSORT:Macdowell, Andie}}
[[Category:1958 births]]
[[Category:Living people]]
[[Category:Actresses from South Carolina]]
[[Category:Actresses of British descent]]
[[Category:Female models from South Carolina]]
[[Category:American film actresses]]
[[Category:American people of English descent]]
[[Category:American people of French descent]]
[[Category:American people of Irish descent]]
[[Category:American people of Scottish descent]]
[[Category:American people of Welsh descent]]
[[Category:American television actresses]]
[[Category:César Honorary Award recipients]]
[[Category:Independent Spirit Award for Best Female Lead winners]]
[[Category:Independent Spirit Award winners]]
[[Category:People from Gaffney, South Carolina]]
[[Category:Winthrop University alumni]]
[[Category:20th-century American actresses]]
[[Category:21st-century American actresses]]
[[Category:L'Oréal people]]
[[Category:People from Arden, North Carolina]]
[[Category:Volpi Cup winners]]</text>
      <sha1>i2xl316rfa0z2ufothhml9vafpzougs</sha1>
    </revision>
  </page>
  <page>
    <title>Jakarta Servlet</title>
    <ns>0</ns>
    <id>43826</id>
    <revision>
      <id>990421080</id>
      <parentid>990407081</parentid>
      <timestamp>2020-11-24T11:13:43Z</timestamp>
      <contributor>
        <username>Frap</username>
        <id>612852</id>
      </contributor>
      <minor />
      <comment>/* Example */</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="18725" xml:space="preserve">{{short description|Jakarta EE programming language class}}
{{more citations needed|date=February 2014}}
{{Citation style|date=May 2016|details=Violates Wikipedia:External links: &quot;Wikipedia articles may include links to web pages outside Wikipedia (external links), but they should not normally be used in the body of an article.&quot;}}
{{Infobox software
| name                   = Jakarta Servlet
| title                  = 
| logo                   = 
| logo_size              = 
| author                 = [[Pavni Diwanji]]
| developer              = [[Eclipse Foundation]]
| released               = {{Start date and age|1996|12}}
| ver layout             = simple
| latest release version = [https://jakarta.ee/specifications/servlet/5.0/jakarta-servlet-spec-5.0.pdf 5.0]
| latest release date    = {{Start date and age|2020|9|7}}
| latest preview version = 
| programming language   = [[Java (programming language)|Java]]
| operating system       = 
| platform               = [[Jakarta EE|Jakarta EE 9]]
| size                   = 2.56 MB
| genre                  = [[Software component]] for [[Web API]]
| language count         = 
| license                = [[Eclipse Public License]]
| website                = {{URL|https://jakarta.ee/specifications/servlet/5.0/}}
}}

[[File:JSPLife.png|thumb|400px|Life of a [[JavaServer Pages|JSP]] file]]

A '''Jakarta Servlet''' (formerly Java Servlet) is a [[Java (programming language)|Java]] [[software component]] that extends the capabilities of a [[server (computing)|server]]. Although servlets can respond to many types of requests, they most commonly implement [[web container]]s for hosting [[web application]]s on [[web server]]s and thus qualify as a server-side servlet [[web API]]. Such web servlets are the [[Java (software platform)|Java]] counterpart to other [[dynamic web page|dynamic web content]] technologies such as [[PHP]] and [[ASP.NET]].

== Introduction ==
A Jakarta Servlet processes or stores a [[Java class]] in [[Jakarta EE]] that conforms to the Jakarta Servlet API,&lt;ref&gt;{{cite web|url=https://docs.oracle.com/javaee/7/api/javax/servlet/Servlet.html |title=Servlet (Java(TM) EE 7 Specification APIs)|work=oracle.com|accessdate=2018-07-25}}&lt;/ref&gt; a standard for implementing Java classes that respond to requests. Servlets could in principle communicate over any [[client–server model|client–server]] protocol, but they are most often used with [[Hypertext Transfer Protocol|HTTP]]. Thus &quot;servlet&quot; is often used as shorthand for &quot;HTTP servlet&quot;.&lt;ref name=&quot;r1&quot;&gt;{{cite web |url=http://www.novocode.com/doc/servlet-essentials/chapter1.html |title=Servlet Essentials - Chapter 1 |work=novocode.com |archiveurl=https://web.archive.org/web/20171218173656/http://www.novocode.com/doc/servlet-essentials/chapter1.html |archivedate=2017-12-18}}&lt;/ref&gt; Thus, a [[software developer]] may use a servlet to add [[dynamic web page|dynamic content]] to a [[web server]] using the [[Java platform]]. The generated content is commonly [[HTML]], but may be other data such as [[XML]] and more commonly, JSON. Servlets can maintain [[state (computer science)|state]] in [[session (computer science)|session]] variables across many server transactions by using [[HTTP cookie]]s, or [[URL mapping]].

The Jakarta Servlet API has, to some extent, been superseded by two standard Java technologies for web services: 
* the [[Jakarta RESTful Web Services]] (JAX-RS 2.0) useful for AJAX, JSON and REST services, and
* the [[Jakarta XML Web Services]] (JAX-WS) useful for [[SOAP]] [[Web Service]]s.

To deploy and run a servlet, a [[web container]] must be used. A web container (also known as a servlet container) is essentially the component of a web server that interacts with the servlets. The web container is responsible for managing the lifecycle of servlets, mapping a URL to a particular servlet and ensuring that the URL requester has the correct access rights.

The Servlet [[application programming interface|API]], contained in the [[Java package]] hierarchy {{Javadoc:EE|package=javax.servlet|javax/servlet}}, defines the expected interactions of the web container and a servlet.&lt;ref name=r1 /&gt;

A {{Javadoc:EE|javax/servlet|Servlet}} is an [[object (computer science)|object]] that receives a request and generates a response based on that request. The basic Servlet package defines Java objects to represent servlet requests and responses, as well as objects to reflect the servlet's configuration parameters and execution environment. The package {{Javadoc:EE|package=javax.servlet.http|javax/servlet/http}} defines [[HTTP]]-specific subclasses of the generic servlet elements, including session management objects that track multiple requests and responses between the web server and a client. Servlets may be packaged in a [[WAR (file format)|WAR file]] as a [[web application]].

Servlets can be generated automatically from [[Jakarta Server Pages]] (JSP) by the [[Jakarta Server Pages compiler]]. The difference between servlets and JSP is that servlets typically embed HTML inside Java code, while JSPs embed Java code in HTML. While the direct usage of servlets to generate HTML (as shown in the example below) has become rare, the higher level MVC web framework in Jakarta EE ([[Jakarta Server Faces|JSF]]) still explicitly uses the servlet technology for the low level request/response handling via the {{Javadoc:EE|javax/faces/webapp|FacesServlet}}. A somewhat older usage is to use servlets in conjunction with JSPs in a pattern called &quot;[[JSP model 2 architecture|Model 2]]&quot;, which is a flavor of the [[model–view–controller]].

The current version of Servlet is 4.0.&lt;ref&gt;https://jcp.org/en/jsr/detail?id=369&lt;/ref&gt;

== History ==
The Java Servlet API was first publicly announced at the inaugural [[JavaOne]] conference in May 1996.&lt;ref&gt;{{cite news |last1=Freedman |first1=Matt |date=1996-06-26 |df=mdy |title=JavaOne conference report |url=https://www.javaworld.com/article/2077172/java-se/javaone-conference-report.html |website=[[JavaWorld]]}}&lt;/ref&gt;&lt;ref&gt;{{cite conference |last1=Diwanji |first1=Pavani |last2=Connelly |first2=Dave |last3=Wagle |first3=Prasad |date=1996-05-29 |df=mdy |chapter=Java Server and Servlets |title=Servers and Server Extensions |conference=[[JavaOne]] 1996 |url=http://java.sun.com:80/javaone/javaone96/pres/ServExt.pdf |archiveurl=https://web.archive.org/web/20000816161328/http://java.sun.com/javaone/javaone96/pres/ServExt.pdf |archivedate=2000-08-16 |access-date=2020-02-01 |url-status=live }}&lt;/ref&gt; About two months after the announcements at the conference, the first public implementation was made available on the JavaSoft website. This was the first alpha of the Java Web Server (JWS; then known by its codename ''Jeeves'')&lt;ref&gt;{{cite news |last1=Chang |first1=Phil Inje | date=1997-07-01 |df=mdy |title=Interview: The Java Web Server team gives you the skinny |url=https://www.javaworld.com/article/2076980/interview--the-java-web-server-team-gives-you-the-skinny.html |website=[[JavaWorld]] |accessdate=2018-07-25}}&lt;/ref&gt; which would eventually be shipped as a product on June 5, 1997.&lt;ref&gt;{{cite news |last1=Chang |first1=Phil Inje | date=1997-06-01 |df=mdy |title=Java Web Server ships! |url=https://www.javaworld.com/article/2076965/java-web-server-ships-.html |website=[[JavaWorld]] |accessdate=2018-07-25}}&lt;/ref&gt;

In his blog on [[java.net]], Sun veteran and [[GlassFish]] lead Jim Driscoll details the history of servlet technology.&lt;ref&gt;{{cite web|url=https://community.oracle.com/blogs/driscoll/2005/12/10/servlet-history|title=Servlet History &amp;#124; community.oracle.com|date=2005-12-10|publisher=Weblogs.java.net|accessdate=2013-06-14}}&lt;/ref&gt; [[James Gosling]] first thought of servlets in the early days of [[Java (programming language)|Java]], but the concept did not become a product until December 1996 when Sun shipped JWS.&lt;ref name=&quot;Hunter200003&quot;&gt;{{cite conference |last1=Hunter |first1=Jason |date=March 2000 |chapter=Servlet Timeline |title=Beyond Java Servlet Programming |conference=O'Reilly Conference on Java |url=ftp://ftp.ora.com/pub/conference/java/Hunter_J/orabeyond.ppt |publisher=[[O'Reilly Media]]}}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Java Web Server |url=http://jserv.javasoft.com:80/products/java-server/webserver/index.html |archiveurl=https://web.archive.org/web/19980111053338/http://jserv.javasoft.com/products/java-server/webserver/index.html |archivedate=1998-01-11 |website=Javasoft |publisher=[[Sun Microsystems]] |access-date=2020-02-01 |url-status=live }}&lt;/ref&gt;&lt;ref&gt;{{cite web |title=Java Web Server(tm) |url=http://sun.com:80/software/jwebserver/index.html |archiveurl=https://web.archive.org/web/20020206000714/http://sun.com/software/jwebserver/index.html |archivedate=2002-02-06 |publisher=[[Sun Microsystems]] |access-date=2020-02-01 |url-status=live }}&lt;/ref&gt; This was before what is now the [[Jakarta EE]] was made into a specification.

The Servlet1 specification was created by Pavni Diwanji&lt;ref&gt;{{cite web|title=Pavni Diwanji|url=https://www.fosi.org/people/pavni-diwanji/|website=Family Online Safety Institute|accessdate=12 November 2016}}&lt;/ref&gt;&lt;ref&gt;{{cite patent |country=US |number=5928323 |status=patent |title=Apparatus and method for dynamically generating information with server-side software objects |pubdate=1999-07-27 |gdate=1999-07-27 |fdate=1997-03-28 |pridate=1996-05-30 |inventor1-last=Gosling |inventor1-first=James A. |inventorlink1=James Gosling |inventor2-last=Diwanji |inventor2-first=Pavni |inventorlink2= |inventor3-last=Connelly |inventor3-first=David W. |inventorlink3= |assign1=[[Sun Microsystems]] |class= |url=}}&lt;/ref&gt; while she worked at [[Sun Microsystems]], with version 1.0 finalized in June 1997. Starting with version 2.2, the specification was developed under the [[Java Community Process]].

{| class=&quot;wikitable&quot;
|+ Servlet API history
! Servlet API version !! Released !! Specification !! Platform !! Important Changes
|-
| Jakarta Servlet 5.0.0 M1 || Jun 12, 2020 || [https://jakarta.ee/specifications/servlet/5.0/ 5.0] || Jakarta EE 9 || API moved from package {{code|javax.servlet}} to {{code|jakarta.servlet}}
|-
| Jakarta Servlet 4.0.3 || Aug 13, 2019 || [https://jakarta.ee/specifications/servlet/4.0/ 4.0] || Jakarta EE 8 || Renamed from &quot;Java&quot; trademark
|-
| Java Servlet 4.0 || Sep 2017 || [https://jcp.org/en/jsr/detail?id=369 JSR 369] || Java EE 8 || [[HTTP/2]]
|-
| Java Servlet 3.1 || May 2013 || [https://jcp.org/en/jsr/detail?id=340 JSR 340] || Java EE 7 || Non-blocking I/O, HTTP protocol upgrade mechanism ([[WebSocket]])&lt;ref&gt;{{cite web|url=https://blogs.oracle.com/arungupta/entry/what_s_new_in_servlet|title=What's new in Servlet 3.1 ? - Java EE 7 moving forward (Arun Gupta, Miles to go ...)|work=oracle.com|accessdate=22 November 2016}}&lt;/ref&gt;
|-
| Java Servlet 3.0 || [https://www.infoworld.com/article/2077995/java-concurrency-asynchronous-processing-support-in-servlet-3-0.html December 2009] || [https://jcp.org/en/jsr/detail?id=315 JSR 315] || Java EE 6, Java SE 6 || Pluggability, Ease of development, Async Servlet, Security, File Uploading
|-
| Java Servlet 2.5 || [https://www.infoworld.com/article/2071393/new-features-added-to-servlet-2-5.html September 2005] || JSR 154 || Java EE 5, Java SE 5 || Requires Java SE 5, supports annotation
|-
| Java Servlet 2.4 || [https://www.infoworld.com/article/2073323/servlet-2-4--what-s-in-store.html November 2003] || [https://jcp.org/en/jsr/detail?id=154 JSR 154] || J2EE 1.4, J2SE 1.3 || web.xml uses XML Schema
|-
| Java Servlet 2.3 || [https://www.infoworld.com/article/2074918/servlet-2-3--new-features-exposed.html August 2001]|| [https://jcp.org/en/jsr/detail?id=53 JSR 53] || J2EE 1.3, J2SE 1.2 || Addition of &lt;code&gt;Filter&lt;/code&gt;
|-
| Java Servlet 2.2 || [https://www.infoworld.com/article/2076518/what-s-new-in-java-servlet-api-2-2-.html August 1999]|| [https://jcp.org/en/jsr/detail?id=902 JSR 902], [https://jcp.org/en/jsr/detail?id=903 JSR 903] || J2EE 1.2, J2SE 1.2 || Becomes part of J2EE, introduced independent web applications in .war files
|-
| Java Servlet 2.1 || [https://www.infoworld.com/article/2076838/introducing-the-new-servlet-api-2-1.html November 1998] || [https://web.archive.org/web/20090611171402/http://java.sun.com/products/servlet/2.1/servlet-2.1.pdf 2.1a] || Unspecified || First official specification, added &lt;code&gt;RequestDispatcher&lt;/code&gt;, &lt;code&gt;ServletContext&lt;/code&gt;
|-
| Java Servlet 2.0 || December 1997 || {{n/a}} || JDK 1.1 || Part of April 1998 Java Servlet Development Kit 2.0&lt;ref&gt;{{cite book |last1=Crawford |first1=William |last2=Hunter |first2=Jason |date=November 1998 |chapter=Preface |title=Java Servlet Programming |edition=1st |publisher=[[O'Reilly Media]] |page=ix–x |isbn=978-1-56592-391-1 |quote=We cover Version 2.0 of the Servlet API, which was introduced as part of the Java Web Server 1.1 in December 1997 and clarified by the release of the Java Servlet Development Kit 2.0 in April 1998. |url-access=registration |url=https://archive.org/details/javaservletprogr00hunt }}&lt;/ref&gt;
|-
| Java Servlet 1.0 || December 1996|| {{n/a}} || || Part of June 1997 Java Servlet Development Kit (JSDK) 1.0&lt;ref name=&quot;Hunter200003&quot;/&gt;
|}

== Life cycle of a servlet ==
Three methods are central to the life cycle of a servlet. These are &lt;code&gt;init()&lt;/code&gt;, &lt;code&gt;service()&lt;/code&gt;, and &lt;code&gt;destroy()&lt;/code&gt;.
They are implemented by every servlet and are invoked at specific times by the server.

* During initialization stage of the servlet [[object lifetime|life cycle]], the web container initializes the servlet instance by calling the [http://docs.oracle.com/javaee/7/api/javax/servlet/Servlet.html#init &lt;code&gt;init()&lt;/code&gt;] method, passing an object implementing the [http://docs.oracle.com/javaee/7/api/javax/servlet/ServletConfig.html &lt;code&gt;javax.servlet.ServletConfig&lt;/code&gt;] interface. This configuration object allows the servlet to access [[attribute–value pair|name-value]] initialization parameters from the web application.
* After initialization, the servlet instance can service client requests. Each [[HTTP request#Request message|request]] is serviced in its own separate thread. The web container calls the &lt;code&gt;service()&lt;/code&gt; method of the servlet for every request. The &lt;code&gt;service()&lt;/code&gt; method determines the kind of request being made and dispatches it to an appropriate method to handle the request. The developer of the servlet must provide an implementation for these methods. If a request is made for a method that is not implemented by the servlet, the method of the parent class is called, typically resulting in an error being returned to the requester.
* Finally, the web container calls the &lt;code&gt;destroy()&lt;/code&gt; method that takes the servlet out of service. The &lt;code&gt;destroy()&lt;/code&gt; method, like &lt;code&gt;init()&lt;/code&gt;, is called only once in the lifecycle of a servlet.

The following is a typical user scenario of these methods.
# Assume that a user requests to visit a [[uniform resource locator|URL]].
#* The browser then generates an HTTP request for this URL.
#* This request is then sent to the appropriate server.
# The HTTP request is received by the web server and forwarded to the servlet container.
#* The container maps this request to a particular servlet.
#* The servlet is dynamically retrieved and loaded into the address space of the container.
# The container invokes the &lt;code&gt;init()&lt;/code&gt; method of the servlet.
#* This method is invoked only when the servlet is first loaded into memory.
#* It is possible to pass initialization parameters to the servlet so that it may configure itself.
# The container invokes the &lt;code&gt;service()&lt;/code&gt; method of the servlet.
#* This method is called to process the HTTP request.
#* The servlet may read data that has been provided in the HTTP request.
#* The servlet may also formulate an HTTP response for the client.
# The servlet remains in the container's address space and is available to process any other HTTP requests received from clients.
#* The &lt;code&gt;service()&lt;/code&gt; method is called for each HTTP request.
# The container may, at some point, decide to unload the servlet from its memory.
#* The algorithms by which this decision is made are specific to each container.
# The container calls the servlet's &lt;code&gt;destroy()&lt;/code&gt; method to relinquish any resources such as file handles that are allocated for the servlet; important data may be saved to a persistent store.
# The memory allocated for the servlet and its objects can then be garbage collected.

== Example ==
The following example servlet prints how many times its &lt;code&gt;service()&lt;/code&gt; method was called.

Note that &lt;code&gt;HttpServlet&lt;/code&gt; is a subclass of &lt;code&gt;GenericServlet&lt;/code&gt;, an implementation of the &lt;code&gt;Servlet&lt;/code&gt; interface.

The &lt;code&gt;service()&lt;/code&gt; method of &lt;code&gt;HttpServlet&lt;/code&gt; class dispatches requests to the methods &lt;code&gt;doGet()&lt;/code&gt;, &lt;code&gt;doPost()&lt;/code&gt;, &lt;code&gt;doPut()&lt;/code&gt;, &lt;code&gt;doDelete()&lt;/code&gt;, and so on; according to the HTTP request. In the example below &lt;code&gt;service()&lt;/code&gt; is overridden and does not distinguish which HTTP request method it serves.
&lt;syntaxhighlight lang=&quot;java&quot;&gt;
import java.io.IOException;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServletLifeCycleExample extends HttpServlet {

    private Integer sharedCounter;

    @Override
    public void init(final ServletConfig config) throws ServletException {
        super.init(config);
        getServletContext().log(&quot;init() called&quot;);
        sharedCounter = 0;
    }

    @Override
    protected void service(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {
        getServletContext().log(&quot;service() called&quot;);
        int localCounter;

        synchronized (sharedCounter) {
              sharedCounter++;
              localCounter = sharedCounter;
        }

        response.getWriter().write(&quot;Incrementing the count to &quot; + localCounter);  // accessing a local variable
    }

    @Override
    public void destroy() {
        getServletContext().log(&quot;destroy() called&quot;);
    }
}
&lt;/syntaxhighlight&gt;

== Container servers ==
The specification for Servlet technology has been implemented in many products. See a list of implementations on the [[web container]] page.

== References ==
{{Reflist}}

== External links ==
* {{Official website}}
* [http://www.servlets.com/ Servlets.com]

{{Jakarta EE}}
{{Web interfaces}}

[[Category:Articles with example Java code]]
[[Category:Java enterprise platform|Servlet]]
[[Category:Java specification requests|Servlet]]</text>
      <sha1>bki9ahi2chagzkkn6xg01kv2bxki12z</sha1>
    </revision>
  </page>
  <page>
    <title>179</title>
    <ns>0</ns>
    <id>43829</id>
    <revision>
      <id>952031326</id>
      <parentid>893058140</parentid>
      <timestamp>2020-04-20T06:42:05Z</timestamp>
      <contributor>
        <username>Llywrch</username>
        <id>5094</id>
      </contributor>
      <minor />
      <comment>typo</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2414" xml:space="preserve">{{Use mdy dates|date=February 2011}}
{{Year dab|179}}
{{Refimprove|date=April 2019}}
{{Year nav|179}}
{{M1 year in topic}}
Year '''179''' ('''[[Roman numerals|CLXXIX]]''') was a [[common year starting on Thursday]] (link will display the full calendar) of the [[Julian calendar]]. At the time, it was known as the '''Year of the Consulship of Aurelius and Veru''' (or, less frequently, '''year 932 ''[[Ab urbe condita]]'''''). The denomination 179 for this year has been used since the early medieval period, when the [[Anno Domini]] [[calendar era]] became the prevalent method in Europe for naming years.

== Events ==
=== By place ===
==== Roman empire ====
* The [[castra|Roman fort]] Castra Regina (&quot;fortress by the [[Regen river]]&quot;) is built at [[Regensburg]], on the right bank of the [[Danube]] in [[Germany]].
* [[Roman legionary|Roman legionaries]] of [[Legio II Adiutrix|Legio II ''Adiutrix'']] engrave on the rock of the [[Trenčín]] Castle ([[Slovakia]]) the name of the town ''Laugaritio'', marking the northernmost point of Roman presence in that part of [[Europe]].
* [[Marcus Aurelius]] drives the [[Marcomanni]] over the Danube and reinforces the border. To repopulate and rebuild a devastated [[Pannonia]], [[Ancient Rome|Rome]] allows the first German colonists to enter territory controlled by the [[Roman Empire]].

==== Asia ====
* [[Abgar IX of Osroene|Abgar IX the Great]] becomes King of [[Edessa, Mesopotamia|Edessa]].
* [[Gogukcheon of Goguryeo|Gogukcheon]] succeeds his father Shindae as King of [[Goguryeo]].&lt;ref&gt;{{cite web |title=List of Rulers of Korea |url=https://www.metmuseum.org/toah/hd/koru/hd_koru.htm |website=www.metmuseum.org |accessdate=18 April 2019}}&lt;/ref&gt;
* [[Han Dynasty]] [[China]]: The full title of the ''[[Nine Chapters on the Mathematical Art]]'' appears on two bronze standard measures dated to this year, yet there is speculation that the same book existed beforehand only under different titles. In the 3rd century, [[Liu Hui]] would provide commentary on this important early Chinese mathematical treatise.

== Births ==
* [[Pang Tong]], adviser to the [[Han dynasty]] warlord [[Liu Bei]] (d. [[214]])
* [[Sima Yi]], general and regent of the [[Cao Wei]] state in the [[Three Kingdoms]] period (d. [[251]])

== Deaths ==
* [[Myeongnim Dap-bu]], [[Goguryeo]] prime minister (b. [[AD 67]])

== References ==
{{Reflist}}

{{DEFAULTSORT:179}}
[[Category:179| ]]</text>
      <sha1>jjolrvifnmthl66fqli4hkmo3mxoa24</sha1>
    </revision>
  </page>
  <page>
    <title>178</title>
    <ns>0</ns>
    <id>43830</id>
    <revision>
      <id>982234562</id>
      <parentid>982234534</parentid>
      <timestamp>2020-10-06T22:41:33Z</timestamp>
      <contributor>
        <username>ClueBot NG</username>
        <id>13286072</id>
      </contributor>
      <minor />
      <comment>Reverting possible vandalism by [[Special:Contribs/74.214.51.75|74.214.51.75]] to version by Histrydude. [[WP:CBFP|Report False Positive?]] Thanks, [[WP:CBNG|ClueBot NG]]. (3791078) (Bot)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1577" xml:space="preserve">{{Use mdy dates|date=February 2011}}
{{Year dab|178}}
{{unreferenced|date=July 2016}}
{{Year nav|178}}
{{M1 year in topic}}
Year '''178''' ('''[[Roman numerals|CLXXVIII]]''') was a [[common year starting on Wednesday]] (link will display the full calendar) of the [[Julian calendar]]. At the time, it was known as the '''Year of the Consulship of Scipio and Rufus''' (or, less frequently, '''year 931 ''[[Ab urbe condita]]'''''). The denomination 178 for this year has been used since the early medieval period, when the [[Anno Domini]] [[calendar era]] became the prevalent method in Europe for naming years.

== Events ==
&lt;onlyinclude&gt;

=== By place ===

==== Roman Empire ====
* [[Bruttia Crispina]] marries [[Commodus]], and receives the title of ''[[Augusta (honorific)|Augusta]]''.
* Emperor [[Marcus Aurelius]] and his son Commodus arrive at [[Carnuntum]] in [[Pannonia]], and travel to the [[Danube]] to fight against the [[Marcomanni]].

==== Asia ====
* Last (7th) year of ''Xiping'' era and start of ''Guanghe'' era of the Chinese [[Han Dynasty]].
* In India, the decline of the [[Kushan Empire]] begins.  The [[Sassanides]] take over [[Central Asia]].

==== Religion ====
* The [[Montanism|Montanist]] [[heresy]] is condemned for the first time.
&lt;/onlyinclude&gt;

== Births ==
* [[Lü Meng]], general of the [[Eastern Wu]] state in the [[Three Kingdoms]] period (d. [[220]])

== Deaths ==
* S. Caecilia, [[martyr]] in [[Rome]]
* [[Empress Song (Han dynasty)|Empress Song]], [[Han dynasty]] empress
