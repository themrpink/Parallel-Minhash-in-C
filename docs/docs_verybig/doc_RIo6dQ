===Illustrations===
* Gerbig-Fabel, Marco. &quot;Photographic artefacts of war 1904–1905: the Russo-Japanese war as transnational media event.&quot; ''European Review of History—Revue européenne d'histoire'' 15.6 (2008): 629–642.
* Saaler, Sven und Inaba Chiharu (Hg.). ''Der Russisch-Japanische Krieg 1904/05 im Spiegel deutscher Bilderbogen'', Deutsches Institut für Japanstudien Tokyo, (2005).
* Sharf, Frederick A. and James T. Ulak, eds. ''A Well-Watched War: Images from the Russo-Japanese Front, 1904–1905'' (Newbury, MA, 2000), the catalogue of the show at the Sackler Gallery in Washington, DC, 
* {{cite book |last=Tyler |first=Sydney |year=1905 |title=The Japan-Russia war: an illustrated history of the war in the Far East |location=Philadelphia |publisher=P. W. Ziegler |url=https://archive.org/details/japanrussiawaril00tyle/page/n4}}

===Historiography===
* Hamby, Joel E. &quot;Striking the Balance: Strategy and Force in the Russo-Japanese War.&quot; ''Armed Forces &amp; Society'' 30.3 (2004): 325–356.
* Seager, Robert. ''Alfred Thayer Mahan: The Man And His Letters''. (1977) {{ISBN|0-87021-359-8}}.
* van der Oye, David Schimmelpenninck. &quot;Rewriting the Russo-Japanese War: A Centenary Retrospective.&quot; ''The Russian Review'' 67.1 (2008): 78–87. [http://www.academia.edu/download/49091140/Rewriting_the_Russo-Japanese_War-_A_Centenary_Retrospective.pdf online]
* {{cite book |editor-last1=Wolff |editor-first1=David |editor-last2=Marks |editor-first2=Steven G. |editor-last3=Menning |editor-first3=Bruce W. |editor-last4=Schimmelpenninck van der Oye |editor-first4=David |editor-last5=Steinberg |editor-first5=John W. |editor-last6=Shinji |editor-first6=Yokote |display-editors=1 |year=2006 |title=The Russo-Japanese War in Global Perspective: World War Zero |volume=II |series=History of Warfare/40 |location=Leiden |publisher=Brill |isbn=978-900415416-2 |lccn=2004062918 |ref=Wolff et al.2006 |url=https://books.google.com/books?id=xlg0lM8f9Y4C }}
* Won-soo, Kim. &quot;Trends in the Study of the Russo-Japanese War in Korea and Future Tasks-Third-party perspective on the origins of the war.&quot; ''International Journal of Korean History'' 7 (2005): 1-28. [http://ijkh.khistory.org/upload/pdf/7_01.pdf online]

== External links ==
{{Commons category|Russo-Japanese War}}
* {{cite EB1911|wstitle=Russo-Japanese War |volume=23 |short=x}}
* {{cite web |url=http://eiga9.altervista.org/chronology/chronology1904.html |title=Chronology of Japanese Cinema: 1904 |last1=da Silva |first1=Joaquín |date=29 April 2016 |publisher=EigaNove}}
* [http://www.russojapanesewar.com/ RussoJapaneseWar.com], Russo-Japanese War research society.
* [http://www.bfcollection.net/fast/rjmain.html BFcollection.net], Database of Russian Army Jewish soldiers injured, killed, or missing in action from the war.
* [http://www.lib.byu.edu/~rdh/wwi/1914&amp;nbsp;m/portsmouth.html BYU.edu], Text of the Treaty of Portsmouth:.
* [http://flot.com/history/steemfleet/index.htm Flot.com], Russian Navy history of war.
* [http://frontiers.loc.gov/intldl/mtfhtml/mfpercep/rj_mod.html Frontiers.loc.gov], Russo-Japanese Relations in the Far East. Meeting of Frontiers ([[Library of Congress]])
* [http://www.csmonitor.com/2005/1230/p04s01-woap.html CSmonitor.com], Treaty of Portsmouth now seen as global turning point from the ''[[Christian Science Monitor]]'', by Robert Marquand, 30 December 2005.
* {{Cite NSRW|wstitle=Russo-Japanese War, The |short=x}}
* [http://www.stanford.edu/class/slavgen194a/na_sopkakh/index.htm Stanford.edu], Lyrics, translation and melody of the song &quot;On the hills of Manchuria&quot; (''Na sopkah Manchzhurii'').
* [https://maps.google.com/maps/ms?ie=UTF8&amp;t=h&amp;om=0&amp;oe=UTF8&amp;msa=0&amp;msid=105073304682538879946.000434d5252276702c956&amp;dg=feature Google Map with battles of Russo-Japanese War and other important events.]
* See more Russo-Japanese War Maps [https://persuasivemaps.library.cornell.edu/browse-subject at the Persuasive Cartography, The PJ Mode Collection], [[Cornell University Library]]

{{JapanEmpireNavbox}}
{{Russian Conflicts}}
{{Great power diplomacy}}
{{Kuril Islands}}
{{Authority control}}

[[Category:Russo-Japanese War| ]]
[[Category:1904 in Japan]]
[[Category:1904 in the Russian Empire]]
[[Category:1905 in Japan]]
[[Category:1905 in the Russian Empire]]
[[Category:Conflicts in 1904]]
[[Category:Conflicts in 1905]]
[[Category:History of Korea]]
[[Category:History of Manchuria]]
[[Category:Wars involving Japan]]
[[Category:Wars involving Russia]]
[[Category:Japan–Russia military relations]]</text>
      <sha1>oodz7uguv5nhwdh4nvdmocm3ksih5m1</sha1>
    </revision>
  </page>
  <page>
    <title>Polynomial time</title>
    <ns>0</ns>
    <id>44576</id>
    <redirect title="Time complexity" />
    <revision>
      <id>340522570</id>
      <parentid>336939875</parentid>
      <timestamp>2010-01-28T13:35:42Z</timestamp>
      <contributor>
        <username>EmilJ</username>
        <id>94981</id>
      </contributor>
      <comment>better target</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="415" xml:space="preserve">#REDIRECT [[time complexity#Polynomial time]]

[[ca:Temps polinòmic]]
[[da:Polynomiel tid]]
[[de:Polynomialzeit]]
[[es:Tiempo polinómico]]
[[eo:Polinoma tempo]]
[[ko:다항 시간]]
[[he:סיבוכיות זמן#זמן ריצה פולינומי]]
[[nl:Polynomiale tijd]]
[[ja:多項式時間]]
[[pl:Algorytm wielomianowy]]
[[sr:Полиномијално време]]
[[tr:Polinomsal zaman]]
[[zh:多項式時間]]</text>
      <sha1>smo5k876gkles2f0lzdwtss3gtjy8cf</sha1>
    </revision>
  </page>
  <page>
    <title>Big O notation</title>
    <ns>0</ns>
    <id>44578</id>
    <revision>
      <id>991576129</id>
      <parentid>990404068</parentid>
      <timestamp>2020-11-30T19:52:10Z</timestamp>
      <contributor>
        <ip>31.205.253.28</ip>
      </contributor>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="56560" xml:space="preserve">{{short description|Notation describing limiting behavior}}
{{Order-of-approx}}
[[File:Big-O-notation.png|300px|thumb|Example of Big O notation: {{color|#ff0000|''f''(''x'')}} ∈
O({{color|#0000ff|''g''(''x'')}}) as there exists ''c''&amp;nbsp;&gt;&amp;nbsp;0 (e.g., ''c''&amp;nbsp;=&amp;nbsp;1) and ''x''&lt;sub&gt;0&lt;/sub&gt; (e.g., ''x''&lt;sub&gt;0&lt;/sub&gt;&amp;nbsp;=&amp;nbsp;5) such that {{color|#ff0000|''f''(''x'')}}&amp;nbsp;≤&amp;nbsp;''c''{{color|#0000ff|''g''(''x'')}} whenever ''x''&amp;nbsp;≥&amp;nbsp;''x''&lt;sub&gt;0&lt;/sub&gt;.]]

'''Big O notation''' is a mathematical notation that describes the [[asymptotic analysis|limiting behavior]] of a [[function (mathematics)|function]] when the [[Argument of a function|argument]] tends towards a particular value or infinity. Big O is a member of a family of notations invented by [[Paul Gustav Heinrich Bachmann|Paul Bachmann]],&lt;ref name=Bachmann /&gt; [[Edmund Landau]],&lt;ref name=Landau /&gt; and others, collectively called '''Bachmann–Landau notation''' or '''asymptotic notation'''.

In [[computer science]], big O notation is used to [[Computational complexity theory|classify algorithms]] according to how their run time or space requirements grow as the input size grows.&lt;ref name=quantumcomplexity&gt;{{cite web|last1=Mohr|first1=Austin|title=Quantum Computing in Complexity Theory and Theory of Computation|url=http://www.austinmohr.com/Work_files/complexity.pdf|accessdate=7 June 2014|page=2}}&lt;/ref&gt;  In [[analytic number theory]], big O notation is often used to express a bound on the difference between an [[arithmetic function|arithmetical function]] and a better understood approximation; a famous example of such a difference is the remainder term in the [[prime number theorem]].

Big O notation characterizes functions according to their growth rates: different functions with the same growth rate may be represented using the same O notation.

The letter O is used because the growth rate of a function is also referred to as the '''order of the function'''.  A description of a function in terms of big O notation usually only provides an [[upper bound]] on the growth rate of the function. Associated with big O notation are several related notations, using the symbols {{math|''o'', Ω, ω, and Θ}}, to describe other kinds of bounds on asymptotic growth rates.

Big O notation is also used in many other fields to provide similar estimates.

== Formal definition ==
Let {{math|''f''}} be a [[Real number|real]] or [[Complex number|complex]] valued function and {{math|''g''}} a real valued function. Let both functions be defined on some [[Bounded set|unbounded]] [[subset]] of the positive [[real number]]s, and &lt;math&gt;g(x)&lt;/math&gt; be strictly positive for all large enough values of {{math|''x''}}.&lt;ref name=LandauO&gt;{{cite book |first=Edmund |last=Landau |author-link=Edmund Landau |title=Handbuch der Lehre von der Verteilung der Primzahlen |publisher=B.G. Teubner |year=1909 |location=Leipzig |trans-title=Handbook on the theory of the distribution of the primes |language=de |page=31 | url=https://archive.org/stream/handbuchderlehre01landuoft#page/31/mode/2up}}&lt;/ref&gt; One writes

:&lt;math&gt;f(x) = O\bigl( g(x)\bigr)\quad\text{ as }x\to\infty&lt;/math&gt;

if the [[absolute value]] of &lt;math&gt;f(x)&lt;/math&gt; is at most a positive constant multiple of &lt;math&gt;g(x)&lt;/math&gt; for all sufficiently large values of {{math|''x''}}. That is, &lt;math&gt;f(x) =O\bigl(g(x)\bigr)&lt;/math&gt; if there exists a positive real number {{math|''M''}} and a real number {{math|''x''&lt;sub&gt;0&lt;/sub&gt;}} such that

:&lt;math&gt;|f(x)| \le M g(x) \quad \text{ for all } x \ge x_0.&lt;/math&gt;

In many contexts, the assumption that we are interested in the growth rate as the variable {{math|''x''}} goes to infinity is left unstated, and one writes more simply that

:&lt;math&gt;f(x) = O\bigl( g(x) \bigr).&lt;/math&gt;

The notation can also be used to describe the behavior of {{math|''f''}} near some real number {{math|''a''}} (often, {{nowrap|{{math|''a'' {{=}} 0}}):}} we say

:&lt;math&gt;f(x) = O\bigl( g(x) \bigr)\quad\text{ as }x \to a&lt;/math&gt;

if there exist positive numbers &lt;math&gt;\delta&lt;/math&gt; and {{math|''M''}} such that for all {{math|''x''}} with  &lt;math&gt;0 &lt; |x-a| &lt; \delta&lt;/math&gt;,

:&lt;math&gt;|f(x)| \le M g(x).&lt;/math&gt;

As {{math|''g''(''x'')}} is chosen to be non-zero for values of {{math|''x''}} [[Mathematical jargon#sufficiently large|sufficiently close]] to {{math|''a''}}, both of these definitions can be unified using the [[limit superior]]:

:&lt;math&gt;f(x) = O\bigl( g(x) \bigr) \quad \text{ as } x \to a&lt;/math&gt;

if
:&lt;math&gt;\limsup_{x\to a} \frac{\left|f(x)\right|}{g(x)} &lt; \infty.&lt;/math&gt; &lt;!-- These absolute value bars may be left out. --&gt;

== Example ==
In typical usage the {{math|''O''}} notation is asymptotical, that is, it refers to very large {{math|''x''}}.  In this setting, the contribution of the terms that grow &quot;most quickly&quot; will eventually make the other ones irrelevant. As a result, the following simplification rules can be applied:
*If {{math|''f''(''x'')}} is a sum of several terms, if there is one with largest growth rate, it can be kept, and all others omitted.
*If {{math|''f''(''x'')}} is a product of several factors, any constants (terms in the product that do not depend on {{math|''x''}}) can be omitted.
For example, let {{math|''f''(''x'') {{=}} 6''x''&lt;sup&gt;4&lt;/sup&gt; &amp;minus; 2''x''&lt;sup&gt;3&lt;/sup&gt; + 5}}, and suppose we wish to simplify this function, using {{math|''O''}} notation, to describe its growth rate as {{math|''x''}} approaches infinity. This function is the sum of three terms: {{math|6''x''&lt;sup&gt;4&lt;/sup&gt;}}, {{math|−2''x''&lt;sup&gt;3&lt;/sup&gt;}}, and {{math|5}}. Of these three terms, the one with the highest growth rate is the one with the largest exponent as a function of {{math|''x''}}, namely {{math|6''x''&lt;sup&gt;4&lt;/sup&gt;}}. Now one may apply the second rule: {{math|6''x''&lt;sup&gt;4&lt;/sup&gt;}} is a product of {{math|6}} and {{math|''x''&lt;sup&gt;4&lt;/sup&gt;}} in which the first factor does not depend on {{math|''x''}}. Omitting this factor results in the simplified form {{math|''x''&lt;sup&gt;4&lt;/sup&gt;}}. Thus, we say that {{math|''f''(''x'')}} is a &quot;big O&quot; of {{math|''x''&lt;sup&gt;4&lt;/sup&gt;}}. Mathematically, we can write {{math|''f''(''x'') {{=}} ''O''(''x''&lt;sup&gt;4&lt;/sup&gt;)}}.
One may confirm this calculation using the formal definition: let {{math|''f''(''x'') {{=}} 6''x''&lt;sup&gt;4&lt;/sup&gt; − 2''x''&lt;sup&gt;3&lt;/sup&gt; + 5}} and {{math|''g''(''x'') {{=}} ''x''&lt;sup&gt;4&lt;/sup&gt;}}. Applying the [[#Formal definition|formal definition]] from above, the statement that {{math|''f''(''x'') {{=}} ''O''(''x''&lt;sup&gt;4&lt;/sup&gt;)}} is equivalent to its expansion,
:&lt;math&gt;|f(x)| \le  M x^4&lt;/math&gt;
for some suitable choice of {{math|''x''&lt;sub&gt;0&lt;/sub&gt;}} and {{math|''M''}} and for all {{math|''x'' &amp;gt; ''x''&lt;sub&gt;0&lt;/sub&gt;}}. To prove this, let {{math|''x''&lt;sub&gt;0&lt;/sub&gt; {{=}} 1}} and {{math|''M'' {{=}} 13}}. Then, for all {{math|''x'' &amp;gt; ''x''&lt;sub&gt;0&lt;/sub&gt;}}:
:&lt;math&gt;\begin{align}|6x^4 - 2x^3 + 5| &amp;\le 6x^4 + |2x^3| + 5\\
                                      &amp;\le 6x^4 + 2x^4 + 5x^4\\
                                      &amp;= 13x^4\end{align}&lt;/math&gt;
so
:&lt;math&gt; |6x^4 - 2x^3 + 5| \le 13 x^4 .&lt;/math&gt;

== Usage ==
Big O notation has two main areas of application:
* In [[mathematics]], it is commonly used to describe [[Big O notation#Infinitesimal asymptotics|how closely a finite series approximates a given function]], especially in the case of a truncated [[Taylor series]] or [[asymptotic expansion]]
* In [[computer science]], it is useful in the [[Big O notation#Infinite asymptotics|analysis of algorithms]]

In both applications, the function {{math|''g''(''x'')}} appearing within the {{math|''O''(...)}} is typically chosen to be as simple as possible, omitting constant factors and lower order terms.

There are two formally close, but noticeably different, usages of this notation:
* [[Infinity|infinite]] asymptotics
* [[infinitesimal]] asymptotics.

This distinction is only in application and not in principle, however—the formal definition for the &quot;big O&quot; is the same for both cases, only with different limits for the function argument.

=== Infinite asymptotics ===
[[File:comparison computational complexity.svg|thumb|Graphs of functions commonly used in the analysis of algorithms, showing the number of operations {{math|''N''}} versus input size {{math|''n''}} for each function]]
Big O notation is useful when [[analysis of algorithms|analyzing algorithms]] for efficiency. For example, the time (or the number of steps) it takes to complete a problem of size {{math|''n''}} might be found to be {{math|''T''(''n'') {{=}} 4''n''&lt;sup&gt;2&lt;/sup&gt; − 2''n'' + 2}}.
As {{math|''n''}} grows large, the {{math|''n''&lt;sup&gt;2&lt;/sup&gt;}} [[term (mathematics)|term]] will come to dominate, so that all other terms can be neglected—for instance when {{math|''n'' {{=}} 500}}, the term {{math|4''n''&lt;sup&gt;2&lt;/sup&gt;}} is 1000 times as large as the {{math|2''n''}} term. Ignoring the latter would have negligible effect on the expression's value for most purposes.
Further, the [[coefficient]]s become irrelevant if we compare to any other [[Orders of approximation|order]] of expression, such as an expression containing a term {{math|''n''&lt;sup&gt;3&lt;/sup&gt;}} or {{math|''n''&lt;sup&gt;4&lt;/sup&gt;}}. Even if {{math|''T''(''n'') {{=}} 1,000,000''n''&lt;sup&gt;2&lt;/sup&gt;}}, if {{math|''U''(''n'') {{=}} ''n''&lt;sup&gt;3&lt;/sup&gt;}}, the latter will always exceed the former once {{math|''n''}} grows larger than {{math|1,000,000}} ({{math|''T''(1,000,000) {{=}} 1,000,000&lt;sup&gt;3&lt;/sup&gt; {{=}} ''U''(1,000,000)}}). Additionally, the number of steps depends on the details of the machine model on which the algorithm runs, but different types of machines typically vary by only a constant factor in the number of steps needed to execute an algorithm.
So the big O notation captures what remains: we write either
:&lt;math&gt;T(n)= O(n^2) &lt;/math&gt;
or
:&lt;math&gt;T(n) \in O(n^2) &lt;/math&gt;
and say that the algorithm has ''order of {{math|n&lt;sup&gt;2&lt;/sup&gt;''}} time complexity.
The sign &quot;{{math|{{=}}}}&quot; is not meant to express &quot;is equal to&quot; in its normal mathematical sense, but rather a more colloquial &quot;is&quot;, so the second expression is sometimes considered more accurate (see the &quot;[[#Equals sign|Equals sign]]&quot; discussion below) while the first is considered by some as an [[abuse of notation]].&lt;ref name=&quot;clrs3&quot; /&gt;

=== Infinitesimal asymptotics ===
Big O can also be used to describe the [[Taylor series#Approximation error and convergence|error term]] in an approximation to a mathematical function. The most significant terms are written explicitly, and then the least-significant terms are summarized in a single big O term.  Consider, for example, the [[Exponential function#Formal definition|exponential series]] and two expressions of it that are valid when {{math|''x''}} is small:
:&lt;math&gt;\begin{align}
e^x &amp;=1+x+\frac{x^2}{2!}+\frac{x^3}{3!}+\frac{x^4}{4!}+\dotsb &amp;\text{for all } x\\
    &amp;=1+x+\frac{x^2}{2}+O(x^3)                             &amp;\text{as } x\to 0\\
    &amp;=1+x+O(x^2)                                           &amp;\text{as } x\to 0\\
\end{align}&lt;/math&gt;
The second expression (the one with ''O''(''x''&lt;sup&gt;3&lt;/sup&gt;)) means the absolute-value of the error ''e''&lt;sup&gt;''x''&lt;/sup&gt; − (1 + ''x'' + ''x''&lt;sup&gt;2&lt;/sup&gt;/2) is at most some constant times {{!}}''x''&lt;sup&gt;3&lt;/sup&gt;{{!}} when ''x'' is close enough to&amp;nbsp;0.

== Properties ==
If the function {{math|''f''}} can be written as a finite sum of other functions, then the fastest growing one determines the order of {{math|''f''(''n'')}}. For example,
:&lt;math&gt;f(n) = 9 \log n + 5 (\log n)^4 + 3n^2 + 2n^3 = O(n^3) \qquad\text{as } n\to\infty .&lt;/math&gt;
In particular, if a function may be bounded by a polynomial in {{math|''n''}}, then as {{math|''n''}} tends to ''infinity'', one may disregard ''lower-order'' terms of the polynomial.
The sets {{math|''O''(''n''&lt;sup&gt;''c''&lt;/sup&gt;)}} and {{math|''O''(''c''&lt;sup&gt;''n''&lt;/sup&gt;)}} are very different. If {{math|''c''}} is greater than one, then the latter grows much faster. A function that grows faster than {{math|''n''&lt;sup&gt;''c''&lt;/sup&gt;}} for any {{math|''c''}}  is called ''superpolynomial''.  One that grows more slowly than any exponential function of the form {{math|''c''&lt;sup&gt;''n''&lt;/sup&gt;}} is called ''subexponential''. An algorithm can require time that is both superpolynomial and subexponential; examples of this include the fastest known algorithms for [[integer factorization]] and the function {{math|''n''&lt;sup&gt;log ''n''&lt;/sup&gt;}}.

We may ignore any powers of {{math|''n''}} inside of the logarithms. The set {{math|''O''(log ''n'')}} is exactly the same as {{math|''O''(log(''n''&lt;sup&gt;''c''&lt;/sup&gt;))}}. The logarithms differ only by a constant factor (since
{{math|log(''n''&lt;sup&gt;''c''&lt;/sup&gt;) {{=}} ''c'' log ''n''}}) and thus the big O notation ignores that. Similarly, logs with different constant bases are equivalent. On the other hand, exponentials with different bases are not of the same order. For example, {{math|2&lt;sup&gt;''n''&lt;/sup&gt;}} and {{math|3&lt;sup&gt;''n''&lt;/sup&gt;}} are not of the same order.

Changing units may or may not affect the order of the resulting algorithm. Changing units is equivalent to multiplying the appropriate variable by a constant wherever it appears. For example, if an algorithm runs in the order of {{math|''n''&lt;sup&gt;2&lt;/sup&gt;}}, replacing {{math|''n''}} by {{math|''cn''}} means the algorithm runs in the order of {{math|''c''&lt;sup&gt;2&lt;/sup&gt;''n''&lt;sup&gt;2&lt;/sup&gt;}}, and the big O notation ignores the constant {{math|''c''&lt;sup&gt;2&lt;/sup&gt;}}. This can be written as {{math|''c''&lt;sup&gt;2&lt;/sup&gt;''n''&lt;sup&gt;2&lt;/sup&gt; {{=}} O(''n''&lt;sup&gt;2&lt;/sup&gt;)}}. If, however, an algorithm runs in the order of {{math|2&lt;sup&gt;''n''&lt;/sup&gt;}}, replacing {{math|''n''}} with {{math|''cn''}} gives {{math|2&lt;sup&gt;''cn''&lt;/sup&gt; {{=}} (2&lt;sup&gt;''c''&lt;/sup&gt;)&lt;sup&gt;n&lt;/sup&gt;}}. This is not equivalent to {{math|2&lt;sup&gt;''n''&lt;/sup&gt;}} in general.
Changing variables may also affect the order of the resulting algorithm. For example, if an algorithm's run time is {{math|''O''(''n'')}} when measured in terms of the number {{math|''n''}} of ''digits'' of an input number {{math|''x''}}, then its run time is {{math|''O''(log ''x'')}} when measured as a function of the input number {{math|''x''}} itself, because {{math|''n'' {{=}} ''O''(log ''x'')}}.

=== Product ===
:&lt;math&gt; f_1 = O(g_1) \text{ and } f_2 = O(g_2) \Rightarrow f_1  f_2 = O(g_1  g_2)&lt;/math&gt;
:&lt;math&gt;f\cdot O(g) = O(f g)&lt;/math&gt;

=== Sum ===
:&lt;math&gt; f_1 = O(g_1) \text{ and }
  f_2= O(g_2) \Rightarrow f_1 + f_2 = O(\max(g_1, g_2))&lt;/math&gt;
This implies &lt;math&gt; f_1 = O(g) \text{ and } f_2 = O(g) \Rightarrow f_1+f_2 \in O(g) &lt;/math&gt;, which means that &lt;math&gt;O(g)&lt;/math&gt; is a [[convex cone]].

=== Multiplication by a constant ===
:Let {{math|''k''}} be constant. Then:
:&lt;math&gt;O(|k| g) = O(g)&lt;/math&gt; if {{math|''k''}} is nonzero.
:&lt;math&gt;f = O(g) \Rightarrow kf = O(g). &lt;/math&gt;

== Multiple variables ==
Big ''O'' (and little o, Ω, etc.) can also be used with multiple variables.
To define big ''O'' formally for multiple variables, suppose &lt;math&gt;f&lt;/math&gt; and &lt;math&gt;g&lt;/math&gt; are two functions defined on some subset of &lt;math&gt;\mathbb{R}^n&lt;/math&gt;. We say
:&lt;math&gt;f(\vec{x})\text{ is }O(g(\vec{x}))\quad\text{ as }\vec{x}\to\infty&lt;/math&gt;
if and only if&lt;ref&gt;{{cite book |last1=Cormen |first1=Thomas |last2=Leiserson |first2=Charles |last3=Rivest |first3=Ronald |last4=Stein |first4=Clifford |title=Introduction to Algorithms |url=https://archive.org/details/introductiontoal00corm_805 |url-access=limited |year=2009 |publisher=MIT |page=[https://archive.org/details/introductiontoal00corm_805/page/n73 53] |edition=Third}}&lt;/ref&gt;
:&lt;math&gt;\exists M \exists C &gt; 0~\text{ such that for all }~\vec{x}~\text{ with }~x_i \ge M~\text{ for some }~i, |f(\vec{x})| \le C |g(\vec{x})|~.&lt;/math&gt;
Equivalently, the condition that &lt;math&gt;x_i \geq M&lt;/math&gt; for some &lt;math&gt;i&lt;/math&gt; can be replaced with the condition that &lt;math&gt;\|\vec{x}\|_{\infty} \ge M&lt;/math&gt;, where &lt;math&gt;\|\vec{x}\|_{\infty}&lt;/math&gt; denotes the [[Chebyshev norm]]. For example, the statement
:&lt;math&gt;f(n,m) = n^2 + m^3 + O(n+m) \quad\text{ as } n,m\to\infty&lt;/math&gt;
asserts that there exist constants ''C'' and ''M'' such that
:&lt;math&gt;\forall \|(n, m)\|_{\infty} \geq M: \quad |g(n,m)| \le C |n+m|~&lt;/math&gt;
where ''g''(''n'',''m'') is defined by
:&lt;math&gt;f(n,m) = n^2 + m^3 + g(n,m)~.&lt;/math&gt;
This definition allows all of the coordinates of &lt;math&gt;~\vec{x}~&lt;/math&gt; to increase to infinity. In particular, the statement
:&lt;math&gt;f(n,m) = O(n^m) \quad \text{ as } n,m\to\infty~&lt;/math&gt;
(i.e., &lt;math&gt;\exists C \exists M \forall n \forall m\dots&lt;/math&gt;) is quite different from
:&lt;math&gt;\forall m\colon~f(n,m) = O(n^m) \quad\text{ as } n\to\infty&lt;/math&gt;
(i.e., &lt;math&gt;\forall m \exists C \exists M \forall n \dots&lt;/math&gt;).

Under this definition, the subset on which a function is defined is significant when generalizing statements from the univariate setting to the multivariate setting. For example, if &lt;math&gt;~f(n,m)=1~&lt;/math&gt; and &lt;math&gt;~g(n,m)=n~&lt;/math&gt;, then &lt;math&gt;~f(n,m) = O(g(n,m))~&lt;/math&gt; if we restrict &lt;math&gt;f&lt;/math&gt; and &lt;math&gt;g&lt;/math&gt; to &lt;math&gt;~[1,\infty)^2~&lt;/math&gt;, but not if they are defined on &lt;math&gt;[0,\infty)^2~&lt;/math&gt;.

This is not the only generalization of big O to multivariate functions, and in practice, there is some inconsistency in the choice of definition.&lt;ref&gt;{{cite web |last1=Howell |first1=Rodney |title=On Asymptotic Notation with Multiple Variables |url=http://people.cis.ksu.edu/~rhowell/asymptotic.pdf |access-date=2015-04-23}}&lt;/ref&gt;

== Matters of notation ==

=== Equals sign ===
The statement &quot;''f''(''x'') is ''O''(''g''(''x''))&quot; as defined above is usually written as ''f''(''x'')&amp;nbsp;=&amp;nbsp;''O''(''g''(''x'')). Some consider this to be an [[abuse of notation]], since the use of the equals sign could be misleading as it suggests a symmetry that this statement does not have. As [[Nicolaas Govert de Bruijn|de Bruijn]] says, ''O''(''x'')&amp;nbsp;=&amp;nbsp;''O''(''x''&lt;sup&gt;2&lt;/sup&gt;) is true but ''O''(''x''&lt;sup&gt;2&lt;/sup&gt;)&amp;nbsp;=&amp;nbsp;''O''(''x'') is not.&lt;ref&gt;{{Cite book| author = [[N. G. de Bruijn]] | title=Asymptotic Methods in Analysis | place=Amsterdam |publisher=North-Holland | year=1958 | pages=5–7 | url=https://books.google.com/books?id=_tnwmvHmVwMC&amp;pg=PA5&amp;vq=%22The+trouble+is%22 | isbn=978-0-486-64221-5}}&lt;/ref&gt; [[Donald Knuth|Knuth]] describes such statements as &quot;one-way equalities&quot;, since if the sides could be reversed, &quot;we could deduce ridiculous things like ''n''&amp;nbsp;=&amp;nbsp;''n''&lt;sup&gt;2&lt;/sup&gt; from the identities ''n''&amp;nbsp;=&amp;nbsp;''O''(''n''&lt;sup&gt;2&lt;/sup&gt;) and ''n''&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;=&amp;nbsp;''O''(''n''&lt;sup&gt;2&lt;/sup&gt;).&quot;&lt;ref name=&quot;Concrete Mathematics&quot;&gt;{{Cite book |last1=Graham |first1=Ronald |author1link=Ronald Graham |first2=Donald |last2=Knuth |author2link=Donald Knuth |last3=Patashnik |first3=Oren |author3link=Oren Patashnik |title=Concrete Mathematics |location=Reading, Massachusetts |publisher=Addison–Wesley |edition=2 |date=1994 |page=446 |url=https://books.google.com/books?id=pntQAAAAMAAJ |isbn=978-0-201-55802-9}}&lt;/ref&gt;

For these reasons, it would be more precise to use [[set notation]] and write ''f''(''x'')&amp;nbsp;∈&amp;nbsp;''O''(''g''(''x'')), thinking of ''O''(''g''(''x'')) as the class of all functions ''h''(''x'') such that |''h''(''x'')|&amp;nbsp;≤&amp;nbsp;''C''|''g''(''x'')| for some constant ''C''.&lt;ref name=&quot;Concrete Mathematics&quot; /&gt; However, the use of the equals sign is customary.  Knuth pointed out that &quot;mathematicians customarily use the = sign as they use the word 'is' in English: Aristotle is a man, but a man isn't necessarily Aristotle.&quot;&lt;ref&gt;{{Cite journal| author=Donald Knuth | title=Teach Calculus with Big O | date=June–July 1998 | journal=[[Notices of the American Mathematical Society]] | volume=45 | issue=6 | page=687 | url=http://www.ams.org/notices/199806/commentary.pdf}} ([http://www-cs-staff.stanford.edu/~knuth/ocalc.tex Unabridged version])&lt;/ref&gt;

=== Other arithmetic operators ===
Big O notation can also be used in conjunction with other arithmetic operators in more complicated equations.   For example, ''h''(''x'') + ''O''(''f''(''x'')) denotes the collection of functions having the growth of ''h''(''x'') plus a part whose growth is limited to that of ''f''(''x''). Thus,
:&lt;math&gt;g(x) = h(x) + O(f(x))&lt;/math&gt;
expresses the same as
:&lt;math&gt;g(x) - h(x) = O(f(x)).&lt;/math&gt;

==== Example {{anchor|Example (Matters of notation)}} ====
Suppose an [[algorithm]] is being developed to operate on a set of ''n'' elements. Its developers are interested in finding a function ''T''(''n'')  that will express how long the algorithm will take to run (in some arbitrary measurement of time) in terms of the number of elements in the input set. The algorithm works by first calling a subroutine to sort the elements in the set and then perform its own operations. The sort has a known time complexity of ''O''(''n''&lt;sup&gt;2&lt;/sup&gt;), and after the subroutine runs the algorithm must take an additional  55''n''&lt;sup&gt;3&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;2''n''&amp;nbsp;+&amp;nbsp;10 steps before it terminates.  Thus the overall time complexity of the algorithm can be expressed as ''T''(''n'') = 55''n''&lt;sup&gt;3&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;''O''(''n''&lt;sup&gt;2&lt;/sup&gt;).
Here the terms 2''n''+10 are subsumed within the faster-growing ''O''(''n''&lt;sup&gt;2&lt;/sup&gt;).  Again, this usage disregards some of the formal meaning of the &quot;=&quot; symbol, but it does allow one to use the big O notation as a kind of convenient placeholder.

=== Multiple uses ===
In more complicated usage, ''O''(...) can appear in different places in an equation, even several times on each side. For example, the following are true for &lt;math&gt;n\to\infty&lt;/math&gt;
:&lt;math&gt;(n+1)^2 = n^2 + O(n)&lt;/math&gt;
:&lt;math&gt;(n + O(n^{1/2}))(n + O(\log n))^2 = n^3 + O(n^{5/2})&lt;/math&gt;
:&lt;math&gt;n^{O(1)} = O(e^n).&lt;/math&gt;
The meaning of such statements is as follows: for ''any'' functions which satisfy each ''O''(...) on the left side, there are ''some'' functions satisfying each ''O''(...) on the right side, such that substituting all these functions into the equation makes the two sides equal. For example, the third equation above means: &quot;For any function ''f''(''n'') = ''O''(1), there is some function ''g''(''n'')  = ''O''(''e''&lt;sup&gt;''n''&lt;/sup&gt;) such that ''n''&lt;sup&gt;''f''(''n'')&lt;/sup&gt; = ''g''(''n'').&quot; In terms of the &quot;set notation&quot; above, the meaning is that the class of functions represented by the left side is a subset of the class of functions represented by the right side. In this use the &quot;=&quot; is a formal symbol that unlike the usual use of &quot;=&quot; is not a [[symmetric relation]]. Thus for example ''n''&lt;sup&gt;''O''(1)&lt;/sup&gt; = ''O''(''e''&lt;sup&gt;''n''&lt;/sup&gt;) does not imply the false statement ''O''(''e''&lt;sup&gt;''n''&lt;/sup&gt;) = ''n''&lt;sup&gt;''O''(1)&lt;/sup&gt;

=== Typesetting ===
Big O consists of just an uppercase &quot;O&quot;.  Unlike Greek-named Bachmann–Landau notations, it needs no special symbol.  Yet, commonly used calligraphic variants, like &lt;math&gt;\mathcal{O}&lt;/math&gt;, are available, in [[LaTeX]] and derived typesetting systems.&lt;ref&gt;{{cite web |url=https://texblog.org/2014/06/24/big-o-and-related-notations-in-latex/ |title=Big O and related notations in LaTeX |date=24 June 2014 |author=Tom |work=texblog}}&lt;/ref&gt;

== Orders of common functions ==
{{Further|Time complexity#Table of common time complexities}}

Here is a list of classes of functions that are commonly encountered when analyzing the running time of an algorithm.  In each case, ''c'' is a positive constant and ''n'' increases without bound. The slower-growing functions are generally listed first.

{| class=&quot;wikitable&quot;
|-
!Notation !! Name !! Example
|-
|&lt;math&gt;O(1)&lt;/math&gt; || [[Constant time|constant]] || Determining if a binary number is even or odd; Calculating &lt;math&gt;(-1)^n&lt;/math&gt;; Using a constant-size [[lookup table]]
|-
|&lt;math&gt;O(\log \log n)&lt;/math&gt; || double logarithmic || Number of comparisons spent finding an item using [[interpolation search]] in a sorted array of uniformly distributed values
|-
|&lt;math&gt;O(\log n)&lt;/math&gt; || [[Logarithmic time|logarithmic]] || Finding an item in a sorted array with a [[Binary search algorithm|binary search]] or a balanced search [[Tree data structure|tree]] as well as all operations in a [[Binomial heap]]
|-
|&lt;math&gt;O((\log n)^c)&lt;/math&gt;&lt;br /&gt;&lt;math&gt;\scriptstyle c&gt;1&lt;/math&gt; || [[Polylogarithmic time|polylogarithmic]] || Matrix chain ordering can be solved in polylogarithmic time on a [[parallel random-access machine]].
|-
|&lt;math&gt;O(n^c)&lt;/math&gt;&lt;br /&gt;&lt;math&gt;\scriptstyle 0&lt;c&lt;1&lt;/math&gt; || fractional power || Searching in a [[k-d tree]]
|-
|&lt;math&gt;O(n)&lt;/math&gt; || [[linear time|linear]] || Finding an item in an unsorted list or in an unsorted array; adding two ''n''-bit integers by [[Ripple carry adder|ripple carry]]
|-
|&lt;math&gt;O(n\log^* n)&lt;/math&gt; || n [[log-star]] n || Performing [[Polygon triangulation|triangulation]] of a simple polygon using [[Kirkpatrick–Seidel algorithm|Seidel's algorithm]], or the [[Disjoint-set data structure#Proof of O(log*(n)) time complexity of Union-Find|union–find algorithm]]. Note that &lt;math&gt;\log^*(n) =
\begin{cases}
 0, &amp; \text{if }n \leq 1 \\
 1 + \log^*(\log n), &amp; \text{if }n&gt;1
\end{cases}&lt;/math&gt;
|-
|&lt;math&gt;O(n\log n) = O(\log n!)&lt;/math&gt; || [[Linearithmic time|linearithmic]], loglinear, quasilinear, or &quot;n log n&quot; || Performing a [[fast Fourier transform]]; Fastest possible [[comparison sort]]; [[heapsort]] and [[merge sort]]
|-
|&lt;math&gt;O(n^2)&lt;/math&gt; || [[quadratic time|quadratic]] || Multiplying two ''n''-digit numbers by a simple algorithm; simple sorting algorithms, such as [[bubble sort]], [[selection sort]] and [[insertion sort]]; (worst case) bound on some usually faster sorting algorithms such as [[quicksort]], [[Shellsort]], and [[tree sort]]
|-
|&lt;math&gt;O(n^c)&lt;/math&gt; || [[polynomial time|polynomial]] or algebraic || [[Tree-adjoining grammar]] parsing; maximum [[Matching (graph theory)|matching]] for [[bipartite graph]]s; finding the [[determinant]] with [[LU decomposition]]
|-
|&lt;math&gt;L_n[\alpha,c] = e^{(c + o(1)) (\ln n)^\alpha (\ln \ln n)^{1-\alpha}}&lt;/math&gt;&lt;br /&gt;&lt;math&gt;\scriptstyle 0 &lt; \alpha &lt; 1&lt;/math&gt; || [[L-notation]] or [[sub-exponential time|sub-exponential]] || Factoring a number using the [[quadratic sieve]] or [[number field sieve]]
|-
|&lt;math&gt;O(c^n)&lt;/math&gt;&lt;br/&gt;&lt;math&gt;\scriptstyle c&gt;1&lt;/math&gt; || [[exponential time|exponential]] || Finding the (exact) solution to the [[travelling salesman problem]] using [[dynamic programming]]; determining if two logical statements are equivalent using [[brute-force search]]
|-
|&lt;math&gt;O(n!)&lt;/math&gt; || [[factorial]] || Solving the [[travelling salesman problem]] via brute-force search; generating all unrestricted permutations of a [[Partially ordered set|poset]]; finding the [[determinant]] with [[Laplace expansion]]; enumerating [[Bell number|all partitions of a set]]
|}
The statement &lt;math&gt;f(n) = O(n!)&lt;/math&gt; is sometimes weakened to &lt;math&gt;f(n) = O\left(n^n\right)&lt;/math&gt; to derive simpler formulas for asymptotic complexity.
For any &lt;math&gt;k&gt;0&lt;/math&gt; and &lt;math&gt;c &gt; 0&lt;/math&gt;, &lt;math&gt;O(n^c(\log n)^k)&lt;/math&gt; is a subset of &lt;math&gt;O(n^{c+\varepsilon})&lt;/math&gt; for any &lt;math&gt; \varepsilon &gt; 0&lt;/math&gt;, so may be considered as a polynomial with some bigger order.
