{{ordered list
|&quot;When they later extended their power to overseas territories, they shied away from assuming direct control wherever possible.&quot; In the Hellenistic world, Rome withdrew its legions after three wars and instead settled for a role of all-powerful patron and arbitrator.&lt;ref&gt;&quot;America: The New Roman Empire&quot;, p. 147.&lt;/ref&gt;
|The factor for the overseas engagement is the same in both cases: the seas or oceans ceased to offer protection, or so it seemed.
{{quote|
Rome and America both expanded in order to achieve security. Like concentric circles, each circle in need of security demanded the occupation of the next larger circle. The Romans made their way around the Mediterranean, driven from one challenger to their security to the next. The struggles&amp;nbsp;... brought the Americans to Europe and East Asia; the Americans soon wound up all over the globe, driven from one attempt at containment to the next. The boundaries between security and power politics gradually blurred. The Romans and Americans both eventually found themselves in a geographical and political position that they had not originally desired, but which they then gladly accepted and firmly maintained.&lt;ref&gt;&quot;America: The New Roman Empire&quot;, pp. 148, 151.&lt;/ref&gt;}}
|&quot;Both claimed the unlimited right to render their enemies permanently harmless.&quot; Postwar treatments of Carthage, Macedon, Germany and Japan are similar.&lt;ref name=&quot;America p 152&quot;&gt;&quot;America: The New Roman Empire&quot;, p. 152.&lt;/ref&gt;
|&quot;They became protective lords after each act of assistance provided to other states; in effect, they offered protection and gained control. The protected were mistaken when they assumed that they could use Rome or America to their own ends without suffering a partial loss of their sovereignty.&quot;&lt;ref name=&quot;America p 152&quot; /&gt;
|&quot;World powers without rivals are a class unto themselves. They&amp;nbsp;... are quick to call loyal followers friends, or amicus populi Romani. They no longer know any foes, just rebels, terrorists, and rogue states. They no longer fight, merely punish. They no longer wage wars but merely create peace. They are honestly outraged when vassals fail to act as vassals.&quot;&lt;ref&gt;&quot;America: The New Roman Empire&quot;, p. 155.&lt;/ref&gt; [[Zbigniew Brzezinski]] comments on the latter analogy: &quot;One is tempted to add, they do not invade other countries, they only liberate.&quot;&lt;ref&gt;''The Choice: Global Domination or Global Leadership'' (New York: Basic Books, 2004), p. 216.&lt;/ref&gt;}}

In 1998, American political author, Charles A. Kupchan, described the world order &quot;After Pax Americana&quot;&lt;ref&gt;{{Cite journal|jstor=2539379|title=After Pax Americana: Benign Power, Regional Integration, and the Sources of a Stable Multipolarity|last1=Kupchan|first1=Charles A.|journal=International Security|year=1998|volume=23|issue=2|pages=40–79|doi=10.1162/isec.23.2.40|s2cid=57569142}}&lt;/ref&gt; and the next year &quot;The Life after Pax Americana&quot;.&lt;ref&gt;{{Cite journal|jstor = 40209641|title = Life after Pax Americana|last1 = Kupchan|first1 = Charles A.|journal = World Policy Journal|year = 1999|volume = 16|issue = 3|pages = 20–27}}&lt;/ref&gt; In 2003, he announced &quot;The End of the American Era&quot;.&lt;ref&gt;Charles Kupchan, ''The End of the American Era: US Foreign Policy and Geopolitics of the Twenty-First Century'', New York: Vintage Books, 2003.&lt;/ref&gt; In 2012, however, he projected: &quot;America's military strength will remain as central to global stability in the years ahead as it has been in the past.&quot;&lt;ref&gt;Charles Kupchan, &quot;[http://democracyjournal.org/magazine/23/grand-strategy-the-four-pillars-of-the-future/ Grand Strategy: The Four Pillars of the Future]&quot;, ''Democracy Journal'', 23, Winter  2012&lt;/ref&gt;

The Russian analyst Leonid Grinin argues that at present and in the nearest future Pax Americana  will remain an effective tool of supporting the world order since the US concentrates too many leadership functions which no other country is able to take to the full extent. Thus, he warns that the destruction of Pax Americana  will bring critical transformations of the [[World-system]] with unclear consequences &lt;ref&gt;Grinin, Leonid; Ilyin, Ilya V.; Andreev, Alexey I. 2016. &quot;[http://www.sociostudies.org/journal/articles/445705/ World Order in the Past, Present, and Future]&quot;. In ''Social Evolution &amp; History''. Volume 15, Number 1, pp. 58–84&lt;/ref&gt;

== American imperialism ==

{{Main|American imperialism}}
[[File:McDonaldsWorldLocations.svg|thumb|upright=1.36|Countries with McDonald's restaurants, showing their first year with its first restaurant]]
[[File:United States Soviet Union Locator.png|thumb|[[Spheres of influence]] during the [[Cold War]]. The US and USSR are shown in dark green and orange respectively, and their spheres of influence in light green and orange.]]

{{American imperialism}}

''American imperialism'' is a term referring to the cultural &amp; political outcomes or ideological elements of United States foreign policy. Since the start of the [[Cold War]], the United States has economically and/or diplomatically supported friendly foreign governments, including many that overtly violated the civil and human rights of their own citizens and residents.  American imperialism concepts were initially a product of capitalism critiques and, later, of theorists opposed to what they take to be aggressive United States policies and doctrines.

Although there are various views of the imperialist nature of the United States, which describe many of the same policies and institutions as evidence of imperialism, explanations for imperialism vary widely. In spite of such literature, the historians Archibald Paton Thorton and Stuart Creighton Miller argue against the very coherence of the concept. Miller argues that the overuse and abuse of the term &quot;imperialism&quot; makes it nearly meaningless as an analytical concept.&lt;ref name=&quot;miller&quot;&gt;{{cite book | author=Miller, Stuart Creighton  | title=&quot;Benevolent Assimilation&quot; The American Conquest of the Philippines, 1899–1903 | publisher=Yale University Press | year=1982 | isbn=978-0-300-02697-9 | url=http://www.livejournal.com/users/bailey83221/4300.html#miller}} p. 3.&lt;/ref&gt;

== See also ==
;General: [[Overseas interventions of the United States]], [[Timeline of United States military operations]], [[United States withdrawal from the United Nations]], [[Hyperpower]]
;Doctrines: [[Truman Doctrine]], [[Reagan Doctrine]], [[Clinton Doctrine]], [[Bush Doctrine]], [[Powell Doctrine]], [[Wolfowitz Doctrine]], [[Obama Doctrine]]
;Early concepts: [[Civilizing mission]], [[Platt Amendment]], [[Holy Alliance]], [[Hague Conventions (1899 and 1907)]]
;Modern concepts: [[Bretton Woods system]], [[Cold War (1985–1991)]], [[Neoconservatism]], [[Anti-communism]] , [[New world order (politics)|New World Order]], [[War on Terror]]
;Other: [[Messianic democracy]], [[Peace and Truce of God]], [[9/11 conspiracy theories]], [[American Dream, Global Nightmare]], Documentary film ''[[Pax Americana and the Weaponization of Space]]''

== References ==
{{Reflist}}
&lt;!-- Dead note &quot;Reynolds_547&quot;: Page 547 [[#Biblography|Biblography]] Reynolds --&gt;
&lt;!-- Dead note &quot;Reynolds_545a&quot;: Page 545 [[#Biblography|Biblography]] Reynolds --&gt;
&lt;!-- Dead note &quot;Reynolds_545b&quot;: page 545 [[#Biblography|Biblography]] Reynolds --&gt;

== Further reading ==
&lt;!-- Listed newest to oldest --&gt;
{{refbegin}}
* {{cite book|last=Ankerl|first=Guy|title=Coexisting Contemporary Civilizations: Arabo-Muslim, Bharati, Chinese and Western|series=INU Societal Research|volume=1|year=2000|publisher=INU Press|location=Geneva|isbn=978-2-88155-004-1|pages=256–332|chapter=Global communication without universal civilization}}
* {{cite book|last=Brown|first=Michael E.|title=America's Strategic Choices|url=https://books.google.com/books?id=rrwTxggJJT0C|year=2000|publisher=MIT Press|location=Cambridge, MA|isbn=9780262265249}}
* {{Cite journal | doi=10.1007/s12138-013-0320-0|title = Pax Romana/Pax Americana: Views of the &quot;New Rome&quot; from &quot;Old Europe&quot;, 2000–2010|year = 2013|last1 = Burton|first1 = Paul J.|journal = International Journal of the Classical Tradition|volume = 20|issue = 1–2|pages = 15–40|s2cid = 162321437}}
* Clarke, Peter. ''The last thousand days of the British empire: Churchill, Roosevelt, and the birth of the Pax Americana'' (Bloomsbury Publishing, 2010)
* {{cite book|last=Gottlieb|first=Gidon|title=Nation against State: A New Approach to Ethnic Conflicts and the Decline of Sovereignty|url=https://books.google.com/books?id=hBw49OofkEkC|year=1993|publisher=[[Council on Foreign Relations]] Press|location=New York|isbn=9780876091562}}
* {{cite book|last=Hull|first=William I.|title=The Monroe Doctrine: National or International|url=https://books.google.com/books?id=P8kMAAAAYAAJ|year=1915|publisher=G.P. Putnam|location=New York}}
* {{cite book|last=Kahrstedt|first=Ulrich|title=Pax Americana; ein historische Betrachtung am Wendepunkte der europäischen Geschichte|year=1920|publisher=Drei Masken Verlag|location=Munich|language=de|trans-title=Pax Americana, a historical look at the turning points in European history}}
* {{cite book|last=Kiernan|first=V. G.|title=America, the New Imperialism: From White Settlement to World Hegemony|url=https://books.google.com/books?id=UjmO-h63uzQC|year=2005|publisher=Verso|location=London|isbn=9781844675227}}
* {{cite book|last=Kupchan|first=Charles|title=The End of the American Era: U.S. Foreign Policy and the Geopolitics of the 21st-century|url=https://books.google.com/books?id=krECAAAACAAJ|year=2002|publisher=A. Knopf|location=New York}}
* {{Cite journal | doi=10.1111/j.1468-2478.2011.00704.x|title = This Time It's Real: The End of Unipolarity and the Pax Americana|year = 2012|last1 = Layne|first1 = Christopher|journal = International Studies Quarterly|volume = 56|issue = 1|pages = 203–213|jstor=41409832}}
* {{cite book|last=LaFeber|first=Walter|title=The New Empire: An Interpretation of American Expansion, 1860–1898|url=https://books.google.com/books?id=PNOwdBf-dzcC|year=1998|publisher=Cornell University Press|location=Ithaca, NY|isbn=978-0801485954}}
* {{cite book|last=Louis|first=William Roger|title=Ends of British Imperialism: The Scramble for Empire, Suez and Decolonization: Collected Essays|chapter-url=https://books.google.com/books?id=NQnpQNKeKKAC&amp;pg=PA999|year=2006|publisher=I.B. Tauris|location=London|pages=999+|chapter=The Pax Americana: Sir Keith Hancock, The British Empire, and American Expansion|isbn=9781845113476}}
* Mee, Charles L. ''The Marshall Plan: The launching of the pax americana'' (New York: Simon and Schuster, 1984)
* {{Cite journal | doi=10.1111/j.1467-923X.2012.02294.x|title = From Pax Americana to Pax Mosaica? Bargaining over a New Economic Order|year = 2012|last1 = Narlikar|first1 = Amrita|last2 = Kumar|first2 = Rajiv|journal = The Political Quarterly|volume = 83|issue = 2|pages = 384–394}}
* {{cite book|last=Nye|first=Joseph S.|title=Bound to Lead: The Changing Nature of American Power|url=https://books.google.com/books?id=dMfArUL7hycC|year=1990|publisher=Basic Books|location=New York|isbn=9780465007448}}
* {{cite journal|last=Snow|first=Francis Haffkine|year=1921|title=American as a World Tyrant: A German Historian's Attempt to Prove That Europe is Becoming a Serf of the United States|journal=Current History|volume=13|url=https://books.google.com/books?id=jbcqAAAAYAAJ&amp;pg=PA497}}

{{refend}}

== External links ==
{{Wikiquote|American benevolence}}
*[https://www.salon.com/2009/09/29/obama_pax_americana/ The end of the Pax Americana?] by Michael Lind
*[https://benjaminschwarz.org/1996/06/01/why-america-thinks-it-has-to-run-the-world/ Why America Thinks it Has to Run the World] by Benjamin Schwarz
*[https://www.scribd.com/document/382613540/It-s-Over-Over-There-The-Coming-Crack-up-in-Transatlantic-Relations-Christopher-Layne It’s Over, Over There: The Coming Crack-up in Transatlantic Relations] by Christopher Layne
*[https://www.scribd.com/document/132781206/War-in-the-Contest-for-a-New-World-Order-Peter-Gowan War in the Contest for a New World Order] by Peter Gowan
*[https://www.lrb.co.uk/v38/n14/thomas-meaney/so-it-must-be-for-ever So it must be for ever] by Thomas Meaney
* [https://www.academia.edu/38401632/Instrumental_Internationalism_The_American_Origins_of_the_United_Nations_1940_3 Instrumental Internationalism: The American Origins of the United Nations, 1940–3] by Stephen Wertheim
*[https://www.lrb.co.uk/v41/n09/tom-stevenson/what-are-we-there-for What are we there for?] by Tom Stevenson

*[https://archive.org/details/PeterGowanInterview2009 Peter Gowan interview on U.S. foreign policy since 1945], Interview with Against the Grain

{{Paxes}}
{{US history}}

[[Category:Political terminology]]
[[Category:Eras of United States history]]
[[Category:Latin political words and phrases]]
[[Category:Pax|Americana]]
[[Category:International security]]
[[Category:American exceptionalism]]</text>
      <sha1>1czgqlxkpegjdhru5xbtem0el4a32sx</sha1>
    </revision>
  </page>
  <page>
    <title>Common Language Runtime</title>
    <ns>0</ns>
    <id>46003</id>
    <revision>
      <id>985085476</id>
      <parentid>978787838</parentid>
      <timestamp>2020-10-23T21:21:45Z</timestamp>
      <contributor>
        <username>Ghettoblaster</username>
        <id>6603820</id>
      </contributor>
      <minor />
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3171" xml:space="preserve">{{short description|Virtual machine component of Microsoft's .NET framework}}
{{multiple|
{{third-party|date=March 2019}}
{{More citations needed|date=September 2014}}
}}
{{Program execution}}
The '''Common Language Runtime''' ('''CLR'''), the [[virtual machine]] component of [[Microsoft]] [[.NET Framework]], manages the execution of .NET programs. [[Just-in-time compilation]] converts the [[managed code]] (compiled [[intermediate language]] code), into [[machine instructions]] which are then executed on the [[CPU]] of the computer.&lt;ref name=&quot;msdn-clr&quot;&gt;{{cite web| title = Common Language Runtime (CLR) | url = http://msdn.microsoft.com/en-us/library/8bs2ecf4 | accessdate = 14 November 2013 | work = [[MSDN Library]]}}&lt;/ref&gt; The CLR provides additional services including [[memory management]], [[type safety]], [[exception handling]], [[garbage collection (computer science)|garbage collection]], security and [[thread management]]. All programs written for the .NET Framework, regardless of [[programming language]], are executed by the CLR. All versions of the .NET Framework include CLR. The CLR team was started June 13, 1998.

CLR implements the [[Virtual Execution System]] (VES) as defined in the [[Common Language Infrastructure]] (CLI) standard, initially developed by Microsoft itself. A public standard defines the Common Language Infrastructure specification.&lt;ref&gt;{{cite web | title = ECMA C# and Common Language Infrastructure Standards 
| url = http://msdn.microsoft.com/en-us/vstudio/Aa569283.aspx | accessdate = 14 November 2013 
| work = Visual Studio Developer Center}}&lt;/ref&gt;

With Microsoft's move to [[.NET Core]], the CLI VES implementation is known as [[CoreCLR]] instead of CLR.

{|class=&quot;wikitable&quot;
|+Overview of the Common Language Runtime release history&lt;ref name=&quot;msdn-clr&quot; /&gt;
!CLR version
!.NET version
|-
|1.0
|[[.NET Framework version history#.NET Framework 1.0|1.0]]
|-
|1.1
|[[.NET Framework version history#.NET Framework 1.1|1.1]]
|-
|2.0
|[[.NET Framework version history#.NET Framework 2.0|2.0]], [[.NET Framework version history#.NET Framework 3.0|3.0]], [[.NET Framework version history#.NET Framework 3.5|3.5]]
|-
|4
|[[.NET Framework version history#.NET Framework 4|4]], [[.NET Framework version history#.NET Framework 4.5|4.5]], [[.NET Framework version history#.NET Framework 4.6|4.6]], [[.NET Framework version history#.NET Framework 4.7|4.7]], [[.NET Framework version history#.NET Framework 4.8|4.8]]
|}

==See also==
*[[Common Intermediate Language]]
*[[List of CLI languages]]
*[[Java virtual machine]]

==References==
{{Reflist}}

==External links==
*[http://www.informit.com/articles/article.aspx?p=30601 Components of Common Language Runtime]
*[https://web.archive.org/web/20110425220519/http://www.visualbuilder.com/dotnet/tutorial/clr-%28common-language-runtime%29/ Components of CLR]
*[http://msdn.microsoft.com/en-us/library/a4t23ktk.aspx Overview of the .NET Framework 4.0]
*[http://msdn.microsoft.com/en-us/library/zw4w595w.aspx .NET Framework Conceptual Overview]

{{Common Language Infrastructure}}

{{Authority control}}

[[Category:.NET Framework terminology]]
[[Category:Stack-based virtual machines]]</text>
      <sha1>ma130wfzzsd0jsn7e7y6w7bflnsy49n</sha1>
    </revision>
  </page>
  <page>
    <title>Common Intermediate Language</title>
    <ns>0</ns>
    <id>46004</id>
    <revision>
      <id>987899925</id>
      <parentid>987636572</parentid>
      <timestamp>2020-11-09T22:13:49Z</timestamp>
      <contributor>
        <username>Citation bot</username>
        <id>7903804</id>
      </contributor>
      <comment>Alter: url. URLs might have been internationalized/anonymized. Add: isbn. Correct ISBN10 to ISBN13. | You can [[WP:UCB|use this bot]] yourself. [[WP:DBUG|Report bugs here]]. | Suggested by AManWithNoPlan | All pages linked from cached copy of User:AManWithNoPlan/sandbox2 | via #UCB_webform_linked 333/3786</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15619" xml:space="preserve">{{short description|Intermediate representation defined within the CLI specification}}
{{confused|C Intermediate Language}}
{{refimprove|date=November 2017}}

'''Common Intermediate Language''' ('''CIL'''), formerly called '''Microsoft Intermediate Language''' ('''MSIL''') or '''Intermediate Language''' ('''IL'''),&lt;ref&gt;{{cite web |url = https://docs.microsoft.com/en-us/dotnet/standard/managed-code |title = Intermediate Language &amp; execution}}&lt;/ref&gt; is the [[intermediate language]] binary instruction set defined within the [[Common Language Infrastructure]] (CLI) specification.&lt;ref&gt;{{cite web |url = https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf |page = 32 |title = ECMA-335 Common Language Infrastructure (CLI)}}&lt;/ref&gt; CIL instructions are executed by a CLI-compatible runtime environment such as the [[Common Language Runtime]]. Languages which target the CLI compile to CIL. CIL is [[object-oriented]], [[Stack machine|stack-based]] [[bytecode]]. Runtimes typically [[Just-in-time compilation|just-in-time]] compile CIL instructions into [[native code]].

CIL was originally known as Microsoft Intermediate Language (MSIL) during the beta releases of the .NET languages. Due to standardization of [[C Sharp (programming language)|C#]] and the CLI, the bytecode is now officially known as CIL.&lt;ref&gt;{{cite web
| url = http://www.interviewcity.com/2010/04/what-is-intermediate-languageilmsilcil.html
| title = What is Intermediate Language(IL)/MSIL/CIL in .NET 
| accessdate = 2011-02-17
| quote = CIL: ... When we compile [a]. NET project, it [is] not directly converted to binary code but to the intermediate language. When a project is run, every language of .NET programming is converted into binary code into CIL. Only some part of CIL that is required at run time is converted into binary code. DLL and EXE of .NET are also in CIL form.}}&lt;/ref&gt; [[Windows Defender]] virus definitions continue to refer to binaries compiled with it as MSIL.&lt;ref name=&quot;Defender&quot;&gt;{{cite web |title=HackTool:MSIL/SkypeCracker |url=https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=HackTool:MSIL/SkypeCracker&amp;threatId=-2147221892 |publisher=Microsoft |accessdate=26 November 2019}}&lt;/ref&gt;

==General information==
During compilation of [[List of CLI languages|CLI programming languages]], the [[source code]] is translated into CIL code rather than into platform- or processor-specific [[object file|object code]]. CIL is a [[CPU]]- and platform-independent instruction set that can be executed in any environment supporting the Common Language Infrastructure, such as the [[Common Language Runtime|.NET runtime]] on [[Microsoft Windows|Windows]], or the [[cross-platform]] [[Mono (software)|Mono]] runtime. In theory, this eliminates the need to distribute different executable files for different platforms and CPU types. CIL code is verified for safety during runtime, providing better security and reliability than natively compiled executable files.&lt;ref&gt;{{cite book| url = https://books.google.com/books?id=VGT1_UJzjM0C&amp;q=CIL+is+platform-independent&amp;pg=PA15| title = Benefits of CIL| access-date = 2011-02-17| last1 = Troelsen| first1 = Andrew| date = 2009-05-02| isbn = 9781590598849}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://www.visualcplusdotnet.com/visualcplusdotnet1.html|title=Unmanaged, Managed Extensions for C++, Managed and .Net Framework|website=www.visualcplusdotnet.com|access-date=2020-07-07}}&lt;/ref&gt;

The execution process looks like this:

#Source code is converted to CIL [[bytecode]] and a [[Assembly (CLI)|CLI assembly]] is created.
#Upon execution of a CIL assembly, its code is passed through the runtime's [[Just-in-time compilation|JIT compiler]] to generate native code. Ahead-of-time compilation may also be used, which eliminates this step, but at the cost of executable-file portability.
#The computer's processor executes the native code.

==Instructions==
{{See also|List of CIL instructions}}

CIL bytecode has [[instruction (computer science)|instruction]]s for the following groups of tasks:
*Load and store
*[[Arithmetic]]
*[[Type conversion]]
*[[Dynamic memory allocation|Object creation and manipulation]]
*[[stack (data structure)|Operand stack management (push / pop)]]
*[[branch (computer science)|Control transfer (branching)]]
*[[Subroutine|Method invocation and return]]
*[[Exception handling|Throwing exceptions]]
*[[Monitor (synchronization)|Monitor-based concurrency]]
*Data and function pointers manipulation needed for C++/CLI and unsafe C# code

==Computational model==
The Common Intermediate Language is object-oriented and [[stack-based]], which means that instruction parameters and results are kept on a single stack instead of in several registers or other memory locations, as in most [[programming language]]s.

Code that adds two numbers in [[x86 assembly language]], where eax and edx specify two different [[X86#x86_registers|general-purpose registers]]:
&lt;syntaxhighlight lang=&quot;asm&quot;&gt;
add eax, edx
&lt;/syntaxhighlight&gt;

Could in an [[intermediate language]] (IL) look like this, where 0 is eax and 1 is edx:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
ldloc.0    // push local variable 0 onto stack
ldloc.1    // push local variable 1 onto stack
add        // pop and add the top two stack items then push the result onto the stack
stloc.0    // pop and store the top stack item to local variable 0
&lt;/syntaxhighlight&gt;

In the latter example, the values of the two registers, eax and edx, are first pushed on the stack. When the add-instruction is called the operands are &quot;popped&quot;, or retrieved, and the result is &quot;pushed&quot;, or stored, on the stack. The resulting value is then popped from the stack and stored in eax.

===Object-oriented concepts===
CIL is designed to be object-oriented. You may create objects, call methods, and use other types of members, such as fields.

Every [[Method (programming)|method]] needs (with some exceptions) to reside in a class. So does this static method:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
.class public Foo {
    .method public static int32 Add(int32, int32) cil managed {
        .maxstack 2
        ldarg.0 // load the first argument;
        ldarg.1 // load the second argument;
        add     // add them;
        ret     // return the result;
    }
}
&lt;/syntaxhighlight&gt;

The method Foo does not require any instance of Foo to be declared because it is declared as static, and it may then be used like this in C#:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
int r = Foo.Add(2, 3);    // 5
&lt;/syntaxhighlight&gt;

In CIL it would look like this:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
ldc.i4.2
ldc.i4.3
call int32 Foo::Add(int32, int32)
stloc.0
&lt;/syntaxhighlight&gt;

====Instance classes====
An instance class contains at least one [[Constructor (object-oriented programming)|constructor]] and some [[Instance (computer science)|instance]] members. The following class has a set of methods representing actions of a Car-object.
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
.class public Car {
    .method public specialname rtspecialname instance void .ctor(int32, int32) cil managed {
        /* Constructor */
    }

    .method public void Move(int32) cil managed { /* Omitting implementation */ }
    .method public void TurnRight() cil managed { /* Omitting implementation */ }
    .method public void TurnLeft() cil managed { /* Omitting implementation */ }
    .method public void Brake() cil managed { /* Omitting implementation */ }
}
&lt;/syntaxhighlight&gt;

====Creating objects====
In C# class instances are created like this:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
Car myCar = new Car(1, 4); 
Car yourCar = new Car(1, 3); 
&lt;/syntaxhighlight&gt;

And those statements are roughly the same as these instructions in CIL:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
ldc.i4.1
ldc.i4.4
newobj instance void Car::.ctor(int, int)
stloc.0    // myCar = new Car(1, 4);
ldc.i4.1
ldc.i4.3
newobj instance void Car::.ctor(int, int)
stloc.1    // yourCar = new Car(1, 3);
&lt;/syntaxhighlight&gt;

====Invoking instance methods====
Instance methods are invoked in C# as the one that follows:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
myCar.Move(3);
&lt;/syntaxhighlight&gt;

As invoked in CIL:
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
ldloc.0    // Load the object &quot;myCar&quot; on the stack
ldc.i4.3
call instance void Car::Move(int32)
&lt;/syntaxhighlight&gt;

===Metadata===
{{Main|Metadata (CLI)}}

The [[Common Language Infrastructure]] (CLI) records information about compiled classes as [[metadata]]. Like the type library in the [[Component Object Model]], this enables applications to support and discover the interfaces, classes, types, methods, and fields in the assembly. The process of reading such metadata is called &quot;[[Reflection (computer science)|reflection]]&quot;.

Metadata can be data in the form of &quot;attributes&quot;. Attributes can be customized by extending the &lt;code&gt;Attribute&lt;/code&gt; class. This is a powerful feature. It allows the creator of the class the ability to adorn it with extra information that consumers of the class can use in various meaningful ways, depending on the application domain.

==Example==
Below is a basic [[Hello, World]] program written in CIL. It will display the string &quot;Hello, world!&quot;.
&lt;syntaxhighlight lang=&quot;csharp&quot;&gt;
.assembly Hello {}
.assembly extern mscorlib {}
.method static void Main()
{
    .entrypoint
    .maxstack 1
    ldstr &quot;Hello, world!&quot;
    call void [mscorlib]System.Console::WriteLine(string)
    ret
}
&lt;/syntaxhighlight&gt;
