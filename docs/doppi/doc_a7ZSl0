The 1984 television version featured [[Ann-Margret]] as Blanche, [[Treat Williams]] as Stanley, [[Beverly D'Angelo]] as Stella and [[Randy Quaid]] as Mitch. It was directed by [[John Erman]] and the teleplay was adapted by [[Oscar Saul]]. The music score by composed by [[Marvin Hamlisch]]. Ann-Margret, D'Angelo and Quaid were all nominated for [[Emmy Awards]], but none won. However, it did win four Emmys, including one for [[cinematographer]] [[Bill Butler (cinematographer)|Bill Butler]]. Ann-Margret won a [[Golden Globe]] award for her performance and Treat Williams was nominated for Best Actor in a Miniseries or TV Movie.

A 1995 television version was based on the highly successful Broadway revival that starred [[Alec Baldwin]] and [[Jessica Lange]]. However, only Baldwin and Lange were from the stage production. The TV version added [[John Goodman]] as Mitch and [[Diane Lane]] as Stella. This production was directed by [[Glenn Jordan]]. Baldwin, Lange and Goodman all received [[Emmy Award]] nominations. Lange won a [[Golden Globe]] award (for Best Actress in a Miniseries or TV Movie), while Baldwin was nominated for Best Actor, but did not win.

In 1998, [[Public Broadcasting Service|PBS]] aired a taped version of the opera adaptation that featured the original [[San Francisco Opera]] cast. The program received an [[Emmy Award]] nomination for Outstanding Classical Music/Dance Program.&lt;ref&gt;{{Cite web|url=https://www.emmys.com/shows/streetcar-named-desire-san-francisco|title=&quot;A Streetcar Named Desire&quot; From The San Francisco|website=Television Academy|language=en|access-date=2019-06-18}}&lt;/ref&gt;

In a 1992 episode of ''[[The Simpsons]]'', &quot;[[A Streetcar Named Marge]]&quot;, a musical version of the play, ''Oh, Streetcar!'', was featured. [[Ned Flanders]] and [[Marge Simpson]] took the leading roles as Stanley and Blanche, respectively.

===''Belle Reprieve''===
Bette Bourne and Paul Shaw of the British gay theater company Bloolips, and Peggy Shaw and Lois Weaver of the American lesbian theater company Split Britches, collaborated and performed a gender-bent production of ''Belle Reprieve'', a twisted adaption of ''Streetcar''. This theatrical piece creates a &quot;Brechtian 'epic drama'&quot; that relies on the reflective rather than emotional involvement of the audience—a &quot;commentary on the sexual roles and games in Williams's text&quot;. Blanche was played by Bette Bourne as &quot;man in a dress&quot;, Stanley was played by Peggy Shaw as a &quot;butch lesbian&quot;, Mitch was played by Paul Shaw as a &quot;fairy disguised as a man&quot;, and Stella was played by Lois Weaver as a &quot;woman disguised as a woman&quot;.&lt;ref&gt;Geis, Deborah. “Deconstructing (A Streetcar Named) Desire: Gender Recitation in Belle Reprieve”. Feminist Theatrical Revisions of Classic Works. Ed. Sharon Friedman. Jefferson, NC and London: McFarland &amp; Company, Inc., 2009. 237-246. Print.&lt;/ref&gt;

==Inspirations==
[[File:DesireSpottedSTiles.jpg|right|thumb|The streetcar took its name from Desire Street in the [[9th Ward of New Orleans]]]]
{{Main|Streetcars in New Orleans#Historic lines}}

The Desire Line ran from 1920 to 1948, at the height of streetcar use in New Orleans. The route ran down Royal, through the Quarter, to [[Desire Street]] in the [[Bywater, New Orleans|Bywater district]], and back up to Canal. Blanche's route in the play—&quot;They told me to take a streetcar named Desire, transfer to one called Cemeteries and ride six blocks and get off at—Elysian Fields!&quot;—is allegorical, taking advantage of New Orleans's colorful street names: the Desire line itself crossed Elysian Fields Avenue on its way to Canal Street. There, one could transfer to the Cemeteries line, which ran along Canal, blocks away from Elysian Fields.

The character of Blanche is thought to be based on Williams' sister, Rose Williams, who struggled with [[mental health]] problems and became incapacitated after a [[lobotomy]].&lt;ref name=&quot;play&quot; /&gt; The success of the play enabled Williams to finance his sister's care.
&lt;ref&gt;{{Cite web
|url=https://www.independent.co.uk/news/people/obituary-rose-williams-1362925.html
|title=Obituary: Rose Williams
|date=12 September 1996
|publisher=The Independent
|access-date=28 May 2020
}}&lt;/ref&gt;

The theatre critic and former actress [[Blanche Marvin]], a friend of Williams, says the playwright used her name for the character Blanche DuBois, named the character's sister Stella after Marvin's former surname &quot;Zohar&quot; (which means &quot;Star&quot;), and took the play's line &quot;I've always depended on the kindness of strangers&quot; from something she said to him.&lt;ref name=&quot;Clark&quot;&gt;{{cite web |url=https://www.independent.co.uk/arts-entertainment/theatre-dance/news/critic-claims-i-was-the-inspiration-for-blanche-dubois-9630885.html |title=Critic claims 'I was the inspiration for Blanche DuBois' |last=Clark |first=Nick |date=July 27, 2014 |work=[[The Independent]] |accessdate=August 29, 2014}}&lt;/ref&gt;

==&quot;A Streetcar Named Success&quot;==
&quot;[[A Streetcar Named Success]]&quot; is an essay by [[Tennessee Williams]] about art and the artist's role in society. It is often included in paper editions of ''A Streetcar Named Desire''. A version of this essay first appeared in ''The New York Times'' on November 30, 1947, four days before the opening of ''A Streetcar Named Desire''. Another version of this essay, titled &quot;The Catastrophe of Success&quot;, is sometimes used as an introduction to ''[[The Glass Menagerie]]''.

==Awards and nominations==
; Awards
* 1948 New York Drama Critics' Circle Best Play
* 1948 Tony Award for Best Actress in a Play&amp;nbsp;– [[Jessica Tandy]]
* 1948 Pulitzer Prize for Drama
* 1992 Theater World Award for Best Actress in a Play&amp;nbsp;– [[Jessica Lange]]
* 2003 Olivier Award for Best Supporting Actress in a Play – [[Essie Davis]]
* 2010 Olivier Award for Best Actress in a Play&amp;nbsp;– [[Rachel Weisz]]
* 2010 Olivier Award for Best Supporting Actress in a Play – [[Ruth Wilson (actress)|Ruth Wilson]]

; Nominations
* 1988 Tony Award for Best Revival of a Play
* 1988 Tony Award for Best Actress in a Play&amp;nbsp;– [[Frances McDormand]]
* 1988 Tony Award for Best Actress in a Play&amp;nbsp;– [[Blythe Danner]]
* 1992 Tony Award for Best Actor in a Play&amp;nbsp;– [[Alec Baldwin]]
* 2005 Tony Award for Best Featured Actress in a Play&amp;nbsp;– [[Amy Ryan]]
* 2005 Tony Award for Best Costume Design of a Play
* 2005 Tony Award for Best Lighting Design of a Play
* 2010 Olivier Award for Best Revival of a Play
* 2015 Olivier Award for Best Revival of a Play
* 2015 Olivier Award for Best Actress in a Play&amp;nbsp;– [[Gillian Anderson]]

==Auction record==
On October 1, 2009, [[Swann Galleries]] auctioned an unusually fine copy of ''A Streetcar Named Desire'', New York, 1947, signed by Williams and dated 1976 for $9,000, a record price for a signed copy of the play.

==References==
{{Reflist}}

==External links==
{{sisterlinks|d=Q842106|c=category:A Streetcar Named Desire|n=no|b=no|v=no|voy=no|m=no|mw=no|species=no|s=no|wikt=no|q=no|display=''A Streetcar Named Desire''}}
* {{IBDB show|1290|A Streetcar Named Desire {{noitalic|(New York productions chronology)}}}}

{{A Streetcar Named Desire|state=expanded}}
{{Tennessee Williams}}
{{Pulitzer Prize for Drama 1926-1950}}

{{DEFAULTSORT:Streetcar Named Desire, A}}
[[Category:1947 plays]]
[[Category:1952 ballet premieres]]
[[Category:American plays adapted into films]]
[[Category:Broadway plays]]
[[Category:Domestic violence in fiction]]
[[Category:LGBT-related plays]]
[[Category:Mental illness in fiction]]
[[Category:New York Drama Critics' Circle Award winners]]
[[Category:Off-Broadway plays]]
[[Category:Plays adapted into ballets]]
[[Category:Plays adapted into operas]]
[[Category:Plays by Tennessee Williams]]
[[Category:Plays set in New Orleans]]
[[Category:Pulitzer Prize for Drama-winning works]]
[[Category:Rape in fiction]]
[[Category:West End plays]]</text>
      <sha1>g6qgu5qi3v0nzghvgv7lbromh9pylv4</sha1>
    </revision>
  </page>
  <page>
    <title>Jakarta Messaging</title>
    <ns>0</ns>
    <id>42866</id>
    <revision>
      <id>968171457</id>
      <parentid>968171453</parentid>
      <timestamp>2020-07-17T17:47:50Z</timestamp>
      <contributor>
        <username>ClueBot NG</username>
        <id>13286072</id>
      </contributor>
      <minor />
      <comment>Reverting possible vandalism by [[Special:Contribs/2003:ED:2F0C:9D01:2054:ACFC:BECA:691D|2003:ED:2F0C:9D01:2054:ACFC:BECA:691D]] to version by Quoth-22. [[WP:CBFP|Report False Positive?]] Thanks, [[WP:CBNG|ClueBot NG]]. (3741703) (Bot)</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12824" xml:space="preserve">The '''Jakarta Messaging''' API (formerly '''Java Message Service''' or '''JMS''' API) is a [[Java (programming language)|Java]] [[application programming interface]] (API) for [[message-oriented middleware]]. It provides generic messaging models, able to handle the [[producer–consumer problem]], that can be used to facilitate the sending and receiving of messages between [[software system]]s.&lt;ref&gt;Curry, Edward. 2004. [http://www.edwardcurry.org/publications/curry_MfC_MOM_04.pdf &quot;Message-Oriented Middleware&quot;]. In Middleware for Communications, ed. Qusay H Mahmoud, 1-28. Chichester, England: John Wiley and Sons. {{doi|10.1002/0470862084.ch1}}. {{ISBN|978-0-470-86206-3}}&lt;/ref&gt; Jakarta Messaging is a part of [[Jakarta EE]] and was originally defined by a specification developed at Sun Microsystems before being guided by the [[Java Community Process]].&lt;ref&gt;{{cite web |url=https://jcp.org/en/jsr/detail?id=914 |title=JSR 914: Java Message Service (JMS) API |website=The Java Community Process Program |access-date=July 31, 2018}}&lt;/ref&gt;

== General idea of messaging ==
{{See also|Message-oriented middleware|Message passing}}

Messaging is a form of ''[[Loosely coupled#In computing|loosely coupled]]'' distributed communication, where in this context the term 'communication' can be understood as an exchange of messages between software components. Message-oriented technologies attempt to relax ''tightly coupled'' communication (such as [[Transmission Control Protocol|TCP]] network [[Stream socket|sockets]], [[Common Object Request Broker Architecture|CORBA]] or [[Java remote method invocation|RMI]]) by the introduction of an intermediary component. This approach allows software components to communicate with each other indirectly. Benefits of this include message senders not needing to have precise knowledge of their receivers.

The advantages of messaging include the ability to integrate heterogeneous platforms, reduce system bottlenecks, increase scalability, and respond more quickly to change.&lt;ref&gt;Richards et al., pages 3–5.&lt;/ref&gt;

=== Version history ===

* '''JMS 1.0'''&lt;ref name=&quot;jms-101-spec&quot; /&gt;
* '''JMS 1.0.1''' (October 5, 1998)&lt;ref name=&quot;jms-101-spec&quot;&gt;{{cite web |url=http://java.sun.com/products/jms/jms-101-spec.pdf |title=Java Message Service |date=October 5, 1998 |publisher=[[Sun Microsystems]] |archive-url=https://web.archive.org/web/19990224001845/http://java.sun.com/products/jms/jms-101-spec.pdf |archive-date=1999-02-24 |access-date=July 31, 2018 |url-status=live }}&lt;/ref&gt;
* '''JMS 1.0.1a''' (October 30, 1998)&lt;ref&gt;{{cite web |url=http://java.sun.com/products/jms/docs.html |title=Java Message Service Documentation |date=October 30, 1998 |publisher=Sun Microsystems |archive-url=https://web.archive.org/web/19990224001845/http://java.sun.com/products/jms/docs.html |archive-date=1999-02-24 |access-date=July 31, 2018 |url-status=live }}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=http://www.javasoft.com/products/jms/jms-101a-src.zip |title=Java Message Service Source - Version 1.0.1a |date=October 29, 1998 |publisher=Sun Microsystems |archive-url=https://web.archive.org/web/20000816170233/http://www.javasoft.com/products/jms/jms-101a-src.zip |archive-date=August 16, 2000 |access-date=July 31, 2018 |format=ZIP |url-status=dead }}&lt;/ref&gt;
* '''JMS 1.0.2''' (December 17, 1999)&lt;ref&gt;{{cite web |url=http://java.sun.com/products/jms/jms1_0_2-spec.pdf |title=Java Message Service |date=November 9, 1999 |publication-date=December 17, 1999 |publisher=Sun Microsystems |archive-url=https://web.archive.org/web/20000823085445/http://java.sun.com/products/jms/jms1_0_2-spec.pdf |archive-date=2000-08-23 |access-date=July 31, 2018 |url-status=live }}&lt;/ref&gt;
* '''JMS 1.0.2a''' (December 23, 1999)&lt;ref&gt;{{cite web |url=http://java.sun.com/products/jms/docs.html |title=Java Message Service Documentation |date=December 23, 1999 |publisher=Sun Microsystems |archive-url=https://web.archive.org/web/20000229161639/http://java.sun.com/products/jms/docs.html |archive-date=2000-02-29 |access-date=July 31, 2018 |url-status=live }}&lt;/ref&gt;
* '''JMS 1.0.2b''' (August 27, 2001)&lt;ref&gt;{{cite web |url=http://download.oracle.com/otn-pub/jcp/7543-jms-1.0.2b-spec-oth-JSpec/jms-1_0_2b-spec.pdf |title=Java Message Service |date=August 27, 2001 |publisher=Sun Microsystems |access-date=July 31, 2018}}&lt;/ref&gt;
* '''JMS 1.1''' (April 12, 2002)&lt;ref&gt;{{cite web |url=https://github.com/javaee/jms-spec/raw/9383d33ff79a156d09fb5c9c0ccdfd6b844b1d54/jms1.1/specification/jms-1_1-fr-spec.pdf |title=Java Message Service |date=April 12, 2002 |publisher=Sun Microsystems |access-date=July 31, 2018}}&lt;/ref&gt;
* '''JMS 2.0''' (May 21, 2013)&lt;ref&gt;{{cite web |url=https://github.com/javaee/jms-spec/raw/9383d33ff79a156d09fb5c9c0ccdfd6b844b1d54/jms2.0/specification/word/JMS20.pdf |title=Java Message Service |date=March 20, 2013 |publisher=[[Oracle Corporation|Oracle]] |access-date=July 31, 2018}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=https://javaee.github.io/jms-spec/pages/JMS20FinalRelease |title=JMS 2.0 Final Release |date=June 9, 2017 |website=Java Message Service Specification |access-date=July 31, 2018}}&lt;/ref&gt;
* '''JMS 2.0a''' (March 16, 2015)&lt;ref&gt;{{cite web |url=https://github.com/javaee/jms-spec/raw/9383d33ff79a156d09fb5c9c0ccdfd6b844b1d54/jms2.0a/specification/word/JMS20.pdf |title=Java Message Service |date=March 10, 2015 |publisher=Oracle |access-date=July 31, 2018}}&lt;/ref&gt;&lt;ref&gt;{{cite web |url=https://javaee.github.io/jms-spec/pages/JMS20RevA |title=JMS 2.0 errata release (Rev a) |date=July 5, 2017 |website=Java Message Service Specification |access-date=July 31, 2018}}&lt;/ref&gt;

JMS 2.0 is currently maintained under the [[Java Community Process]] as [[Java Specification Request|JSR]] 343.&lt;ref&gt;{{cite web |url=https://jcp.org/en/jsr/detail?id=343 |title=JSR 343: Java Message Service 2.0 |website=The Java Community Process Program |access-date=July 31, 2018}}&lt;/ref&gt;

JMS 3.0 is under early development as part of Jakarta EE.&lt;ref&gt;{{cite web |url=https://www.tomitribe.com/blog/jms-3-0-get-involved/ |title=JMS 3.0: Get Involved! |website=Tomitribe |first=Richard |last=Monson-Haefel |date=December 6, 2018 |access-date=July 17, 2020}}&lt;/ref&gt;

== Elements ==

The following are JMS elements:&lt;ref name=&quot;oraclejms&quot;&gt;[http://www.oracle.com/technetwork/java/jms/index.html Java Message Service (JMS)]&lt;/ref&gt;

; JMS provider
: An implementation of the JMS interface for message-oriented middleware (MOM). Providers are implemented as either a Java JMS implementation or an adapter to a non-Java MOM.
; JMS client
: An application or process that produces and/or receives messages.
; JMS producer/publisher
: A JMS client that creates and sends messages.
; JMS consumer/subscriber
: A JMS client that receives messages.
; JMS message
: An object that contains the data being transferred between JMS clients.
; JMS queue
: A staging area that contains messages that have been sent and are waiting to be read (by only one consumer). As the name queue suggests, the messages are delivered in the order sent. A JMS queue guarantees that each message is processed only once.
; JMS topic
: A distribution mechanism for publishing messages that are delivered to multiple subscribers.

== Models ==
The JMS API supports two distinct models:
* Point-to-point
* Publish-and-subscribe

===Point-to-point model===
Under the ''point-to-point'' messaging system, messages are routed to individual consumers who maintain queues of incoming messages. This messaging type is built on the concept of [[message queue]]s, senders, and receivers. Each message is addressed to a specific queue, and the receiving clients extract messages from the queues established to hold their messages. While any number of producers can send messages to the queue, each message is guaranteed to be delivered, and consumed by one consumer. Queues retain all messages sent to them until the messages are consumed or until the messages expire. If no consumers are registered to consume the messages, the queue holds them until a consumer registers to consume them.

===Publish-and-subscribe model===
The ''[[publish–subscribe pattern|publish-and-subscribe]]'' model supports publishing messages to a particular message &quot;topic&quot;. ''Subscribers'' may register interest in receiving messages ''published'' on a particular message topic. In this model, neither the publisher nor the subscriber knows about each other. A good analogy for this is an anonymous bulletin board.

* Zero or more consumers will receive the message.
* There is a timing dependency between publishers and subscribers. The publisher has to create a message topic for clients to subscribe. The subscriber has to remain continuously active to receive messages, unless it has established a durable subscription. In that case, messages published while the subscriber is not connected will be redistributed whenever it reconnects.

JMS provides a way of separating the application from the [[Transport Layer|transport layer]] of providing data. The same Java [[Class (computer science)|classes]] can be used to communicate with different JMS providers by using the [[Java Naming and Directory Interface]] (JNDI) information for the desired provider. The classes first use a ''connection factory'' to connect to the queue or topic, and then use populate and send or publish the messages. On the receiving side, the clients then receive or subscribe to the messages.

== URI scheme ==
RFC 6167 defines a &lt;code&gt;jms:&lt;/code&gt; [[URI scheme]] for the Java Message Service.

== Provider implementations ==

&lt;!--******
Wikipedia is not a repository for lists, directories or Advocacy of commercial products and/or websites; add only products that are notable enough to have their own Wikipedia article.
******--&gt;

To use JMS, one must have a JMS provider that can manage the sessions, queues and topics. Starting from Java EE version 1.4, a JMS provider has to be contained in ''all'' Java EE application servers. This can be implemented using the message inflow management of the [[Java EE Connector Architecture]], which was first made available in that version.

The following is a list of common JMS providers:

* [[Amazon Simple Queue Service|Amazon SQS]]'s [http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/jmsclient.html Java Messaging Library]
* [[Apache ActiveMQ]]
* [[Apache Qpid]], using [[AMQP]]&lt;ref&gt;{{cite web|title=Apache Qpid™: Open Source AMQP Messaging|url=http://qpid.apache.org/}}&lt;/ref&gt;
* [[IBM WebSphere MQ|IBM MQ]] (formerly MQSeries, then WebSphere MQ)
* [[IBM WebSphere Application Server]]'s Service Integration Bus (SIBus)&lt;ref&gt;{{cite web|last=Wallis|first=Graham|title=Choosing a messaging system: WebSphere MQ vs. the WebSphere Application Server Service Integration Bus|url=http://www.ibm.com/developerworks/websphere/library/techarticles/1109_wallis/1109_wallis.html|work=IBM developerWorks}}&lt;/ref&gt;
* [[JBoss Messaging]] and [[HornetQ]] from [[JBoss (company)|JBoss]]
* [[JORAM]] from the [[OW2 Consortium]]
* [[Open Message Queue]] from [[Oracle Corporation|Oracle]]
* [[OpenJMS]] from the OpenJMS Group
* [[Oracle WebLogic Server]] and [[Oracle AQ]]
* [[RabbitMQ]] from [[Pivotal Software]]

==See also==
* [[Message Driven Bean]]s
* [[Message queue]] &amp;mdash; the concept underlying JMS
* [[Service-oriented architecture]]
** [[Event-driven SOA]]
* Messaging technologies that do ''not'' implement the JMS API include:
** [[Advanced Message Queuing Protocol]] (AMQP) &amp;mdash; standardized message queue protocol with multiple independent implementations
** [[Data Distribution Service]] (DDS) &amp;mdash; An [[Object Management Group| Object Management Group (OMG)]] standardized real-time messaging system with over ten implementations that have demonstrated interoperability between publishers and subscribers
** [[Microsoft Message Queuing]] &amp;mdash; similar technology, implemented for [[.NET Framework]]

==References==
{{Reflist}}

==Further reading==
* {{Cite book |first=Mark |last=Richards |author2=Richard Monson-Haefel |author3=David A. Chappell |year=2009 |title=Java Message Service, Second Edition |publisher=O'Reilly |isbn=978-0-596-52204-9}}

== External links ==
&lt;!--*****  No links to individual JMS implementations  *****--&gt;

{{Wikibooks|Java EE Programming|Java Message Service}}
* {{Official website}}
* [https://jcp.org/en/jsr/detail?id=343 JSR 343: Java Message Service 2.0]
* {{Javadoc:EE|package=javax.jms|javax/jms}} API [[Javadoc]] documentation
* [https://docs.oracle.com/javaee/7/tutorial/partmessaging.htm Oracle's Java EE 7 JMS tutorial]
* [https://www.theserverside.com/matrix A historical comparison matrix of JMS providers]

{{Jakarta EE}}

{{DEFAULTSORT:Message Service}}
[[Category:Java enterprise platform]]
[[Category:Java specification requests]]
[[Category:Message-oriented middleware]]
[[Category:Software architecture]]</text>
      <sha1>es2hjqgx2ahiqn1a200ga76v4mkvvpq</sha1>
    </revision>
  </page>
  <page>
    <title>Stock farming</title>
    <ns>0</ns>
    <id>42868</id>
    <redirect title="Agriculture" />
    <revision>
      <id>15938292</id>
      <parentid>184208</parentid>
      <timestamp>2002-08-30T15:08:56Z</timestamp>
      <contributor>
        <username>Andre Engels</username>
        <id>300</id>
      </contributor>
      <minor />
      <comment>circumventing indirect redirect</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25" xml:space="preserve">#REDIRECT [[agriculture]]</text>
      <sha1>jyoeagpqysxhzoulqghyxsx2m5apvh6</sha1>
    </revision>
  </page>
  <page>
    <title>Jakarta EE</title>
    <ns>0</ns>
    <id>42869</id>
    <revision>
      <id>991240034</id>
      <parentid>988703996</parentid>
      <timestamp>2020-11-29T01:18:23Z</timestamp>
      <contributor>
        <username>Monkbot</username>
        <id>20483999</id>
      </contributor>
      <minor />
      <comment>[[User:Monkbot/task 18|Task 18 (cosmetic)]]: eval 53 templates: del empty params (18×); hyphenate params (32×);</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="31593" xml:space="preserve">{{Multiple issues|
{{lead too short|date=August 2016}}
{{Context|date=May 2018}}
}}
{{Infobox software platform
| name        = Jakarta EE
| icon        = [[File:Jakarta ee logo schooner color stacked default.svg|frameless|Jakarta EE logo schooner color stacked default]]
| image       = 
| caption     = 
| website     = [https://jakarta.ee/]
| developer   = [[Eclipse Foundation]]
| target      = &lt;!--operating systems that the platform publishes applications/content for--&gt;
| editor      = &lt;!--editor software for the platform--&gt;
| runtime     = [[Java (software platform)|Java]]
| format      = &lt;!--major file formats on the platform--&gt;
| language    = [[Java (programming language)|Java]]
| application = [[Application server]]
| status      = Active
| license     = [[Eclipse Public License]] or [[GNU General Public License]] w/[[Classpath exception]]
}}
{{java platforms}}
'''Jakarta EE''', formerly '''Java Platform, Enterprise Edition''' ('''Java EE''') and '''Java 2 Platform, Enterprise Edition''' ('''J2EE''') is a set of specifications, extending [[Java SE]] 8&lt;ref&gt;{{cite web |url=http://docs.oracle.com/javaee/6/firstcup/doc/gkhoy.html |title=Differences between Java EE and Java SE - Your First Cup: An Introduction to the Java EE Platform |publisher=Docs.oracle.com |date=2012-04-01 |access-date=2012-07-18}}&lt;/ref&gt; with specifications for enterprise features such as [[distributed computing]] and [[web service]]s.&lt;ref&gt;{{cite web |url=https://www.oracle.com/technetwork/java/javaee/overview/index.html |title=Java EE Overview |access-date=February 26, 2017 |publisher=[[Oracle Corporation]]}}&lt;/ref&gt; Jakarta EE applications are run on [[reference implementation|reference runtime]]s, that can be [[microservices]] or [[application server]]s, which handle transactions, security, scalability, [[Concurrency (computer science)|concurrency]] and management of the components it is deploying.

Jakarta EE is defined by its [[program specification|specification]]. The specification defines [[application programming interface|API]]s (application programming interface) and their interactions. As with other [[Java Community Process]] specifications, providers must meet certain conformance requirements in order to declare their products as ''Jakarta EE compliant''.

Examples of contexts in which Jakarta EE referencing runtimes are used are: [[e-commerce]], accounting, banking information systems.

== History ==
The platform was known as ''Java 2 Platform, Enterprise Edition'' or ''J2EE'' from version 1.2, until the name was changed to ''Java Platform, Enterprise Edition'' or ''Java EE'' in version 1.5.

Java EE was maintained by [[Oracle Corporation|Oracle]] under the [[Java Community Process]]. On September 12, 2017, [[Oracle Corporation]] announced that it would submit Java EE to the [[Eclipse Foundation]].&lt;ref&gt;{{Cite web|url=https://adtmag.com/articles/2017/09/12/java-ee-moving-to-eclipse.aspx|title=Java EE Is Moving to the Eclipse Foundation|website=ADTmag|language=en|access-date=2017-09-13|date=2017-09-12|author=John K. Waters}}&lt;/ref&gt;
The Eclipse top-level project has been named Eclipse Enterprise for Java (EE4J).&lt;ref&gt;{{cite web |url=https://www.eclipse.org/ee4j/faq.php |title=EE4J FAQ &amp;#124; The Eclipse Foundation |first=Wayne |last=Beaton |website=www.eclipse.org}}&lt;/ref&gt; The Eclipse Foundation was forced to change the name because Oracle owns the trademark for the name &quot;Java&quot; and renamed the Java EE platform to Jakarta EE.&lt;ref&gt;{{cite news |last1=Chirgwin |first1=Richard |date=2018-03-04 |df=mdy |url=https://www.theregister.co.uk/2018/03/04/java_ee_is_now_jakarta_ee/ |title=Java EE renamed 'Jakarta EE' after Big Red brand spat |department=Software |work=[[The Register]] |access-date=19 March 2018}}&lt;/ref&gt;&lt;ref&gt;{{cite news |last1=Vaughan-Nichols |first1=Steven J. |date=2018-03-05 |df=mdy |title=Good-bye JEE, hello Jakarta EE |url=https://www.zdnet.com/article/good-bye-jee-hello-jakarta-ee/ |department=Linux and Open Source |work=[[ZDNet]] |access-date=2020-07-10}}&lt;/ref&gt; The name should not be confused with the former [[Jakarta Project]] which fostered a number of current and former Java projects at the [[Apache Software Foundation]].

* J2EE 1.2 (December 12, 1999)
* J2EE 1.3 (September 24, 2001)
* J2EE 1.4 (November 11, 2003)
* Java EE 5 (May 11, 2006)
* Java EE 6 (December 10, 2009)
* Java EE 7 (May 28, 2013,&lt;ref name=&quot;jcp.org&quot;&gt;{{cite web |url=http://jcp.org/en/jsr/detail?id=342 |title=JSR 342: Java™ Platform, Enterprise Edition 7 (Java EE 7) Specification |website=[[Java Community Process]]}}&lt;/ref&gt; but April 5, 2013 according to spec document. June 12, 2013 was the planned kickoff date&lt;ref&gt;{{cite web |url=https://blogs.oracle.com/java/entry/introducing_java_ee_7 |title=Introducing Java EE 7: June 12 Kickoff |first=Tori |last=Wieldt |access-date=2013-05-28 |archive-url=https://web.archive.org/web/20130913205527/https://blogs.oracle.com/java/entry/introducing_java_ee_7 |archive-date=2013-09-13 |url-status=dead}}&lt;/ref&gt;)
* Java EE 8 (August 31, 2017&lt;ref name=&quot;JavaEE8&quot;&gt;{{cite web |url=https://github.com/javaee/javaee-spec/blob/master/download/JavaEE8_Platform_Spec_FinalRelease.pdf |title=Java Platform, Enterprise Edition (Java EE) Specification, v8 |publisher=Oracle}}&lt;/ref&gt;)
* Jakarta EE 8 (September 10, 2019) - fully compatible with Java EE 8&lt;ref&gt;{{cite web |url=https://projects.eclipse.org/jakartaee/releases/8 |title=Jakarta EE 8 |website=projects.eclipse.org |access-date=2020-07-11}}&lt;/ref&gt;
* Jakarta EE 9 (Target: December 8, 2020)&lt;ref&gt;{{cite web |url=https://projects.eclipse.org/releases/jakarta-ee-9 |title=Jakarta EE 9 |website=projects.eclipse.org |access-date=2020-07-11}}&lt;/ref&gt;&lt;ref name=&quot;JakartaEE9ReleasePlan&quot;&gt;{{cite web |url=https://eclipse-ee4j.github.io/jakartaee-platform/jakartaee9/JakartaEE9#jakarta-ee-9-schedule |title=Jakarta EE 9 schedule |website=Jakarta EE Platform Project |access-date=2020-07-11}}&lt;/ref&gt;
