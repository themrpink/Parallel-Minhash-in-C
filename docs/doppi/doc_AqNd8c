{{Portal|Saints}}
* ''[[Coronation of Saint Rosalia]]''
* [[List of Catholic saints]]

== References ==

{{reflist|30em}}

== External links ==

{{Commons category|Saint Rosalia}}
* {{CathEncy|url=http://www.newadvent.org/cathen/13184a.htm|title=St. Rosalia}}

{{Authority control}}

{{DEFAULTSORT:Rosalia, Santa}}

[[Category:1130 births]]
[[Category:1166 deaths]]
[[Category:Sicilian saints]]
[[Category:Italian-American culture]]
[[Category:Italian hermits]]
[[Category:Italo-Normans]]
[[Category:Norman women]]
[[Category:12th-century Christian saints]]
[[Category:Female saints of medieval Italy]]
[[Category:Angelic visionaries]]
[[Category:History of Palermo]]
[[Category:People from Palermo]]
[[Category:Sicilian people of Norman descent]]
[[Category:12th-century French women]]
[[Category:12th-century French people]]
[[Category:12th-century Italian women]]
[[Category:12th-century Italian people]]
[[Category:Medieval Italian saints]]
[[Category:12th-century Normans]]
[[Category:12th-century Norman women]]</text>
      <sha1>h4pcapq309pev1ulmiifg3nc2a2rufz</sha1>
    </revision>
  </page>
  <page>
    <title>Thread (computing)</title>
    <ns>0</ns>
    <id>45303</id>
    <revision>
      <id>990789804</id>
      <parentid>990789550</parentid>
      <timestamp>2020-11-26T14:48:04Z</timestamp>
      <contributor>
        <username>Ipsign</username>
        <id>12876994</id>
      </contributor>
      <comment>/* Further reading */ rm not reputable enough books</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="31243" xml:space="preserve">{{About|the concurrency concept|the multithreading in hardware|Multithreading (computer architecture)|the form of code consisting entirely of [[subroutine]] calls|Threaded code|other uses|Thread (disambiguation)}}
{{More footnotes|date=December 2009}}

[[File:Multithreaded process.svg|thumb|A process with two threads of execution, running on one processor]]

In [[computer science]], a '''thread''' of execution is the smallest sequence of programmed instructions that can be managed independently by a [[scheduling (computing)|scheduler]], which is typically a part of the [[operating system]].&lt;ref&gt;{{cite journal|last1= Lamport|first1= Leslie|authorlink= Leslie Lamport|title= How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs|journal= IEEE Transactions on Computers|volume= C-28|number= 9|pages= 690–691|date= September 1979|url= http://research.microsoft.com/en-us/um/people/lamport/pubs/multi.pdf|doi=10.1109/tc.1979.1675439|s2cid= 5679366}}&lt;/ref&gt; The implementation of threads and [[process (computing)|processes]] differs between operating systems, but in most cases a thread is a component of a process. [[#Multithreading|Multiple threads]] can exist within one process, executing [[concurrent computation|concurrently]] and sharing resources such as [[Shared memory (interprocess communication)|memory]], while different processes do not share these resources. In particular, the threads of a process share its executable code and the values of its [[Memory management#HEAP|dynamically allocated]] variables and non-[[thread-local storage|thread-local]] [[global variable]]s at any given time.

== History ==
Threads made an early appearance under the name of &quot;tasks&quot; in [[OS/360 and successors#MVT|OS/360 Multiprogramming with a Variable Number of Tasks]] (MVT) in 1967. Saltzer (1966) credits [[Victor A. Vyssotsky]] with the term &quot;thread&quot;.&lt;ref&gt;
[http://web.mit.edu/Saltzer/www/publications/MIT-MAC-TR-030.ocr.pdf Traffic Control in a Multiplexed Computer System], [[Jerry Saltzer | Jerome Howard Saltzer]], Doctor of Science thesis, 1966, see footnote on page 20.&lt;/ref&gt;

Popularity of threading has increased around 2003, as the growth of the CPU frequency was replaced with the growth of number of cores, in turn requiring concurrency to utilize multiple cores.&lt;ref&gt;{{cite web|url=http://gotw.ca/publications/concurrency-ddj.htm|title=The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software|author=[[Herb Sutter]]}}&lt;/ref&gt;

== Processes, kernel threads, user threads, and fibers ==

Scheduling can be done at the kernel level or user level, and multitasking can be done preemptively or cooperatively. This yields a variety of related concepts.

===Processes===
{{Main|Process (computing)}}
At the kernel level, a ''process'' contains one or more ''kernel threads'', which share the process's resources, such as memory and file handles – a process is a unit of resources, while a thread is a unit of scheduling and execution. Kernel scheduling is typically uniformly done preemptively or, less commonly, cooperatively. At the user level a process such as a [[runtime system]] can itself schedule multiple threads of execution. If these do not share data, as in Erlang, they are usually analogously called processes,&lt;ref&gt;{{cite web
|title=Erlang: 3.1 Processes
|url=http://www.erlang.org/doc/getting_started/conc_prog.html}}&lt;/ref&gt; while if they share data they are usually called ''(user) threads'', particularly if preemptively scheduled. Cooperatively scheduled user threads are known as ''fibers''; different processes may schedule user threads differently. User threads may be executed by kernel threads in various ways (one-to-one, many-to-one, many-to-many). The term &quot;[[light-weight process]]&quot; variously refers to user threads or to kernel mechanisms for scheduling user threads onto kernel threads.

A ''process'' is a &quot;heavyweight&quot; unit of kernel scheduling, as creating, destroying, and switching processes is relatively expensive. Processes own [[Resource (computer science)|resources]] allocated by the operating system. Resources include memory (for both code and data), [[Handle (computing)|file handles]], sockets, device handles, windows, and a [[process control block]]. Processes are ''isolated'' by [[process isolation]], and do not share address spaces or file resources except through explicit methods such as inheriting file handles or shared memory segments, or mapping the same file in a shared way – see [[interprocess communication]]. Creating or destroying a process is relatively expensive, as resources must be acquired or released. Processes are typically preemptively multitasked, and process switching is relatively expensive, beyond basic cost of [[context switching]], due to issues such as cache flushing (in particular, process switching changes virtual memory addressing, causing invalidation and thus flushing of an untagged [[translation lookaside buffer]], notably on x86).

===Kernel threads===
{{anchor|kernel thread}}
A ''kernel thread'' is a &quot;lightweight&quot; unit of kernel scheduling. At least one kernel thread exists within each process. If multiple kernel threads exist within a process, then they share the same memory and file resources. Kernel threads are preemptively multitasked if the operating system's process [[Scheduling (computing)|scheduler]] is preemptive. Kernel threads do not own resources except for a [[call stack|stack]], a copy of the [[processor register|registers]] including the [[program counter]], and [[thread-local storage]] (if any), and are thus relatively cheap to create and destroy. Thread switching is also relatively cheap: it requires a context switch (saving and restoring registers and stack pointer), but does not change virtual memory and is thus cache-friendly (leaving TLB valid). The kernel can assign one thread to each logical core in a system (because each processor splits itself up into multiple logical cores if it supports multithreading, or only supports one logical core per physical core if it does not), and can swap out threads that get blocked. However, kernel threads take much longer than user threads to be swapped.

===User threads===
{{anchor|user thread}}
Threads are sometimes implemented in [[User space|userspace]] libraries, thus called ''user threads''. The kernel is unaware of them, so they are managed and scheduled in [[User space|userspace]]. Some implementations base their user threads on top of several kernel threads, to benefit from [[Multiprocessing|multi-processor]] machines ([[Thread (computing)#Threading models|M:N model]]). User threads as implemented by [[virtual machine]]s are also called [[green threads]]. 

As user thread implementations are typically entirely in [[userspace]], context switching between user threads within the same process is extremely efficient because it does not require any interaction with the kernel at all: a context switch can be performed by locally saving the CPU registers used by the currently executing user thread or fiber and then loading the registers required by the user thread or fiber to be executed. Since scheduling occurs in userspace, the scheduling policy can be more easily tailored to the requirements of the program's workload.

However, the use of blocking system calls in user threads (as opposed to kernel threads) can be problematic. If a user thread or a fiber performs a system call that blocks, the other user threads and fibers in the process are unable to run until the system call returns. A typical example of this problem is when performing I/O: most programs are written to perform I/O synchronously. When an I/O operation is initiated, a system call is made, and does not return until the I/O operation has been completed. In the intervening period, the entire process is &quot;blocked&quot; by the kernel and cannot run, which starves other user threads and fibers in the same process from executing.

A common solution to this problem (used, in particular, by many of green threads implementations) is providing an I/O API that implements a synchronous interface by using non-blocking I/O internally, and scheduling another user thread or fiber while the I/O operation is in progress. Similar solutions can be provided for other blocking system calls. Alternatively, the program can be written to avoid the use of synchronous I/O or other blocking system calls (in particular, using non-blocking I/O, including lambda continuations and/or async/[[await]] primitives&lt;ref&gt;{{cite web|url=https://www.youtube.com/watch?v=6lXUrvlMXNU|title=Eight Ways to Handle Non-blocking Returns in Message-passing Programs: from C++98 via C++11 to C++20|author=Sergey Ignatchenko|publisher=CPPCON}}&lt;/ref&gt;).

===Fibers===
{{Main|Fiber (computer science)}}
[[Fiber (computer science)|Fibers]] are an even lighter unit of scheduling which are [[cooperative multitasking|cooperatively scheduled]]: a running fiber must explicitly &quot;[[Yield (multithreading)|yield]]&quot; to allow another fiber to run, which makes their implementation much easier than kernel or [[user threads]]. A fiber can be scheduled to run in any thread in the same process. This permits applications to gain performance improvements by managing scheduling themselves, instead of relying on the kernel scheduler (which may not be tuned for the application). Parallel programming environments such as [[OpenMP]] typically implement their tasks through fibers. Closely related to fibers are [[coroutine]]s, with the distinction being that coroutines are a language-level construct, while fibers are a system-level construct.

===Threads vs. processes pros and cons===
Threads differ from traditional [[computer multitasking| multitasking]] operating-system [[process (computing) |processes]] in several ways:
* processes are typically independent, while threads exist as subsets of a process
* processes carry considerably more [[state (computer science) |state]] information than threads, whereas multiple threads within a process share process state as well as [[computer storage |memory]] and other [[resource (computer science)| resources]]
* processes have separate [[address space]]s, whereas threads share their address space
* processes interact only through system-provided [[inter-process communication]] mechanisms
* [[context switch]]ing between threads in the same process typically occurs faster than context switching between processes

Systems such as [[Windows NT]] and [[OS/2]] are said to have ''cheap'' threads and ''expensive'' processes; in other operating systems there is not so great a difference except in the cost of an [[address space | address-space]] switch, which on some architectures (notably [[x86]]) results in a [[translation lookaside buffer]] (TLB) flush.

Advantages and disadvantages of threads vs processes include:
* ''Lower resource consumption'' of threads: using threads, an application can operate using fewer resources than it would need when using multiple processes. 
* ''Simplified sharing and communication'' of threads: unlike processes, which require a [[message passing]] or shared memory mechanism to perform [[inter-process communication]] (IPC), threads can communicate through data, code and files they already share.
* ''Thread crashes a process'': due to threads sharing the same address space, an illegal operation performed by a thread can crash the entire process; therefore, one misbehaving thread can disrupt the processing of all the other threads in the application.

==Scheduling==
===Preemptive vs cooperative scheduling===
Operating systems schedule threads either [[Preemptive scheduling|preemptively]] or [[Cooperative multitasking|cooperatively]]. On [[Operating system#Single- and multi-user|multi-user operating systems]], [[preemptive multithreading]] is the more widely used approach for its finer grained control over execution time via [[context switch]]ing. However, preemptive scheduling may context switch threads at moments unanticipated by programmers therefore causing [[lock convoy]], [[priority inversion]], or other side-effects. In contrast, [[Cooperative multitasking|cooperative multithreading]] relies on threads to relinquish control of execution thus ensuring that threads [[Run to completion scheduling|run to completion]] . This can create problems if a cooperatively multitasked thread [[Blocking (computing)|blocks]] by waiting on a [[Resource (computer science)|resource]] or if it [[Starvation (computer science)|starves]] other threads by not yielding control of execution during intensive computation.

=== Single- vs multi-processor systems ===
Until the early 2000s, most desktop computers had only one single-core CPU, with no support for [[hardware thread]]s, although threads were still used on such computers because switching between threads was generally still quicker than full-process [[context switch]]es. In 2002, [[Intel]] added support for [[simultaneous multithreading]] to the [[Pentium&amp;nbsp;4]] processor, under the name ''[[hyper-threading]]''; in 2005, they introduced the dual-core [[Pentium&amp;nbsp;D]] processor and [[AMD]] introduced the dual-core [[Athlon&amp;nbsp;64&amp;nbsp;X2]] processor.

Systems with a single processor generally implement multithreading by [[Preemption (computing)#Time slice|time slicing]]: the [[central processing unit]] (CPU) switches between different ''software threads''. This [[context switch]]ing usually occurs frequently enough that users perceive the threads or tasks as running in parallel (for popular server/desktop operating systems, maximum time slice of a thread, when other threads are waiting, is often limited to 100-200ms). On a [[multiprocessor]] or [[multi-core]] system, multiple threads can execute in [[parallel computing|parallel]], with every processor or core executing a separate thread simultaneously; on a processor or core with ''[[hardware thread]]s'', separate software threads can also be executed concurrently by separate hardware threads.

===Threading models===

====1:1 (kernel-level threading)====
Threads created by the user in a 1:1 correspondence with schedulable entities in the kernel&lt;ref name=OSConcepts&gt;{{cite book|last=Gagne|first=Abraham Silberschatz, Peter Baer Galvin, Greg|title=Operating system concepts|year=2013|publisher=Wiley|location=Hoboken, N.J.|isbn=9781118063330|pages=170–171|edition=9th}}&lt;/ref&gt; are the simplest possible threading implementation. [[OS/2]] and [[Win32]] used this approach from the start, while on [[Linux]] the [[GNU C Library|usual C library]] implements this approach (via the [[Native POSIX Thread Library|NPTL]] or older [[LinuxThreads]]). This approach is also used by [[Solaris (operating system)|Solaris]], [[NetBSD]], [[FreeBSD]], [[macOS]], and [[iOS]].

====''N'':1 (user-level threading)====
An ''N'':1 model implies that all application-level threads map to one kernel-level scheduled entity;&lt;ref name=OSConcepts /&gt; the kernel has no knowledge of the application threads. With this approach, context switching can be done very quickly and, in addition, it can be implemented even on simple kernels which do not support threading. One of the major drawbacks, however, is that it cannot benefit from the hardware acceleration on [[Multithreading (computer hardware)|multithreaded]] processors or [[Multiprocessing|multi-processor]] computers: there is never more than one thread being scheduled at the same time.&lt;ref name=OSConcepts /&gt; For example: If one of the threads needs to execute an I/O request, the whole process is blocked and the threading advantage cannot be used. The [[GNU Portable Threads]] uses User-level threading, as does [[State Threads]].

====''M'':''N'' (hybrid threading)====
''M'':''N'' maps some {{var|M}} number of application threads onto some {{var|N}} number of kernel entities,&lt;ref name=OSConcepts /&gt; or &quot;virtual processors.&quot; This is a compromise between kernel-level (&quot;1:1&quot;) and user-level (&quot;''N'':1&quot;) threading. In general, &quot;''M'':''N''&quot; threading systems are more complex to implement than either kernel or user threads, because changes to both kernel and user-space code are required{{clarify|reason=no kernel modifications are needed|date=June 2020}}. In the M:N implementation, the threading library is responsible for scheduling user threads on the available schedulable entities; this makes context switching of threads very fast, as it avoids system calls. However, this increases complexity and the likelihood of [[priority inversion]], as well as suboptimal scheduling without extensive (and expensive) coordination between the userland scheduler and the kernel scheduler.

====Hybrid implementation examples====
* [[Scheduler activations]] used by older versions of the NetBSD native POSIX threads library implementation (an ''M'':''N'' model as opposed to a 1:1 kernel or userspace implementation model)
* [[Light-weight process]]es used by older versions of the [[Solaris (operating system)|Solaris]] operating system
* Marcel from the [[PM2]] project.
* The OS for the Tera-[[Cray MTA-2]]
* Microsoft [[Windows 7]] user-mode scheduling&lt;ref&gt;{{cite web|url=https://os.itec.kit.edu/downloads/sa_2010_rittinghaus-marc_syscall-aggregation.pdf|title=System Call Aggregation for a Hybrid Thread Model|author=Marc Rittinghaus|date=23 December 2010|page=10}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=https://docs.microsoft.com/en-us/windows/desktop/ProcThread/user-mode-scheduling|title=User-Mode Scheduling|website=Microsoft Docs|date=30 May 2018}}&lt;/ref&gt;
* The [[Glasgow Haskell Compiler]] (GHC) for the language [[Haskell (programming language)|Haskell]] uses lightweight threads which are scheduled on operating system threads.

====History of threading models in Unix systems====
[[SunOS]] 4.x implemented ''[[light-weight process]]es'' or LWPs. [[NetBSD]] 2.x+, and [[DragonFly BSD]] implement LWPs as kernel threads (1:1 model). SunOS 5.2 through SunOS 5.8 as well as NetBSD 2 to NetBSD 4 implemented a two level model, multiplexing one or more user level threads on each kernel thread (M:N model). SunOS 5.9 and later, as well as NetBSD 5 eliminated user threads support, returning to a 1:1 model.&lt;ref&gt;{{cite web|url=http://www.sun.com/software/whitepapers/solaris9/multithread.pdf|title=Multithreading in the Solaris Operating Environment|year=2002|archiveurl=https://web.archive.org/web/20090226174929/http://www.sun.com/software/whitepapers/solaris9/multithread.pdf |archivedate=February 26, 2009}}&lt;/ref&gt; FreeBSD 5 implemented M:N model. FreeBSD 6 supported both 1:1 and M:N, users could choose which one should be used with a given program using /etc/libmap.conf. Starting with FreeBSD 7, the 1:1 became the default. FreeBSD 8 no longer supports the M:N model.

==Single-threaded vs multithreaded programs==
In [[computer programming]], ''single-threading'' is the processing of one [[Command (computing)|command]] at a time.&lt;ref&gt;{{Cite book|author=Raúl Menéndez|author2=Doug Lowe |title=Murach's CICS for the COBOL Programmer|page=512|publisher=Mike Murach &amp; Associates|date=2001|isbn=978-1-890774-09-7|url=https://books.google.com/books?id=j1t1u_UniU0C&amp;q=%22single+threading%22}}&lt;/ref&gt; In the formal analysis of the variables' [[Semantics (computer science)|semantics]] and process state, the term ''single threading'' can be used differently to mean &quot;backtracking within a single thread&quot;, which is common in the [[functional programming]] community.&lt;ref&gt;{{Cite book|author=Peter William O'Hearn|author2=R. D. Tennent |title=ALGOL-like languages|volume=2|publisher=[[Birkhäuser Verlag]]|date=1997|page=157|isbn=978-0-8176-3937-2|url=https://books.google.com/books?id=btp58ihqgccC&amp;pg=PA157}}&lt;/ref&gt;

Multithreading is mainly found in multitasking operating systems. Multithreading is a widespread programming and execution model that allows multiple threads to exist within the context of one process. These threads share the process's resources, but are able to execute independently. The threaded programming model provides developers with a useful abstraction of concurrent execution. Multithreading can also be applied to one process to enable [[parallel computing|parallel execution]] on a [[multiprocessing]] system.

Multithreading libraries tend to provide a function call to create a new thread, which takes a function as a parameter. A concurrent thread is then created which starts running the passed function and ends when the function returns. The thread libraries also offer data synchronization functions.

===Threads and data synchronization===
{{anchor|Synchronization}}
{{Main|Thread safety}}
Threads in the same process share the same address space. This allows concurrently running code to [[coupling (computer science)|couple]] tightly and conveniently exchange data without the overhead or complexity of an [[inter-process communication|IPC]]. When shared between threads, however, even simple data structures become prone to [[Race condition#Computing|race conditions]] if they require more than one CPU instruction to update: two threads may end up attempting to update the data structure at the same time and find it unexpectedly changing underfoot. Bugs caused by race conditions can be very difficult to reproduce and isolate.

To prevent this, threading [[application programming interface]]s (APIs) offer [[synchronization primitive]]s such as [[mutex|mutexes]] to [[Lock (computer science)|lock]] data structures against concurrent access. On uniprocessor systems, a thread running into a locked mutex must sleep and hence trigger a context switch. On multi-processor systems, the thread may instead poll the mutex in a [[spinlock]]. Both of these may sap performance and force processors in [[symmetric multiprocessing]] (SMP) systems to contend for the memory bus, especially if the [[Lock (computer science)#Granularity|granularity]] of the locking is too fine.

Other synchronization APIs include [[condition variables]], [[critical section]]s, [[Semaphore (programming)|semaphores]], and [[Monitor (synchronization)|monitors]].

===Thread pools===
{{Main|Thread pool pattern}}
A popular programming pattern involving threads is that of [[Thread pool pattern|thread pools]] where a set number of threads are created at startup that then wait for a task to be assigned. When a new task arrives, it wakes up, completes the task and goes back to waiting. This avoids the relatively expensive thread creation and destruction functions for every task performed and takes thread management out of the application developer's hand and leaves it to a library or the operating system that is better suited to optimize thread management.

===Multithreaded programs vs single-threaded programs pros and cons===

Multithreaded applications have the following advantages vs single-threaded ones:
* ''Responsiveness'': multithreading can allow an application to remain responsive to input. In a one-thread program, if the main execution thread blocks on a long-running task, the entire application can appear to freeze. By moving such long-running tasks to a ''worker thread'' that runs concurrently with the main execution thread, it is possible for the application to remain responsive to user input while executing tasks in the background. On the other hand, in most cases multithreading is not the only way to keep a program responsive, with [[non-blocking I/O]] and/or [[Unix signals]] being available for obtaining similar results.&lt;ref&gt;{{cite journal|url=http://accu.org/index.php/journals/1634|title=Single-Threading: Back to the Future?|author=Sergey Ignatchenko|journal=Overload|issue=97}}&lt;/ref&gt;
* ''Parallelization'': applications looking to use multicore or multi-CPU systems can use multithreading to split data and tasks into parallel subtasks and let the underlying architecture manage how the threads run, either concurrently on one core or in parallel on multiple cores. GPU computing environments like [[CUDA]] and [[OpenCL]] use the multithreading model where dozens to hundreds of threads run in [[Data parallelism|parallel across data]] on a [[Manycore|large number of cores]]. This, in turn, enables better system utilization, and (provided that synchronization costs don't eat the benefits up), can provide faster program execution. 

Multithreaded applications have the following drawbacks:
* ''[[#Synchronization|Synchronization]]'' complexity and related bugs: when using shared resources typical for threaded programs, the [[programmer]] must be careful to avoid [[Race condition#Computing|race conditions]] and other non-intuitive behaviors. In order for data to be correctly manipulated, threads will often need to [[Rendezvous problem|rendezvous]] in time in order to process the data in the correct order. Threads may also require [[mutual exclusion|mutually exclusive]] operations (often implemented using [[lock (computer science)|mutexes]]) to prevent common data from being read or overwritten in one thread while being modified by another. Careless use of such primitives can lead to [[deadlock]]s, livelocks or [[race condition|races]] over resources. As [[Edward A. Lee]] has wrote: &quot;Although threads seem to be a small step from sequential computation, in fact, they represent a huge step. They discard the most essential and appealing properties of sequential computation: understandability, predictability, and determinism. Threads, as a model of computation, are wildly non-deterministic, and the job of the programmer becomes one of pruning that nondeterminism.&quot;&lt;ref name=&quot;Lee&quot; /&gt;
* ''Being untestable''. In general, multithreaded programs are non-deterministic, and as a result, are untestable. In other words, a multithreaded program can easily have bugs which never manifest on a test system, manifesting only in production.&lt;ref&gt;{{cite web|url=https://accu.org/journals/overload/23/128/ignatchenko_2134/|title=Multi-threading at Business-logic Level is Considered Harmful|publisher=ACCU}}&lt;/ref&gt;&lt;ref name=&quot;Lee&quot;&gt;{{cite web|url=http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.html|title=The Problem with Threads|author=Edward Lee|publisher=UC Berkeley|date=January 10, 2006}}&lt;/ref&gt; This can be alleviated by restricting inter-thread communications to certain well-defined patterns (such as message-passing).
* ''Synchronization costs''. As thread context switch on modern CPUs can cost up to 1 million CPU cycles,&lt;ref&gt;{{cite web|url=http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/|title=Operation Costs in CPU Clock Cycles|author='No Bugs' Hare}}&lt;/ref&gt; it makes writing efficient multithreading programs difficult. In particular, special attention has to be paid to avoid inter-thread synchronization from being too frequent.

==Programming language support==
Many programming languages support threading in some capacity. 

* IBM [[PL/I]](F) included support for multithreading (called ''multitasking'') as early as in the late 1960s, and this was continued in the Optimizing Compiler and later versions. The IBM Enterprise PL/I compiler introduced a new model &quot;thread&quot; API. Neither version was part of the PL/I standard.

* Many implementations of [[C (programming language)|C]] and [[C++]] support threading, and provide access to the native threading APIs of the operating system. A standardized interface for thread implementation is [[POSIX Threads]] (Pthreads), which is a set of C-function library calls. OS vendors are free to implement the interface as desired, but the application developer should be able to use the same interface across multiple platforms. Most [[Unix]] platforms including Linux support Pthreads. Microsoft Windows has its own set of thread functions in the [[process.h]] interface for multithreading, like [[beginthread]]. 

* Some [[high-level programming language|higher level]] (and usually [[cross-platform]]) programming languages, such as [[Java (programming language)|Java]], [[Python (programming language)|Python]], and [[.NET Framework]] languages, expose threading to developers while abstracting the platform specific differences in threading implementations in the runtime. Several other programming languages and language extensions also try to abstract the concept of concurrency and threading from the developer fully ([[Cilk]], [[OpenMP]], [[Message Passing Interface]] (MPI)). Some languages are designed for sequential parallelism instead (especially using GPUs), without requiring concurrency or threads ([[Ateji PX]], [[CUDA]]).

* A few interpreted programming languages have implementations (e.g., [[Ruby MRI]] for Ruby, [[CPython]] for Python) which support threading and concurrency but not parallel execution of threads, due to a [[global interpreter lock]] (GIL). The GIL is a mutual exclusion lock held by the interpreter that can prevent the interpreter from simultaneously interpreting the applications code on two or more threads at once, which effectively limits the parallelism on multiple core systems. This limits performance mostly for processor-bound threads, which require the processor, and not much for I/O-bound or network-bound ones. Other implementations of interpreted programming languages, such as [[Tcl]] using the Thread extension, avoid the GIL limit by using an Apartment model where data and code must be explicitly &quot;shared&quot; between threads. In Tcl each thread has one or more interpreters.

* In programming models such as [[CUDA]] designed for [[data parallel computation]], an array of threads run [[compute kernel|the same code]] in parallel using only its ID to find its data in memory. In essence, the application must be designed so that each thread performs the same operation on different segments of memory so that they can operate in parallel and use the GPU architecture.
