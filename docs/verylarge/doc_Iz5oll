====Spam in blogs====
{{main|Spam in blogs}}
[[Spam in blogs]] is the placing or solicitation of links randomly on other sites, placing a desired keyword into the hyperlinked text of the inbound link. Guest books, forums, blogs, and any site that accepts visitors' comments are particular targets and are often victims of drive-by spamming where automated software creates nonsense posts with links that are usually irrelevant and unwanted.

====Comment spam====
Comment spam is a form of link spam that has arisen in web pages that allow dynamic user editing such as [[wikis]], [[blogs]], and [[guestbooks]]. It can be problematic because [[Software agent|agents]] can be written that automatically randomly select a user edited web page, such as a Wikipedia article, and add spamming links.&lt;ref name=Mishne&gt;{{cite conference
  | first = Gilad | last = Mishne | author-link = Gilad Mishne |author2=David Carmel |author3=Ronny Lempel
  | title = Blocking Blog Spam with Language Model Disagreement
  | book-title = Proceedings of the First International Workshop on Adversarial Information Retrieval on the Web
  | year=2005 | url = http://airweb.cse.lehigh.edu/2005/mishne.pdf
  | access-date = 2007-10-24 }}&lt;/ref&gt;

====Wiki spam====
Wiki spam is a form of link spam on wiki pages. The spammer uses the open editability of wiki systems to place links from the wiki site to the spam site.

====Referrer log spamming====
[[Referrer spam]] takes place when a spam perpetrator or facilitator accesses a [[web page]] (the ''referee''), by following a link from another web page (the ''[[referrer]]''), so that the referee is given the address of the referrer by the person's Internet browser. Some [[website]]s have a referrer log which shows which pages link to that site. By having a [[Internet bot|robot]] randomly access many sites enough times, with a message or specific address given as the referrer, that message or Internet address then appears in the referrer log of those sites that have referrer logs. Since some [[Web search engine]]s base the importance of sites on the number of different sites linking to them, referrer-log spam may increase the search engine rankings of the spammer's sites.  Also, site administrators who notice the referrer log entries in their logs may follow the link back to the spammer's referrer page.

==== Countermeasures ====
Because of the large amount of spam posted to user-editable webpages, Google proposed a nofollow tag that could be embedded with links. A link-based search engine, such as Google's [[PageRank]] system, will not use the link to increase the score of the linked website if the link carries a nofollow tag. This ensures that spamming links to user-editable websites will not raise the sites ranking with search engines. Nofollow is used by several major websites, including [[WordPress|Wordpress]], [[Blogger (service)|Blogger]] and [[Wikipedia]].{{citation needed|date=October 2012}}

==Other types==

===Mirror websites===
A [[mirror website|mirror site]] is the hosting of multiple websites with conceptually similar content but using different [[Uniform Resource Locator|URLs]]. Some search engines give a higher rank to results where the keyword searched for appears in the URL.

===URL redirection===
[[URL redirection]] is the taking of the user to another page without his or her intervention, ''e.g.'', using [[META refresh]] tags, [[Adobe Flash|Flash]],  [[JavaScript]], [[Java (programming language)|Java]] or [[Server side redirect]]s. However, [[HTTP 301|301 Redirect]], or permanent redirect, is not considered as a malicious behavior.

===Cloaking===
[[Cloaking]] refers to any of several means to serve a page to the search-engine [[Web crawler|spider]] that is different from that seen by human users. It can be an attempt to mislead search engines regarding the content on a particular web site. Cloaking, however, can also be used to ethically increase accessibility of a site to users with disabilities or provide human users with content that search engines aren't able to process or parse. It is also used to deliver content based on a user's location; Google itself uses [[IP delivery]], a form of cloaking, to deliver results. Another form of cloaking is ''code swapping'', ''i.e.'', optimizing a page for top ranking and then swapping another page in its place once a top ranking is achieved. Google refers to these type of redirects as ''Sneaky Redirects''.&lt;ref&gt;{{cite web|url=https://support.google.com/webmasters/answer/2721217?hl=en|title=Sneaky redirects - Search Console Help|website=support.google.com}}&lt;/ref&gt;

== Countermeasures ==
{{Expand section|date=October 2017}}

=== By search engine maintainer ===
Spamdexed pages are sometimes eliminated from search results by the search engine.

=== By search engine user ===
Users can craft at search keyword, for example, a keyword preceding &quot;-&quot; (minus) will eliminate sites that contains the keyword in their pages or in their domain of URL of the pages from search result. Example, search keyword &quot;-naver&quot; will eliminate sites that contains word &quot;naver&quot; in their pages and the pages whose domain of URL contains &quot;naver&quot;.

=== Google Chrome extension ===

Google itself launched the [[Google Chrome]] extension &quot;Personal Blocklist (by Google)&quot; in 2011 as part of countermeasures against [[content farm]]ing.&lt;ref&gt;{{cite web|url=http://gigazine.net/news/20161129-personal-blocklist-by-google/|title=Google検索結果の悪質なサイトを非表示＆通報し検索品質アップに貢献できるGoogle公式Chrome拡張機能「Personal Blocklist」|website=gigazine.net}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://searchengineland.com/googles-personal-blocklist-delete-google-search-results-on-chrome-64757|title=New: Block Sites From Google Results Using Chrome's &quot;Personal Blocklist&quot; - Search Engine Land|date=14 February 2011|website=searchengineland.com}}&lt;/ref&gt;  As of 2018, the extension only works with the [[Personal Computer|PC]] version of Google Chrome.

==See also==

* [[Adversarial information retrieval]]
* [[Index (search engine)]] – overview of search engine indexing technology
* [[TrustRank]]
* [[Web scraping]]
*[[Microsoft SmartScreen]]
*[[Windows Defender]]

==References==
{{Reflist}}

==External links==
{{Wiktionary}}

{{Spamming}}

[[Category:Black hat search engine optimization]]
[[Category:Spamming]]</text>
      <sha1>tgnby7cjpg0g9j91p4fp9aqyhr84g26</sha1>
    </revision>
  </page>
  <page>
    <title>Control-flow graph</title>
    <ns>0</ns>
    <id>43653</id>
    <revision>
      <id>991632670</id>
      <parentid>984280476</parentid>
      <timestamp>2020-12-01T01:50:47Z</timestamp>
      <contributor>
        <username>Monkbot</username>
        <id>20483999</id>
      </contributor>
      <minor />
      <comment>[[User:Monkbot/task 18|Task 18 (cosmetic)]]: eval 7 templates: del empty params (2×); hyphenate params (1×);</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11391" xml:space="preserve">{{Short description|graphical representation of a computer program or algorithm}}
{{multiple issues|
{{More citations needed|date=January 2009}}
{{expert needed|Computer science|reason=many bad/unclear definitions and dubious claims.|date=February 2015}}
}}

[[File:Some types of control flow graphs.svg|thumb|Some CFG examples:&lt;br/&gt;(a) an if-then-else&lt;br/&gt;(b) a while loop&lt;br/&gt;(c) a natural loop with two exits, e.g. while with an if...break in the middle; non-structured but reducible&lt;br/&gt;(d) an irreducible CFG: a loop with two entry points, e.g. goto into a while or for loop]]
In [[computer science]], a '''control-flow graph''' ('''CFG''') is a [[Depiction|representation]], using [[Graph (discrete mathematics)|graph]] notation, of all paths that might be traversed through a [[computer program|program]] during its [[execution (computing)|execution]]. The control-flow graph is due to [[Frances E. Allen]],&lt;ref&gt;{{cite journal
| author = Frances E. Allen
| title = Control flow analysis
| journal = SIGPLAN Notices
| volume = 5
| issue = 7
|date=July 1970
| pages = 1–19
| doi=10.1145/390013.808479| author-link = Frances E. Allen
}}&lt;/ref&gt; who notes that [[Reese Prosser|Reese T. Prosser]] used [[Adjacency matrix|boolean connectivity matrices]] for flow analysis before.&lt;ref&gt;{{cite news 
| author = Reese T. Prosser
| title = Applications of Boolean matrices to the analysis of flow diagrams
| book-title = Papers presented at the December 1–3, 1959, eastern joint IRE-AIEE-ACM computer conference
| year = 1959
| pages = 133–138
| author-link = Reese Prosser
}}&lt;/ref&gt;

The CFG is essential to many [[compiler optimization#Data-flow optimizations|compiler optimization]]s and [[static code analysis|static-analysis]] tools.

== Definition ==
In a control-flow graph each [[Vertex (graph theory)|node]] in the [[Graph (discrete mathematics)|graph]] represents a [[basic block]], i.e. a straight-line piece of code without any jumps or [[jump target (computing)|jump targets]]; jump targets start a block, and jumps end a block. Directed [[edge (graph theory)|edge]]s are used to represent jumps in the [[control flow]]. There are, in most presentations, two specially designated blocks: the ''entry block'', through which control enters into the flow graph, and the ''exit block'', through which all control flow leaves.&lt;ref&gt;{{cite conference |title=Masking wrong-successor Control Flow Errors employing data redundancy  |last1=Yousefi |first1=Javad |date= 2015|publisher=IEEE |pages=201–205 |doi=10.1109/ICCKE.2015.7365827 }}&lt;/ref&gt;

Because of its construction procedure, in a CFG, every edge A→B has the property that:
: [[outdegree]](A) &gt; 1 or indegree(B) &gt; 1 (or both).&lt;ref name=&quot;TarrWolf2011&quot;&gt;{{cite book|author1=Peri L. Tarr|author2=Alexander L. Wolf|title=Engineering of Software: The Continuing Contributions of Leon J. Osterweil|year=2011|publisher=Springer Science &amp; Business Media|isbn=978-3-642-19823-6|page=58}}&lt;/ref&gt;

The CFG can thus be obtained, at least conceptually, by starting from the program's (full) flow graph—i.e. the graph in which every node represents an individual instruction—and performing an [[edge contraction]] for every edge that falsifies the predicate above, i.e. contracting every edge whose source has a single exit and whose destination has a single entry. This contraction-based algorithm is of no practical importance, except as a visualization aid for understanding the CFG construction, because the CFG can be more efficiently constructed directly from the program by [[Basic block#Creation algorithm|scanning it for basic blocks]].&lt;ref name=&quot;TarrWolf2011&quot;/&gt;

==Example==
Consider the following fragment of code:
&lt;pre&gt;
0: (A) t0 = read_num
1: (A) if t0 mod 2 == 0
2: (B)   print t0 + &quot; is even.&quot;
3: (B)   goto 5
4: (C) print t0 + &quot; is odd.&quot;
5: (D) end program
&lt;/pre&gt;
In the above, we have 4 basic blocks: A from 0 to 1, B from 2 to 3, C at 4 and D at 5. In particular, in this case, A is the &quot;entry block&quot;, D the &quot;exit block&quot; and lines 4 and 5 are jump targets. A graph for this fragment has edges from A to B, A to C, B to D and C to D.

== Reachability ==
{{Main|Reachability}}

[[Reachability]] is a graph property useful in optimization.

If a subgraph is not connected from the subgraph containing the entry block, that subgraph is unreachable during any execution, and so is [[unreachable code]]; under normal conditions it can be safely removed.

If the exit block is unreachable from the entry block, an [[infinite loop]] may exist. Not all infinite loops are detectable, see [[Halting problem]]. A halting order may also exist there.

Unreachable code and infinite loops are possible even if the programmer does not explicitly code them: optimizations like [[constant propagation]] and [[constant folding]] followed by [[jump threading]] can collapse multiple basic blocks into one, cause edges to be removed from a CFG, etc., thus possibly disconnecting parts of the graph.

==Domination relationship==
{{Main|Dominator (graph theory)}}

A block M ''[[dominator (graph theory)|dominates]]'' a block N if every path from the entry that reaches block N has to pass through block M. The entry block dominates all blocks.

In the reverse direction, block M ''postdominates'' block N if every path from N to the exit has to pass through block M. The exit block postdominates all blocks.

It is said that a block M ''immediately dominates'' block N if M dominates N, and there is no intervening block P such that M dominates P and P dominates N. In other words, M is the last dominator on all paths from entry to N. Each block has a unique immediate dominator.

Similarly, there is a notion of ''immediate postdominator'', analogous to ''immediate dominator''.

The [[dominator (graph theory)|''dominator tree'']] is an ancillary data structure depicting the dominator relationships. There is an arc from Block M to Block N if M is an immediate dominator of N. This graph is a tree, since each block has a unique immediate dominator. This tree is rooted at the entry block. The dominator tree can be calculated efficiently using [[Lengauer–Tarjan's algorithm]].

A ''postdominator tree'' is analogous to the ''dominator tree''. This tree is rooted at the exit block.

==Special edges==

A ''back edge'' is an edge that points to a block that has already been met during a depth-first ([[depth-first search|DFS]]) traversal of the graph. Back edges are typical of loops.

A ''critical edge'' is an edge which is neither the only edge leaving its source block, nor the only edge entering its destination block. These edges must be ''split'': a new block must be created in the middle of the edge, in order to insert computations on the edge without affecting any other edges.

An ''abnormal edge'' is an edge whose destination is unknown. [[Exception handling]] constructs can produce them. These edges tend to inhibit optimization.

An ''impossible edge'' (also known as a ''fake edge'') is an edge which has been added to the graph solely to preserve the property that the exit block postdominates all blocks. It cannot ever be traversed.

==Loop management==

A ''loop header'' (sometimes called the ''entry point'' of the loop) is a dominator that is the target of a loop-forming back edge. The loop header dominates all blocks in the loop body.  A block may be a loop header for more than one loop.  A loop may have multiple entry points, in which case it has no &quot;loop header&quot;.

Suppose block M is a dominator with several incoming edges, some of them being back edges (so M is a loop header). It is advantageous to several optimization passes to break M up into two blocks M&lt;sub&gt;pre&lt;/sub&gt; and M&lt;sub&gt;loop&lt;/sub&gt;. The contents of M and back edges are moved to M&lt;sub&gt;loop&lt;/sub&gt;, the rest of the edges are moved to point into M&lt;sub&gt;pre&lt;/sub&gt;, and a new edge from M&lt;sub&gt;pre&lt;/sub&gt; to M&lt;sub&gt;loop&lt;/sub&gt; is inserted (so that M&lt;sub&gt;pre&lt;/sub&gt; is the immediate dominator of M&lt;sub&gt;loop&lt;/sub&gt;). In the beginning, M&lt;sub&gt;pre&lt;/sub&gt; would be empty, but passes like [[loop-invariant code motion]] could populate it. M&lt;sub&gt;pre&lt;/sub&gt; is called the ''loop pre-header'', and M&lt;sub&gt;loop&lt;/sub&gt; would be the loop header.

== Reducibility ==

A reducible CFG is one with edges that can be partitioned into two disjoint sets: forward edges, and back edges, such that:&lt;ref&gt;http://www.cs.colostate.edu/~mstrout/CS553Fall06/slides/lecture13-control.pdf&lt;/ref&gt;

* Forward edges form a [[directed acyclic graph]] with all nodes reachable from the entry node.
* For all back edges (A, B), node B [[Dominator (graph theory)|dominates]] node A.

[[Structured programming]] languages are often designed such that all CFGs they produce are reducible, and common structured programming statements such as IF, FOR, WHILE, BREAK, and CONTINUE produce reducible graphs. To produce irreducible graphs, statements such as [[GOTO]] are needed.  Irreducible graphs may also be produced by some compiler optimizations.
